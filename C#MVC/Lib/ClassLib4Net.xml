<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ClassLib4Net</name>
    </assembly>
    <members>
        <member name="T:ClassLib4Net.Api.IPaging">
            <summary>
            分页参数
            </summary>
        </member>
        <member name="P:ClassLib4Net.Api.IPaging.PageSize">
            <summary>
            页容量
            </summary>
        </member>
        <member name="P:ClassLib4Net.Api.IPaging.PageIndex">
            <summary>
            页索引
            </summary>
        </member>
        <member name="T:ClassLib4Net.Api.IPageCount">
            <summary>
            分页总数
            </summary>
        </member>
        <member name="P:ClassLib4Net.Api.IPageCount.PageCount">
            <summary>
            分页总数
            </summary>
        </member>
        <member name="T:ClassLib4Net.Api.ITotal">
            <summary>
            总数
            </summary>
        </member>
        <member name="P:ClassLib4Net.Api.ITotal.Total">
            <summary>
            总数
            </summary>
        </member>
        <member name="T:ClassLib4Net.Api.IBase">
            <summary>
            状态信息
            </summary>
        </member>
        <member name="P:ClassLib4Net.Api.IBase.Status">
            <summary>
            状态码
            </summary>
        </member>
        <member name="P:ClassLib4Net.Api.IBase.Message">
            <summary>
            信息
            </summary>
        </member>
        <member name="T:ClassLib4Net.Api.ApiModel">
            <summary>
            基本接口模型
            </summary>
        </member>
        <member name="P:ClassLib4Net.Api.ApiModel.Status">
            <summary>
            状态码
            </summary>
        </member>
        <member name="P:ClassLib4Net.Api.ApiModel.Message">
            <summary>
            信息
            </summary>
        </member>
        <member name="T:ClassLib4Net.Api.ApiDataModel`1">
            <summary>
            数据接口模型
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:ClassLib4Net.Api.ApiDataModel`1.Data">
            <summary>
            数据
            </summary>
        </member>
        <member name="T:ClassLib4Net.Api.ApiDataModel">
            <summary>
            数据接口模型
            </summary>
        </member>
        <member name="P:ClassLib4Net.Api.abstractApiList.List">
            <summary>
            列表数据
            </summary>
        </member>
        <member name="P:ClassLib4Net.Api.abstractApiList.PageSize">
            <summary>
            页容量
            </summary>
        </member>
        <member name="P:ClassLib4Net.Api.abstractApiList.PageIndex">
            <summary>
            页索引
            </summary>
        </member>
        <member name="P:ClassLib4Net.Api.abstractApiList.Total">
            <summary>
            总数
            </summary>
        </member>
        <member name="P:ClassLib4Net.Api.abstractApiList.PageCount">
            <summary>
            分页总数(根据总数和页容量自动计算)
            </summary>
        </member>
        <member name="P:ClassLib4Net.Api.ApiListModel.Status">
            <summary>
            状态码
            </summary>
        </member>
        <member name="P:ClassLib4Net.Api.ApiListModel.Message">
            <summary>
            信息
            </summary>
        </member>
        <member name="T:ClassLib4Net.Api.ApiListModel`1">
            <summary>
            列表数据接口模型
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:ClassLib4Net.Api.ApiListModel`1.List">
            <summary>
            列表数据
            </summary>
        </member>
        <member name="T:ClassLib4Net.Api.ApiList">
            <summary>
            列表数据类型
            </summary>
        </member>
        <member name="T:ClassLib4Net.Api.ApiList`1">
            <summary>
            列表数据类型
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:ClassLib4Net.Api.ApiList`1.List">
            <summary>
            列表数据
            </summary>
        </member>
        <member name="T:ClassLib4Net.Api.ApiDataListModel">
            <summary>
            数据列表接口模型
            </summary>
        </member>
        <member name="T:ClassLib4Net.Api.ApiDataListModel`1">
            <summary>
            数据列表接口模型
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:ClassLib4Net.AsyncHelper`1">
            <summary>
            异步处理帮助器
            </summary>
            <typeparam name="T">异步处理传入的类型</typeparam>
        </member>
        <member name="T:ClassLib4Net.AsyncHelper`1.AsynActionHandler">
            <summary>
            异步处理委托
            </summary>
            <param name="actionContent"></param>
        </member>
        <member name="E:ClassLib4Net.AsyncHelper`1.OnActing">
            <summary>
            异步处理执行此逻辑
            </summary>
        </member>
        <member name="E:ClassLib4Net.AsyncHelper`1.OnActed">
            <summary>
            异步处理执行完成后执行此逻辑
            </summary>
        </member>
        <member name="M:ClassLib4Net.AsyncHelper`1.Act(`0)">
            <summary>
            开始执行异步处理
            </summary>
            <param name="actionContent"></param>
        </member>
        <member name="T:ClassLib4Net.BarCodeHelper">
            <summary>
            BarCode 一维码（条形码）助手
            熊学浩
            </summary>
        </member>
        <member name="M:ClassLib4Net.BarCodeHelper.Get39ToHtml(System.String,System.Int32,System.Int32)">
            <summary>
            生成不超过39位字符串条形码
            </summary>
            <param name="s">原字符串(最多13字符)</param>
            <param name="width">条形宽度(像素)</param>
            <param name="height">条形高度(像素)</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.BarCodeHelper.GetEAN13ToHtml(System.String,System.Int32,System.Int32)">
            <summary>
            13位条形码解析
            </summary>
            <param name="s">13位条形码</param>
            <param name="width">条形宽度(像素)</param>
            <param name="height">条形高度(像素)</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.BarCodeHelper.GetCodeImage(System.String,ClassLib4Net.BarCodeHelper.Code39Model,System.Boolean,System.Drawing.Font,System.Byte,System.Int32)">
            <summary>  
            获得条码图形39  
            </summary>  
            <param name="p_Text">文字信息</param>  
            <param name="p_Model">类别</param>  
            <param name="p_StarChar">是否增加前后*号</param>  
            <param name="m_ViewFont">文字样式</param>  
            <param name="m_Magnify">放大倍数</param>  
            <param name="m_Height">图形高</param>  
            <returns>图形</returns>  
        </member>
        <member name="F:ClassLib4Net.BarCodeHelper.Code39Model.Code39Normal">
            <summary>  
            基本类别 1234567890ABC  
            </summary>  
        </member>
        <member name="F:ClassLib4Net.BarCodeHelper.Code39Model.Code39FullAscII">
            <summary>  
            全ASCII方式 +A+B 来表示小写  
            </summary>  
        </member>
        <member name="M:ClassLib4Net.BarCodeHelper.GetImage(System.String,System.Byte,System.Int32)">
            <summary>  
            绘制编码图形  
            </summary>  
            <param name="p_Text">编码</param>  
            <param name="m_Magnify">放大倍数</param>  
            <param name="m_Height">图形高</param>  
            <returns>图形</returns>  
        </member>
        <member name="M:ClassLib4Net.BarCodeHelper.GetViewImage(System.Drawing.Bitmap,System.String,System.Drawing.Font)">
            <summary>  
            绘制文字  
            </summary>  
            <param name="p_CodeImage">图形</param>  
            <param name="p_Text">文字</param>  
            <param name="m_ViewFont">文字样式</param>  
        </member>
        <member name="T:ClassLib4Net.CacheHelper">
            <summary>
            缓存帮助类（HttpRuntime.Cache：获取当前应用程序的Cache）
            </summary>
        </member>
        <member name="M:ClassLib4Net.CacheHelper.Get``1(System.String,System.Func{``0})">
            <summary>
            获取Cache值
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="key">键</param>
            <param name="f">得到值的方法(lambda)</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.CacheHelper.Get``1(System.String,System.Func{``0},System.Int32)">
            <summary>
            获取Cache值
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="key">键</param>
            <param name="f">得到值的方法(lambda)</param>
            <param name="minitues"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.CacheHelper.Get``1(System.String,``0@)">
            <summary>
            获取Cache值
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="key">键</param>
            <param name="t">返回类型的参数</param>
        </member>
        <member name="M:ClassLib4Net.CacheHelper.Get``1(System.String)">
            <summary>
            获取Cache值
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.CacheHelper.Insert``1(System.String,``0)">
            <summary>
            插入新的缓存
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="key">键</param>
            <param name="t">对象实例参数</param>
        </member>
        <member name="M:ClassLib4Net.CacheHelper.Insert``1(System.String,``0,System.Int32)">
            <summary>
            插入新的缓存
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="key">键</param>
            <param name="t">对象实例参数</param>
            <param name="minitues"></param>
        </member>
        <member name="M:ClassLib4Net.CacheHelper.Exists(System.String)">
            <summary>
            判断是否存在指定键的缓存
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.CacheHelper.Remove(System.String)">
            <summary>
            移除指定键的缓存
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:ClassLib4Net.CacheHelper.Clear">
            <summary>
            清理HttpRuntime.Cache，移除所有缓存
            </summary>
        </member>
        <member name="M:ClassLib4Net.CacheHelper.GetCache(System.String)">
            <summary>
            获取当前应用程序指定key的Cache值
            </summary>
            <param name="key"></param>
            <returns></returns>y
        </member>
        <member name="M:ClassLib4Net.CacheHelper.SetCache(System.String,System.Object)">
            <summary>
            向 System.Web.Caching.Cache 对象插入项，该项带有一个缓存键引用其位置，并使用 System.Web.Caching.CacheItemPriority枚举提供的默认值。
            </summary>
            <param name="key">用于引用该项的缓存键。</param>
            <param name="value">要插入缓存中的对象。</param>
        </member>
        <member name="M:ClassLib4Net.CacheHelper.SetCache(System.String,System.Object,System.DateTime,System.TimeSpan)">
            <summary>
            向 System.Web.Caching.Cache 中插入具有依赖项和到期策略的对象。
            </summary>
            <param name="key">用于引用该对象的缓存键。</param>
            <param name="value">要插入缓存中的对象。</param>
            <param name="absoluteExpiration">所插入对象将到期并被从缓存中移除的时间。要避免可能的本地时间问题（例如从标准时间改为夏时制），请使用 System.DateTime.UtcNow 而不是System.DateTime.Now 作为此参数值。如果使用绝对到期，则 slidingExpiration 参数必须为 System.Web.Caching.Cache.NoSlidingExpiration。</param>
            <param name="slidingExpiration">最后一次访问所插入对象时与该对象到期时之间的时间间隔。如果该值等效于 20 分钟，则对象在最后一次被访问 20 分钟之后将到期并被从缓存中移除。如果使用可调到期，则absoluteExpiration 参数必须为 System.Web.Caching.Cache.NoAbsoluteExpiration。</param>
        </member>
        <member name="M:ClassLib4Net.CacheHelper.SetCache(System.String,System.Object,System.Int32)">
            <summary>
            向 System.Web.Caching.Cache 中插入具有依赖项和到期策略的对象。
            </summary>
            <param name="key">用于引用该对象的缓存键。</param>
            <param name="value">要插入缓存中的对象。</param>
            <param name="minutesExpiration">过期时间(分钟)</param>
        </member>
        <member name="M:ClassLib4Net.CacheHelper.RemoveKeyCache(System.String)">
            <summary>
            清除单一键缓存
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:ClassLib4Net.CacheHelper.RemoveAllCache">
            <summary>
            清除所有缓存
            </summary>
        </member>
        <member name="M:ClassLib4Net.CacheHelper.CacheKeys">
            <summary>
            以列表形式返回已存在的所有缓存 
            </summary>
            <returns></returns> 
        </member>
        <member name="T:ClassLib4Net.Cache.CacheManager">
            <summary>
            默认缓存管理器
            </summary>
        </member>
        <member name="P:ClassLib4Net.Cache.CacheManager.Current">
            <summary>
            获取当前缓存
            </summary>
        </member>
        <member name="M:ClassLib4Net.Cache.CacheManager.Add(System.String,System.Object,System.Int32)">
            <summary>
            添加缓存项
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expireMin">过期时长（分钟）</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Cache.CacheManager.Add(System.String,System.Object)">
            <summary>
            添加缓存项
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Cache.CacheManager.Add(System.String,System.Object,System.TimeSpan)">
            <summary>
            添加缓存项
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="timeSpan">过期时长</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Cache.CacheManager.Get(System.String)">
            <summary>
            获取缓存项值
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Cache.CacheManager.Get``1(System.String)">
            <summary>
            获取缓存项值
            </summary>
            <typeparam name="T">缓存项类型</typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Cache.CacheManager.Get(System.String[])">
            <summary>
            获取多个缓存项
            </summary>
            <param name="keys">缓存键列表</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Cache.CacheManager.Remove(System.String)">
            <summary>
            删除缓存项
            </summary>
            <param name="key"></param>
            <returns>缓存项值</returns>
        </member>
        <member name="T:ClassLib4Net.Cache.CacheManagerConfig">
            <summary>
            缓存配置
            </summary>
        </member>
        <member name="T:ClassLib4Net.Cache.ICacheManager">
            <summary>
            缓存管理器接口
            </summary>
        </member>
        <member name="M:ClassLib4Net.Cache.ICacheManager.Add(System.String,System.Object,System.Int32)">
            <summary>
            添加缓存项
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expireMin">过期时长（分钟）</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Cache.ICacheManager.Add(System.String,System.Object)">
            <summary>
            添加缓存项
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Cache.ICacheManager.Add(System.String,System.Object,System.TimeSpan)">
            <summary>
            添加缓存项
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="timeSpan">过期时长</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Cache.ICacheManager.Get(System.String)">
            <summary>
            获取缓存项值
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Cache.ICacheManager.Get``1(System.String)">
            <summary>
            获取缓存项值
            </summary>
            <typeparam name="T">缓存项类型</typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Cache.ICacheManager.Get(System.String[])">
            <summary>
            获取多个缓存项
            </summary>
            <param name="keys">缓存键列表</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Cache.ICacheManager.Remove(System.String)">
            <summary>
            删除缓存项
            </summary>
            <param name="key"></param>
            <returns>缓存项值</returns>
        </member>
        <member name="T:ClassLib4Net.Cache.MemcachedCacheManager">
            <summary>
            Memcached缓存管理
            </summary>
        </member>
        <member name="M:ClassLib4Net.Cache.MemcachedCacheManager.Add(System.String,System.Object,System.Int32)">
            <summary>
            添加缓存项
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expireMin">过期时长（分钟）</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Cache.MemcachedCacheManager.Add(System.String,System.Object,System.Double)">
            <summary>
            添加缓存项
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expireMin">过期时长（分钟）</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Cache.MemcachedCacheManager.Add(System.String,System.Object)">
            <summary>
            添加缓存项
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Cache.MemcachedCacheManager.Add(System.String,System.Object,System.TimeSpan)">
            <summary>
            添加缓存项
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="timeSpan">过期时长</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Cache.MemcachedCacheManager.Get(System.String)">
            <summary>
            获取缓存项值
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Cache.MemcachedCacheManager.Get``1(System.String)">
            <summary>
            获取缓存项值
            </summary>
            <typeparam name="T">缓存项类型</typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Cache.MemcachedCacheManager.Get(System.String[])">
            <summary>
            获取多个缓存项
            </summary>
            <param name="keys">缓存键列表</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Cache.MemcachedCacheManager.Remove(System.String)">
            <summary>
            删除缓存项
            </summary>
            <param name="key"></param>
            <returns>缓存项值</returns>
        </member>
        <member name="T:ClassLib4Net.Cache.Redis.RedisConnectionHelp">
            <summary>
            ConnectionMultiplexer对象管理帮助类
            </summary>
        </member>
        <member name="F:ClassLib4Net.Cache.Redis.RedisConnectionHelp.SysCustomKey">
            <summary>
            系统自定义Key前缀（默认取appSettings的key=redisKey的值）
            </summary>
        </member>
        <member name="F:ClassLib4Net.Cache.Redis.RedisConnectionHelp.RedisConnectionString">
            <summary>
            127.0.0.1:6379,connectTimeout=10000,allowadmin=true
            （默认取appSettings的key=RedisConnectionString的值）
            </summary>
        </member>
        <member name="P:ClassLib4Net.Cache.Redis.RedisConnectionHelp.Instance">
            <summary>
            单例获取
            </summary>
        </member>
        <member name="M:ClassLib4Net.Cache.Redis.RedisConnectionHelp.GetConnectionMultiplexer(System.String)">
            <summary>
            缓存获取
            </summary>
            <param name="connectionString"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Cache.Redis.RedisConnectionHelp.MuxerConfigurationChanged(System.Object,StackExchange.Redis.EndPointEventArgs)">
            <summary>
            配置更改时
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClassLib4Net.Cache.Redis.RedisConnectionHelp.MuxerErrorMessage(System.Object,StackExchange.Redis.RedisErrorEventArgs)">
            <summary>
            发生错误时
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClassLib4Net.Cache.Redis.RedisConnectionHelp.MuxerConnectionRestored(System.Object,StackExchange.Redis.ConnectionFailedEventArgs)">
            <summary>
            重新建立连接之前的错误
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClassLib4Net.Cache.Redis.RedisConnectionHelp.MuxerConnectionFailed(System.Object,StackExchange.Redis.ConnectionFailedEventArgs)">
            <summary>
            连接失败 ， 如果重新连接成功你将不会收到这个通知
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClassLib4Net.Cache.Redis.RedisConnectionHelp.MuxerHashSlotMoved(System.Object,StackExchange.Redis.HashSlotMovedEventArgs)">
            <summary>
            更改集群
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClassLib4Net.Cache.Redis.RedisConnectionHelp.MuxerInternalError(System.Object,StackExchange.Redis.InternalErrorEventArgs)">
            <summary>
            redis类库错误
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:ClassLib4Net.Cache.Redis.RedisHelper">
            <summary>
            Redis助手
            </summary>
        </member>
        <member name="F:ClassLib4Net.Cache.Redis.RedisHelper.CustomKey">
            <summary>
            自定义Key（会附加在默认Key后面）
            </summary>
        </member>
        <member name="M:ClassLib4Net.Cache.Redis.RedisHelper.StringSet(System.String,System.String,System.Nullable{System.TimeSpan})">
            <summary>
            保存单个key value
            </summary>
            <param name="key">Redis Key</param>
            <param name="value">保存的值</param>
            <param name="expiry">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Cache.Redis.RedisHelper.StringSet(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue}})">
            <summary>
            保存多个key value
            </summary>
            <param name="keyValues">键值对</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Cache.Redis.RedisHelper.StringSet``1(System.String,``0,System.Nullable{System.TimeSpan})">
            <summary>
            保存一个对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="obj"></param>
            <param name="expiry"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Cache.Redis.RedisHelper.StringGet(System.String)">
            <summary>
            获取单个key的值
            </summary>
            <param name="key">Redis Key</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Cache.Redis.RedisHelper.StringGet(System.Collections.Generic.List{System.String})">
            <summary>
            获取多个Key
            </summary>
            <param name="listKey">Redis Key集合</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Cache.Redis.RedisHelper.StringGet``1(System.String)">
            <summary>
            获取一个key的对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Cache.Redis.RedisHelper.StringIncrement(System.String,System.Double)">
            <summary>
            为数字增长val
            </summary>
            <param name="key"></param>
            <param name="val">可以为负</param>
            <returns>增长后的值</returns>
        </member>
        <member name="M:ClassLib4Net.Cache.Redis.RedisHelper.StringDecrement(System.String,System.Double)">
            <summary>
            为数字减少val
            </summary>
            <param name="key"></param>
            <param name="val">可以为负</param>
            <returns>减少后的值</returns>
        </member>
        <member name="M:ClassLib4Net.Cache.Redis.RedisHelper.StringSetAsync(System.String,System.String,System.Nullable{System.TimeSpan})">
            <summary>
            保存单个key value
            </summary>
            <param name="key">Redis Key</param>
            <param name="value">保存的值</param>
            <param name="expiry">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Cache.Redis.RedisHelper.StringSetAsync(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue}})">
            <summary>
            保存多个key value
            </summary>
            <param name="keyValues">键值对</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Cache.Redis.RedisHelper.StringSetAsync``1(System.String,``0,System.Nullable{System.TimeSpan})">
            <summary>
            保存一个对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="obj"></param>
            <param name="expiry"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Cache.Redis.RedisHelper.StringGetAsync(System.String)">
            <summary>
            获取单个key的值
            </summary>
            <param name="key">Redis Key</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Cache.Redis.RedisHelper.StringGetAsync(System.Collections.Generic.List{System.String})">
            <summary>
            获取多个Key
            </summary>
            <param name="listKey">Redis Key集合</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Cache.Redis.RedisHelper.StringGetAsync``1(System.String)">
            <summary>
            获取一个key的对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Cache.Redis.RedisHelper.StringIncrementAsync(System.String,System.Double)">
            <summary>
            为数字增长val
            </summary>
            <param name="key"></param>
            <param name="val">可以为负</param>
            <returns>增长后的值</returns>
        </member>
        <member name="M:ClassLib4Net.Cache.Redis.RedisHelper.StringDecrementAsync(System.String,System.Double)">
            <summary>
            为数字减少val
            </summary>
            <param name="key"></param>
            <param name="val">可以为负</param>
            <returns>减少后的值</returns>
        </member>
        <member name="M:ClassLib4Net.Cache.Redis.RedisHelper.ListRemove``1(System.String,``0)">
            <summary>
            移除指定ListId的内部List的值
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:ClassLib4Net.Cache.Redis.RedisHelper.ListRange``1(System.String)">
            <summary>
            获取指定key的List
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Cache.Redis.RedisHelper.ListRightPush``1(System.String,``0)">
            <summary>
            入队
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:ClassLib4Net.Cache.Redis.RedisHelper.ListRightPop``1(System.String)">
            <summary>
            出队
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Cache.Redis.RedisHelper.ListLeftPush``1(System.String,``0)">
            <summary>
            入栈
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:ClassLib4Net.Cache.Redis.RedisHelper.ListLeftPop``1(System.String)">
            <summary>
            出栈
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Cache.Redis.RedisHelper.ListLength(System.String)">
            <summary>
            获取集合中的数量
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Cache.Redis.RedisHelper.ListRemoveAsync``1(System.String,``0)">
            <summary>
            移除指定ListId的内部List的值
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:ClassLib4Net.Cache.Redis.RedisHelper.ListRangeAsync``1(System.String)">
            <summary>
            获取指定key的List
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Cache.Redis.RedisHelper.ListRightPushAsync``1(System.String,``0)">
            <summary>
            入队
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:ClassLib4Net.Cache.Redis.RedisHelper.ListRightPopAsync``1(System.String)">
            <summary>
            出队
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Cache.Redis.RedisHelper.ListLeftPushAsync``1(System.String,``0)">
            <summary>
            入栈
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:ClassLib4Net.Cache.Redis.RedisHelper.ListLeftPopAsync``1(System.String)">
            <summary>
            出栈
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Cache.Redis.RedisHelper.ListLengthAsync(System.String)">
            <summary>
            获取集合中的数量
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Cache.Redis.RedisHelper.HashExists(System.String,System.String)">
            <summary>
            判断某个数据是否已经被缓存
            </summary>
            <param name="key"></param>
            <param name="dataKey"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Cache.Redis.RedisHelper.HashSet``1(System.String,System.String,``0)">
            <summary>
            存储数据到hash表
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="dataKey"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Cache.Redis.RedisHelper.HashDelete(System.String,System.String)">
            <summary>
            移除hash中的某值
            </summary>
            <param name="key"></param>
            <param name="dataKey"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Cache.Redis.RedisHelper.HashDelete(System.String,System.Collections.Generic.List{StackExchange.Redis.RedisValue})">
            <summary>
            移除hash中的多个值
            </summary>
            <param name="key"></param>
            <param name="dataKeys"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Cache.Redis.RedisHelper.HashGet``1(System.String,System.String)">
            <summary>
            从hash表获取数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="dataKey"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Cache.Redis.RedisHelper.HashIncrement(System.String,System.String,System.Double)">
            <summary>
            为数字增长val
            </summary>
            <param name="key"></param>
            <param name="dataKey"></param>
            <param name="val">可以为负</param>
            <returns>增长后的值</returns>
        </member>
        <member name="M:ClassLib4Net.Cache.Redis.RedisHelper.HashDecrement(System.String,System.String,System.Double)">
            <summary>
            为数字减少val
            </summary>
            <param name="key"></param>
            <param name="dataKey"></param>
            <param name="val">可以为负</param>
            <returns>减少后的值</returns>
        </member>
        <member name="M:ClassLib4Net.Cache.Redis.RedisHelper.HashKeys``1(System.String)">
            <summary>
            获取hashkey所有Redis key
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Cache.Redis.RedisHelper.HashExistsAsync(System.String,System.String)">
            <summary>
            判断某个数据是否已经被缓存
            </summary>
            <param name="key"></param>
            <param name="dataKey"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Cache.Redis.RedisHelper.HashSetAsync``1(System.String,System.String,``0)">
            <summary>
            存储数据到hash表
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="dataKey"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Cache.Redis.RedisHelper.HashDeleteAsync(System.String,System.String)">
            <summary>
            移除hash中的某值
            </summary>
            <param name="key"></param>
            <param name="dataKey"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Cache.Redis.RedisHelper.HashDeleteAsync(System.String,System.Collections.Generic.List{StackExchange.Redis.RedisValue})">
            <summary>
            移除hash中的多个值
            </summary>
            <param name="key"></param>
            <param name="dataKeys"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Cache.Redis.RedisHelper.HashGeAsync``1(System.String,System.String)">
            <summary>
            从hash表获取数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="dataKey"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Cache.Redis.RedisHelper.HashIncrementAsync(System.String,System.String,System.Double)">
            <summary>
            为数字增长val
            </summary>
            <param name="key"></param>
            <param name="dataKey"></param>
            <param name="val">可以为负</param>
            <returns>增长后的值</returns>
        </member>
        <member name="M:ClassLib4Net.Cache.Redis.RedisHelper.HashDecrementAsync(System.String,System.String,System.Double)">
            <summary>
            为数字减少val
            </summary>
            <param name="key"></param>
            <param name="dataKey"></param>
            <param name="val">可以为负</param>
            <returns>减少后的值</returns>
        </member>
        <member name="M:ClassLib4Net.Cache.Redis.RedisHelper.HashKeysAsync``1(System.String)">
            <summary>
            获取hashkey所有Redis key
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Cache.Redis.RedisHelper.SortedSetAdd``1(System.String,``0,System.Double)">
            <summary>
            添加
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="score"></param>
        </member>
        <member name="M:ClassLib4Net.Cache.Redis.RedisHelper.SortedSetRemove``1(System.String,``0)">
            <summary>
            删除
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:ClassLib4Net.Cache.Redis.RedisHelper.SortedSetRangeByRank``1(System.String)">
            <summary>
            获取全部
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Cache.Redis.RedisHelper.SortedSetLength(System.String)">
            <summary>
            获取集合中的数量
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Cache.Redis.RedisHelper.SortedSetAddAsync``1(System.String,``0,System.Double)">
            <summary>
            添加
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="score"></param>
        </member>
        <member name="M:ClassLib4Net.Cache.Redis.RedisHelper.SortedSetRemoveAsync``1(System.String,``0)">
            <summary>
            删除
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:ClassLib4Net.Cache.Redis.RedisHelper.SortedSetRangeByRankAsync``1(System.String)">
            <summary>
            获取全部
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Cache.Redis.RedisHelper.SortedSetLengthAsync(System.String)">
            <summary>
            获取集合中的数量
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Cache.Redis.RedisHelper.KeyDelete(System.String)">
            <summary>
            删除单个key
            </summary>
            <param name="key">redis key</param>
            <returns>是否删除成功</returns>
        </member>
        <member name="M:ClassLib4Net.Cache.Redis.RedisHelper.KeyDelete(System.Collections.Generic.List{System.String})">
            <summary>
            删除多个key
            </summary>
            <param name="keys">rediskey</param>
            <returns>成功删除的个数</returns>
        </member>
        <member name="M:ClassLib4Net.Cache.Redis.RedisHelper.KeyExists(System.String)">
            <summary>
            判断key是否存储
            </summary>
            <param name="key">redis key</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Cache.Redis.RedisHelper.KeyRename(System.String,System.String)">
            <summary>
            重新命名key
            </summary>
            <param name="key">就的redis key</param>
            <param name="newKey">新的redis key</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Cache.Redis.RedisHelper.KeyExpire(System.String,System.Nullable{System.TimeSpan})">
            <summary>
            设置Key的时间
            </summary>
            <param name="key">redis key</param>
            <param name="expiry"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Cache.Redis.RedisHelper.Subscribe(System.String,System.Action{StackExchange.Redis.RedisChannel,StackExchange.Redis.RedisValue})">
            <summary>
            Redis发布订阅 订阅
            </summary>
            <param name="subChannel"></param>
            <param name="handler"></param>
        </member>
        <member name="M:ClassLib4Net.Cache.Redis.RedisHelper.Publish``1(System.String,``0)">
            <summary>
            Redis发布订阅 发布
            </summary>
            <typeparam name="T"></typeparam>
            <param name="channel"></param>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Cache.Redis.RedisHelper.Unsubscribe(System.String)">
            <summary>
            Redis发布订阅 取消订阅
            </summary>
            <param name="channel"></param>
        </member>
        <member name="M:ClassLib4Net.Cache.Redis.RedisHelper.UnsubscribeAll">
            <summary>
            Redis发布订阅 取消全部订阅
            </summary>
        </member>
        <member name="M:ClassLib4Net.Cache.Redis.RedisHelper.SetSysCustomKey(System.String)">
            <summary>
            设置前缀
            </summary>
            <param name="customKey"></param>
        </member>
        <member name="T:ClassLib4Net.ChineseCalendarException">
            <summary>
            中国日历异常处理
            </summary>
        </member>
        <member name="M:ClassLib4Net.ChineseCalendarException.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="msg"></param>
        </member>
        <member name="T:ClassLib4Net.ChineseCalendar">
            <summary>
            中国农历类 版本V1.0 支持 1900.1.31日起至 2049.12.31日止的数据
            </summary>
            <remarks>
            本程序使用数据来源于网上的万年历查询，并综合了一些其它数据
            </remarks>
        </member>
        <member name="F:ClassLib4Net.ChineseCalendar.LunarDateArray">
             <summary>
             来源于网上的农历数据
             </summary>
             <remarks>
             数据结构如下，共使用17位数据
             第17位：表示闰月天数，0表示29天   1表示30天
             第16位-第5位（共12位）表示12个月，其中第16位表示第一月，如果该月为30天则为1，29天为0
             第4位-第1位（共4位）表示闰月是哪个月，如果当年没有闰月，则置0
            </remarks>
        </member>
        <member name="M:ClassLib4Net.ChineseCalendar.#ctor(System.DateTime)">
            <summary>
            用一个标准的公历日期来初使化
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:ClassLib4Net.ChineseCalendar.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            用农历的日期来初使化
            </summary>
            <param name="cy">农历年</param>
            <param name="cm">农历月</param>
            <param name="cd">农历日</param>
            <param name="LeapFlag">闰月标志</param>
        </member>
        <member name="M:ClassLib4Net.ChineseCalendar.GetChineseYearDays(System.Int32)">
            <summary>
            取农历年一年的天数
            </summary>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.ChineseCalendar.GetChineseHour(System.DateTime)">
            <summary>
            获得当前时间的时辰
            </summary>
            <param name="time"></param>
            <returns></returns>
            
        </member>
        <member name="M:ClassLib4Net.ChineseCalendar.CheckDateLimit(System.DateTime)">
            <summary>
            检查公历日期是否符合要求
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:ClassLib4Net.ChineseCalendar.CheckChineseDateLimit(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            检查农历日期是否合理
            </summary>
            <param name="year"></param>
            <param name="month"></param>
            <param name="day"></param>
            <param name="leapMonth"></param>
        </member>
        <member name="M:ClassLib4Net.ChineseCalendar.ConvertNumToChineseNum(System.Char)">
            <summary>
            将0-9转成汉字形式
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.ChineseCalendar.BitTest32(System.Int32,System.Int32)">
            <summary>
            测试某位是否为真
            </summary>
            <param name="num"></param>
            <param name="bitpostion"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.ChineseCalendar.ConvertDayOfWeek(System.DayOfWeek)">
            <summary>
            将星期几转成数字表示
            </summary>
            <param name="dayOfWeek"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.ChineseCalendar.CompareWeekDayHoliday(System.DateTime,System.Int32,System.Int32,System.Int32)">
            <summary>
            比较当天是不是指定的第周几
            </summary>
            <param name="date"></param>
            <param name="month"></param>
            <param name="week"></param>
            <param name="day"></param>
            <returns></returns>
        </member>
        <member name="P:ClassLib4Net.ChineseCalendar.ChineseCalendarHoliday">
            <summary>
            计算中国农历节日
            </summary>
        </member>
        <member name="P:ClassLib4Net.ChineseCalendar.WeekDayHoliday">
            <summary>
            按某月第几周第几日计算的节日
            </summary>
        </member>
        <member name="P:ClassLib4Net.ChineseCalendar.DateHoliday">
            <summary>
            按公历日计算的节日
            </summary>
        </member>
        <member name="P:ClassLib4Net.ChineseCalendar.Date">
            <summary>
            取对应的公历日期
            </summary>
        </member>
        <member name="P:ClassLib4Net.ChineseCalendar.WeekDay">
            <summary>
            取星期几
            </summary>
        </member>
        <member name="P:ClassLib4Net.ChineseCalendar.WeekDayStr">
            <summary>
            周几的字符
            </summary>
        </member>
        <member name="P:ClassLib4Net.ChineseCalendar.DateString">
            <summary>
            公历日期中文表示法 如一九九七年七月一日
            </summary>
        </member>
        <member name="P:ClassLib4Net.ChineseCalendar.IsLeapYear">
            <summary>
            当前是否公历闰年
            </summary>
        </member>
        <member name="P:ClassLib4Net.ChineseCalendar.ChineseConstellation">
            <summary>
            28星宿计算
            </summary>
        </member>
        <member name="P:ClassLib4Net.ChineseCalendar.ChineseHour">
            <summary>
            时辰
            </summary>
        </member>
        <member name="P:ClassLib4Net.ChineseCalendar.IsChineseLeapMonth">
            <summary>
            是否闰月
            </summary>
        </member>
        <member name="P:ClassLib4Net.ChineseCalendar.IsChineseLeapYear">
            <summary>
            当年是否有闰月
            </summary>
        </member>
        <member name="P:ClassLib4Net.ChineseCalendar.ChineseDay">
            <summary>
            农历日
            </summary>
        </member>
        <member name="P:ClassLib4Net.ChineseCalendar.ChineseDayString">
            <summary>
            农历日中文表示
            </summary>
        </member>
        <member name="P:ClassLib4Net.ChineseCalendar.ChineseMonth">
            <summary>
            农历的月份
            </summary>
        </member>
        <member name="P:ClassLib4Net.ChineseCalendar.ChineseMonthString">
            <summary>
            农历月份字符串
            </summary>
        </member>
        <member name="P:ClassLib4Net.ChineseCalendar.ChineseYear">
            <summary>
            取农历年份
            </summary>
        </member>
        <member name="P:ClassLib4Net.ChineseCalendar.ChineseYearString">
            <summary>
            取农历年字符串如，一九九七年
            </summary>
        </member>
        <member name="P:ClassLib4Net.ChineseCalendar.ChineseDateString">
            <summary>
            取农历日期表示法：农历一九九七年正月初五
            </summary>
        </member>
        <member name="P:ClassLib4Net.ChineseCalendar.ChineseTwentyFourDay">
            <summary>
            定气法计算二十四节气,二十四节气是按地球公转来计算的，并非是阴历计算的
            </summary>
            <remarks>
            节气的定法有两种。古代历法采用的称为"恒气"，即按时间把一年等分为24份，
            每一节气平均得15天有余，所以又称"平气"。现代农历采用的称为"定气"，即
            按地球在轨道上的位置为标准，一周360°，两节气之间相隔15°。由于冬至时地
            球位于近日点附近，运动速度较快，因而太阳在黄道上移动15°的时间不到15天。
            夏至前后的情况正好相反，太阳在黄道上移动较慢，一个节气达16天之多。采用
            定气时可以保证春、秋两分必然在昼夜平分的那两天。
            </remarks>
        </member>
        <member name="P:ClassLib4Net.ChineseCalendar.ChineseTwentyFourPrevDay">
            <summary>
            当前日期前一个最近节气
            </summary>
        </member>
        <member name="P:ClassLib4Net.ChineseCalendar.ChineseTwentyFourNextDay">
            <summary>
            当前日期后一个最近节气
            </summary>
        </member>
        <member name="P:ClassLib4Net.ChineseCalendar.Constellation">
            <summary>
            计算指定日期的星座序号 
            </summary>
            <returns></returns>
        </member>
        <member name="P:ClassLib4Net.ChineseCalendar.Animal">
            <summary>
            计算属相的索引，注意虽然属相是以农历年来区别的，但是目前在实际使用中是按公历来计算的
            鼠年为1,其它类推
            </summary>
        </member>
        <member name="P:ClassLib4Net.ChineseCalendar.AnimalString">
            <summary>
            取属相字符串
            </summary>
        </member>
        <member name="P:ClassLib4Net.ChineseCalendar.GanZhiYearString">
            <summary>
            取农历年的干支表示法如 乙丑年
            </summary>
        </member>
        <member name="P:ClassLib4Net.ChineseCalendar.GanZhiMonthString">
            <summary>
            取干支的月表示字符串，注意农历的闰月不记干支
            </summary>
        </member>
        <member name="P:ClassLib4Net.ChineseCalendar.GanZhiDayString">
            <summary>
            取干支日表示法
            </summary>
        </member>
        <member name="P:ClassLib4Net.ChineseCalendar.GanZhiDateString">
            <summary>
            取当前日期的干支表示法如 甲子年乙丑月丙庚日
            </summary>
        </member>
        <member name="M:ClassLib4Net.ChineseCalendar.NextDay">
            <summary>
            取下一天
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.ChineseCalendar.PervDay">
            <summary>
            取前一天
            </summary>
            <returns></returns>
        </member>
        <member name="T:ClassLib4Net.Chs2py">
            <summary>
            汉字与拼音处理方法
            </summary>
        </member>
        <member name="M:ClassLib4Net.Chs2py.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:ClassLib4Net.Chs2py.GetFirstPyChar(System.Char)">
            <summary>
            取单个汉字的拼音首字母
            </summary>
            <param name="c">单个汉字</param>
            <returns>第一个拼音字母</returns>
        </member>
        <member name="M:ClassLib4Net.Chs2py.GetFirstPyChar(System.String)">
            <summary>
            取单个汉字的拼音首字母
            </summary>
            <param name="strName">汉字字符串。如果输入多个汉字，只取第一个汉字的拼音首字母</param>
            <returns>第一个拼音字母</returns>
        </member>
        <member name="F:ClassLib4Net.Chs2py.sCodeData">
            <summary> 
            难检字码表． 
            </summary> 
        </member>
        <member name="M:ClassLib4Net.Chs2py.GetGB2312Code(System.String)">
            <summary>
            取汉字的Unicode编码
            </summary>
            <param name="s">汉字字符串。如果输入多个汉字，只对第一个汉字处理。</param>
            <returns>Unicode编码</returns>
        </member>
        <member name="M:ClassLib4Net.Chs2py.GetGB2312Code(System.Char)">
            <summary>
            取汉字的Unicode编码
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Chs2py.GetFullChs2Py(System.String)">
            <summary>
            取汉字字符串的拼音
            </summary>
            <param name="chineseString">汉字字符串</param>
            <returns>拼音</returns>
        </member>
        <member name="T:ClassLib4Net.GZip">
            <summary>
            压缩解压缩处理类
            </summary>
        </member>
        <member name="M:ClassLib4Net.GZip.Compress(System.String,System.String,System.String)">
            <summary>
            Compress
            </summary>
            <param name="lpSourceFolder">The location of the files to include in the zip file, all files including files in subfolders will be included.</param>
            <param name="lpDestFolder">Folder to write the zip file into</param>
            <param name="zipFileName">Name of the zip file to write</param>
        </member>
        <member name="M:ClassLib4Net.GZip.Compress(System.String,System.String,System.IO.SearchOption,System.String,System.String,System.Boolean)">
            <summary>
            Compress
            </summary>
            <param name="lpSourceFolder">The location of the files to include in the zip file</param>
            <param name="searchPattern">Search pattern (ie "*.*" or "*.txt" or "*.gif") to idendify what files in lpSourceFolder to include in the zip file</param>
            <param name="searchOption">Only files in lpSourceFolder or include files in subfolders also</param>
            <param name="lpDestFolder">Folder to write the zip file into</param>
            <param name="zipFileName">Name of the zip file to write</param>
            <param name="deleteTempFile">Boolean, true deleted the intermediate temp file, false leaves the temp file in lpDestFolder (for debugging)</param>
        </member>
        <member name="M:ClassLib4Net.GZip.Compress(System.IO.FileInfo[],System.String[],System.String,System.String,System.String)">
            <summary>
            Compress
            </summary>
            <param name="files">Array of FileInfo objects to be included in the zip file</param>
            <param name="folders">Array of Folder string</param>
            <param name="baseFolder">Base folder to use when creating relative paths for the files 
            stored in the zip file. For example, if lpBaseFolder is 'C:\zipTest\Files\', and there is a file 
            'C:\zipTest\Files\folder1\sample.txt' in the 'files' array, the relative path for sample.txt 
            will be 'folder1/sample.txt'</param>
            <param name="saveFolder">Folder to write the zip file into</param>
            <param name="zipFileName">Name of the zip file to write</param>
        </member>
        <member name="M:ClassLib4Net.GZip.Compress(System.IO.FileInfo[],System.String,System.String,System.String)">
            <summary>
            Compress
            </summary>
            <param name="files">Array of FileInfo objects to be included in the zip file</param>
            <param name="lpBaseFolder">Base folder to use when creating relative paths for the files 
            stored in the zip file. For example, if lpBaseFolder is 'C:\zipTest\Files\', and there is a file 
            'C:\zipTest\Files\folder1\sample.txt' in the 'files' array, the relative path for sample.txt 
            will be 'folder1/sample.txt'</param>
            <param name="lpDestFolder">Folder to write the zip file into</param>
            <param name="zipFileName">Name of the zip file to write</param>
        </member>
        <member name="M:ClassLib4Net.GZip.Compress(System.IO.FileInfo[],System.String,System.String,System.String,System.Boolean)">
            <summary>
            Compress
            </summary>
            <param name="files">Array of FileInfo objects to be included in the zip file</param>
            <param name="lpBaseFolder">Base folder to use when creating relative paths for the files 
            stored in the zip file. For example, if lpBaseFolder is 'C:\zipTest\Files\', and there is a file 
            'C:\zipTest\Files\folder1\sample.txt' in the 'files' array, the relative path for sample.txt 
            will be 'folder1/sample.txt'</param>
            <param name="lpDestFolder">Folder to write the zip file into</param>
            <param name="zipFileName">Name of the zip file to write</param>
            <param name="deleteTempFile">Boolean, true deleted the intermediate temp file, false leaves the temp file in lpDestFolder (for debugging)</param>
        </member>
        <member name="M:ClassLib4Net.GZip.Decompress(System.String,System.String,System.String)">
            <summary>
            解压
            </summary>
            <param name="lpSourceFolder"></param>
            <param name="lpDestFolder"></param>
            <param name="zipFileName"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.GZip.Decompress(System.String,System.String,System.String,System.Boolean,System.String)">
            <summary>
            解压
            </summary>
            <param name="lpSourceFolder"></param>
            <param name="lpDestFolder"></param>
            <param name="zipFileName"></param>
            <param name="writeFiles"></param>
            <param name="addExtension"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.GZip.Decompress(System.String,System.String,System.String,System.Boolean,System.Boolean,System.String,System.Collections.Hashtable,System.Int32)">
            <summary>
            解压
            </summary>
            <param name="lpSrcFolder"></param>
            <param name="lpDestFolder"></param>
            <param name="zipFileName"></param>
            <param name="deleteTempFile"></param>
            <param name="writeFiles"></param>
            <param name="addExtension"></param>
            <param name="htFiles"></param>
            <param name="bufferSize"></param>
            <returns></returns>
        </member>
        <member name="T:ClassLib4Net.GZipFileInfo">
            <summary>
            压缩解压缩文件信息类
            </summary>
        </member>
        <member name="T:ClassLib4Net.GZipResult">
             <summary>
            压缩解压缩结果类
             </summary>
        </member>
        <member name="T:ClassLib4Net.Computer">
             <summary>
            Computer 的摘要说明
             </summary>
        </member>
        <member name="F:ClassLib4Net.Computer.CpuID">
            <summary>
            CPU序列号代码
            </summary>
        </member>
        <member name="F:ClassLib4Net.Computer.MacAddress">
            <summary>
            网卡硬件地址（MacAddress）
            </summary>
        </member>
        <member name="F:ClassLib4Net.Computer.IpAddress">
            <summary>
            IP地址
            </summary>
        </member>
        <member name="F:ClassLib4Net.Computer.DiskID">
            <summary>
            硬盘ID
            </summary>
        </member>
        <member name="F:ClassLib4Net.Computer.LoginUserName">
            <summary>
            操作系统的登录用户名
            </summary>
        </member>
        <member name="F:ClassLib4Net.Computer.SystemType">
            <summary>
            电脑系统类型
            </summary>
        </member>
        <member name="F:ClassLib4Net.Computer.ComputerName">
            <summary>
            计算机名
            </summary>
        </member>
        <member name="F:ClassLib4Net.Computer.TotalPhysicalMemory">
            <summary>
            物理内存总量（单位：Byte）
            </summary>
        </member>
        <member name="M:ClassLib4Net.Computer.Instance">
            <summary>
            单例实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Computer.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:ClassLib4Net.Computer.GetCpuID">
            <summary>
            获取CPU序列号代码
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Computer.GetMacAddress">
            <summary>
            获取网卡硬件地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Computer.GetIPAddress">
            <summary>
            获取IP地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Computer.GetDiskID">
            <summary>
            获取硬盘ID
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Computer.GetUserName">
            <summary> 
            操作系统的登录用户名 
            </summary> 
            <returns></returns> 
        </member>
        <member name="M:ClassLib4Net.Computer.GetSystemType">
            <summary> 
            电脑系统类型 
            </summary> 
            <returns></returns> 
        </member>
        <member name="M:ClassLib4Net.Computer.GetComputerName">
            <summary> 
            ComputerName
            </summary> 
            <returns></returns> 
        </member>
        <member name="M:ClassLib4Net.Computer.GetTotalPhysicalMemory">
            <summary> 
            物理内存总量（单位：Byte） 
            </summary> 
            <returns></returns> 
        </member>
        <member name="T:ClassLib4Net.ConfigHelper">
            <summary>
            用于读取配置文件信息的类
            </summary>
        </member>
        <member name="M:ClassLib4Net.ConfigHelper.GetAppSetting(System.String)">
            <summary>
            读取配置信息的方法
            </summary>
            <param name="key">配置信息键</param>
            <returns>配置信息值</returns>
        </member>
        <member name="M:ClassLib4Net.ConfigHelper.GetAppSetting(System.String,System.Boolean)">
            <summary>
            读取配置信息的方法
            </summary>
            <param name="key">配置信息键</param>
            <param name="throwException">配置文件里没有该配置时是否抛出异常</param>
            <returns>配置信息值</returns>
        </member>
        <member name="M:ClassLib4Net.ConfigHelper.GetAppSettingInteger(System.String)">
            <summary>
            读取配置信息的方法
            </summary>
            <param name="key">配置信息键</param>
            <returns>Integer类型的配置信息值</returns>
        </member>
        <member name="M:ClassLib4Net.ConfigHelper.GetAppSettingInteger(System.String,System.Boolean)">
            <summary>
            读取配置信息的方法
            </summary>
            <param name="key">配置信息键</param>
            <param name="throwException">配置文件里没有该配置时是否抛出异常</param>
            <returns>Integer类型的配置信息值</returns>
        </member>
        <member name="M:ClassLib4Net.ConfigHelper.GetAppSettingBoolean(System.String)">
            <summary>
            读取配置信息的方法
            </summary>
            <param name="key">配置信息键</param>
            <returns>Boolean类型的配置信息值</returns>
        </member>
        <member name="M:ClassLib4Net.ConfigHelper.GetAppSettingBoolean(System.String,System.Boolean)">
            <summary>
            读取配置信息的方法
            </summary>
            <param name="key">配置信息键</param>
            <param name="throwException">配置文件里没有该配置时是否抛出异常</param>
            <returns>Boolean类型的配置信息值</returns>
        </member>
        <member name="M:ClassLib4Net.ConfigHelper.GetConnectionString(System.String)">
            <summary>
            读取连接字符串信息的方法
            </summary>
            <param name="key">连接字符串信息键</param>
            <returns>连接字符串信息值</returns>
        </member>
        <member name="M:ClassLib4Net.ConfigHelper.LoadConfig(System.String)">
            <summary>
            加载config
            </summary>
            <param name="configFilePath"></param>
        </member>
        <member name="T:ClassLib4Net.ConvertHelper">
            <summary>
            用于把对象型数据转成特定数据类型的类
            </summary>
        </member>
        <member name="M:ClassLib4Net.ConvertHelper.ToObject``1(System.Object,``0)">
            <summary>
            转成基本的类型（支持可空类型）
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="obj">可空的对象</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.ConvertHelper.GetString(System.Object)">
            <summary>
            将对象变量转成字符串变量的方法
            </summary>
            <param name="obj">对象变量</param>
            <returns>字符串变量</returns>
        </member>
        <member name="M:ClassLib4Net.ConvertHelper.GetInteger(System.Object)">
            <summary>
            将对象变量转成32位整数型变量的方法
            </summary>
            <param name="obj">对象变量</param>
            <returns>32位整数型变量</returns>
        </member>
        <member name="M:ClassLib4Net.ConvertHelper.GetShortInt(System.Object)">
            <summary>
            将对象变量转成短整型变量的方法
            </summary>
            <param name="obj">对象变量</param>
            <returns>短整型变量</returns>
        </member>
        <member name="M:ClassLib4Net.ConvertHelper.GetLong(System.Object)">
            <summary>
            将对象变量转成64位整数型变量的方法
            </summary>
            <param name="obj">对象变量</param>
            <returns>64位整数型变量</returns>
        </member>
        <member name="M:ClassLib4Net.ConvertHelper.GetDouble(System.Object)">
            <summary>
            将对象变量转成双精度浮点型变量的方法
            </summary>
            <param name="obj">对象变量</param>
            <returns>双精度浮点型变量</returns>
        </member>
        <member name="M:ClassLib4Net.ConvertHelper.GetDecimal(System.Object)">
            <summary>
            将对象变量转成十进制数字变量的方法
            </summary>
            <param name="obj">对象变量</param>
            <returns>十进制数字变量</returns>
        </member>
        <member name="M:ClassLib4Net.ConvertHelper.GetBoolean(System.Object)">
            <summary>
            将对象变量转成布尔型变量的方法
            </summary>
            <param name="obj">对象变量</param>
            <returns>布尔型变量</returns>
        </member>
        <member name="M:ClassLib4Net.ConvertHelper.GetDateTimeString(System.Object,System.String)">
            <summary>
            将对象变量转成日期时间型字符串变量的方法
            </summary>
            <param name="obj">对象变量</param>
            <param name="sFormat">时间字符串格式，例：yyyy-MM-dd</param>
            <returns>时间型字符串变量</returns>
        </member>
        <member name="M:ClassLib4Net.ConvertHelper.GetShortDateString(System.Object)">
            <summary>
            将对象变量转成日期字符串变量的方法
            </summary>
            <param name="obj">对象变量</param>
            <returns>日期字符串变量</returns>
        </member>
        <member name="M:ClassLib4Net.ConvertHelper.GetDateTime(System.Object)">
            <summary>
            将对象变量转成日期型变量的方法
            </summary>
            <param name="obj">对象变量</param>
            <returns>日期型变量</returns>
        </member>
        <member name="M:ClassLib4Net.ConvertHelper.ConvertCurrency(System.Double,System.Int32,System.Boolean,System.String)">
            <summary>
            将对象变量转成货币字符串的方法
            </summary>
            <param name="Currency">货币值</param>
            <param name="EndLength">默认格式化小数点后面保留两位小数</param>
            <param name="CurrencySymbol">是否有货币符号</param>
            <param name="Country">货币符号地区</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.ConvertHelper.ConvertStringToInteger(System.String)">
            <summary>
            将字符串转成32位整数型变量的方法
            </summary>
            <param name="s">字符串</param>
            <returns>32位整数型变量</returns>
        </member>
        <member name="M:ClassLib4Net.ConvertHelper.ConvertStringToShortInt(System.String)">
            <summary>
            将字符串转成短整型变量的方法
            </summary>
            <param name="s">字符串</param>
            <returns>短整型变量</returns>
        </member>
        <member name="M:ClassLib4Net.ConvertHelper.ConvertStringToLong(System.String)">
            <summary>
            将字符串转成64位整数型变量的方法
            </summary>
            <param name="s">字符串</param>
            <returns>64位整数型变量</returns>
        </member>
        <member name="M:ClassLib4Net.ConvertHelper.ConvertStringToDouble(System.String)">
            <summary>
            将字符串转成双精度浮点型变量的方法
            </summary>
            <param name="s">字符串</param>
            <returns>双精度浮点型变量</returns>
        </member>
        <member name="M:ClassLib4Net.ConvertHelper.ConvertStringToDecimal(System.String)">
            <summary>
            将字符串转成十进制数字变量的方法
            </summary>
            <param name="s">字符串</param>
            <returns>十进制数字变量</returns>
        </member>
        <member name="M:ClassLib4Net.ConvertHelper.ConvertDataTableToXml(System.Data.DataTable)">
            <summary>
            将DataTable转换成xml格式数据
            </summary>
            <param name="dt">数据源</param>
            <returns>xml结果集</returns>
        </member>
        <member name="M:ClassLib4Net.ConvertHelper.ConvertXmlToDataSet(System.String)">
            <summary>
            将xml字符串转换成DataSet
            </summary>
            <param name="xmlStr">xml字符串</param>
            <returns>转换后的DataSet</returns>
        </member>
        <member name="M:ClassLib4Net.ConvertHelper.ConvertXmlToDataTable(System.String,System.Int32)">
            <summary>
            xml转换datatable
            </summary>
            <param name="xmlStr">xml字符串</param>
            <param name="tableIndex">表格索引</param>
            <returns>转换后的DataTable</returns>
        </member>
        <member name="M:ClassLib4Net.ConvertHelper.ConvertXmlToDataTable(System.String)">
            <summary>
             xml转换datatable
            </summary>
            <param name="xmlStr">xml字符串</param>
            <returns>转换后的DataTable</returns>
        </member>
        <member name="M:ClassLib4Net.ConvertHelper.TimeStamp(System.Int32)">
            <summary>
            Unix时间戳转换为标准时间格式（基准时间为"1970-1-1 08:00:00"）
            </summary>
            <param name="TimeStamp">时间戳</param>
            <returns>标准时间格式</returns>
        </member>
        <member name="M:ClassLib4Net.ConvertHelper.TimeStamp(System.DateTime)">
            <summary>
            标准时间格式转换为Unix时间戳（基准时间为"1970-1-1 08:00:00"）
            </summary>
            <param name="time">标准时间格式</param>
            <returns>时间戳</returns>
        </member>
        <member name="M:ClassLib4Net.ConvertHelper.TimeStampToLocalTime(System.Double)">
            <summary>
            将Unix时间戳转换为DateTime类型时间，精确到毫秒（基准时间为"1970-1-1 00:00:00"转换成当前计算机的时区的时间）
            </summary>
            <param name="timestamp">double 型数字</param>
            <returns>DateTime</returns>
        </member>
        <member name="M:ClassLib4Net.ConvertHelper.TimeStampToLocalTime(System.DateTime)">
            <summary>
            DateTime时间格式转换为Unix时间戳格式，精确到毫秒（基准时间为"1970-1-1 00:00:00"转换成当前计算机的时区的时间）
            </summary>
            <param name="time">DateTime时间</param>
            <returns>时间戳</returns>
        </member>
        <member name="M:ClassLib4Net.ConvertHelper.TimeStampByKind(System.DateTime)">
            <summary>
            日期转换成unix时间戳（基准时间为"1970-1-1 00:00:00.000"，并通过target.Kind来控制基于本地时间、协调世界时间UTC，还是两者皆否）
            </summary>
            <param name="dateTime">时间对象</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.ConvertHelper.TimeStampByKind(System.DateTime,System.Int64)">
            <summary>
            unix时间戳转换成日期（基准时间为"1970-1-1 00:00:00.000"，并通过target.Kind来控制基于本地时间、协调世界时间UTC，还是两者皆否）
            </summary>
            <param name="target">参考DateTime对象（通过target.Kind来控制基于本地时间、协调世界时间UTC，还是两者皆否）</param>
            <param name="timestamp">时间戳（秒）</param>
            <returns></returns>
        </member>
        <member name="T:ClassLib4Net.CookieHelper">
            <summary>
            Cookie帮助类
            作者：熊学浩
            最后修改时间：2018/01/06
            </summary>
        </member>
        <member name="M:ClassLib4Net.CookieHelper.BuildCookie(System.String,System.Double,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            构建HttpCookie实例（未初始化Value或Values属性）
            </summary>
            <param name="Name">Cookie 的名称</param>
            <param name="Minutes">Cookie 的过期时间（分钟）。</param>
            <param name="Path">要与此 Cookie 一起传输的虚拟路径。 默认为 /，也就是服务器根目录。</param>
            <param name="Domain">设置将此 Cookie 与其关联的域。默认值为当前域。（例如.baidu.com，如果是当前域名则该参数不要设置）</param>
            <param name="HttpOnly">如果 Cookie 具有 HttpOnly 特性且不能通过客户端脚本访问，则为 true；否则为 false。 默认值为 false。</param>
            <param name="Secure">如果通过 SSL 连接 (HTTPS) 传输 Cookie，则为 true；否则为 false。 默认值为 false。</param>
            <param name="Shareable">确定 cookie 是否允许参与输出缓存。</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.CookieHelper.SetCookie(System.Web.HttpCookie)">
            <summary>
            设置或增加HttpCookie
            </summary>
            <param name="cookie">HttpCookie</param>
        </member>
        <member name="M:ClassLib4Net.CookieHelper.GetValue(System.String)">
            <summary>
            根据key获取value
            </summary>
            <param name="key">key</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.CookieHelper.GetValue(System.String,System.Func{System.String})">
            <summary>
            根据key获取value，未获取到值执行赋值函数
            </summary>
            <param name="key"></param>
            <param name="getValueFunc"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.CookieHelper.SetValue(System.String,System.Func{System.String})">
            <summary>
            设置键值对
            </summary>
            <param name="key"></param>
            <param name="getValueFunc"></param>
        </member>
        <member name="M:ClassLib4Net.CookieHelper.SetValue(System.String,System.Object)">
            <summary>
            设置键值对
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:ClassLib4Net.CookieHelper.Remove(System.String)">
            <summary>
            根据key移除项
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:ClassLib4Net.CookieHelper.GetCookie(System.String)">
            <summary>
            获取Cookie
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.CookieHelper.Get``1(System.String)">
            <summary>
            根据key获取Cookie模型
            </summary>
            <typeparam name="T">可序列化的对象类型</typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.CookieHelper.Set``1(``0,System.String,System.Double,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            设置Cookie
            </summary>
            <typeparam name="T">可序列化的对象类型</typeparam>
            <param name="obj">可序列化的对象实体</param>
            <param name="Name">Cookie 的名称</param>
            <param name="Minutes">Cookie 的过期时间（分钟）。</param>
            <param name="Path">要与此 Cookie 一起传输的虚拟路径。 默认为 /，也就是服务器根目录。</param>
            <param name="Domain">设置将此 Cookie 与其关联的域。默认值为当前域。（例如.baidu.com，如果是当前域名则该参数不要设置）</param>
            <param name="HttpOnly">如果 Cookie 具有 HttpOnly 特性且不能通过客户端脚本访问，则为 true；否则为 false。 默认值为 false。</param>
            <param name="Secure">如果通过 SSL 连接 (HTTPS) 传输 Cookie，则为 true；否则为 false。 默认值为 false。</param>
            <param name="Shareable">确定 cookie 是否允许参与输出缓存。</param>
        </member>
        <member name="M:ClassLib4Net.CookieHelper.CookieIsEnable">
            <summary>
            是否正常启用Cookie
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.CookieHelper.SetCookie(System.Object,System.String,System.Double,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            设置Cookie
            </summary>
            <param name="Value">可以ToString()的object实体</param>
            <param name="Name">Cookie 的名称</param>
            <param name="Minutes">Cookie 的过期时间（分钟）。</param>
            <param name="Path">要与此 Cookie 一起传输的虚拟路径。 默认为 /，也就是服务器根目录。</param>
            <param name="Domain">设置将此 Cookie 与其关联的域。默认值为当前域。（例如.baidu.com，如果是当前域名则该参数不要设置）</param>
            <param name="HttpOnly">如果 Cookie 具有 HttpOnly 特性且不能通过客户端脚本访问，则为 true；否则为 false。 默认值为 false。</param>
            <param name="Secure">如果通过 SSL 连接 (HTTPS) 传输 Cookie，则为 true；否则为 false。 默认值为 false。</param>
            <param name="Shareable">确定 cookie 是否允许参与输出缓存。</param>
        </member>
        <member name="M:ClassLib4Net.CookieHelper.SetCookie(System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Double,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            设置Cookie
            </summary>
            <param name="Value">Dictionary</param>
            <param name="Name">Cookie 的名称</param>
            <param name="Minutes">Cookie 的过期时间（分钟）。</param>
            <param name="Path">要与此 Cookie 一起传输的虚拟路径。 默认为 /，也就是服务器根目录。</param>
            <param name="Domain">设置将此 Cookie 与其关联的域。默认值为当前域。（例如.baidu.com，如果是当前域名则该参数不要设置）</param>
            <param name="HttpOnly">如果 Cookie 具有 HttpOnly 特性且不能通过客户端脚本访问，则为 true；否则为 false。 默认值为 false。</param>
            <param name="Secure">如果通过 SSL 连接 (HTTPS) 传输 Cookie，则为 true；否则为 false。 默认值为 false。</param>
            <param name="Shareable">确定 cookie 是否允许参与输出缓存。</param>
        </member>
        <member name="M:ClassLib4Net.CookieHelper.SetCookie(System.Collections.Hashtable,System.String,System.Double,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            设置Cookie
            </summary>
            <param name="Value">Dictionary</param>
            <param name="Name">Cookie 的名称</param>
            <param name="Minutes">Cookie 的过期时间（分钟）。</param>
            <param name="Path">要与此 Cookie 一起传输的虚拟路径。 默认为 /，也就是服务器根目录。</param>
            <param name="Domain">设置将此 Cookie 与其关联的域。默认值为当前域。（例如.baidu.com，如果是当前域名则该参数不要设置）</param>
            <param name="HttpOnly">如果 Cookie 具有 HttpOnly 特性且不能通过客户端脚本访问，则为 true；否则为 false。 默认值为 false。</param>
            <param name="Secure">如果通过 SSL 连接 (HTTPS) 传输 Cookie，则为 true；否则为 false。 默认值为 false。</param>
            <param name="Shareable">确定 cookie 是否允许参与输出缓存。</param>
        </member>
        <member name="M:ClassLib4Net.CookieHelper.GetAllCookies(System.Net.CookieContainer)">
            <summary>
            读取全部Cookie
            </summary>
            <param name="container">CookieContainer</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.CookieHelper.FillCookieContainer(System.Collections.Generic.IEnumerable{System.Net.Cookie},System.Net.CookieContainer@)">
            <summary>
            填充CookieContainer
            </summary>
            <param name="cookies">IEnumerable</param>
            <param name="cookieContainer">ref CookieContainer</param>
            <returns></returns>
        </member>
        <member name="T:ClassLib4Net.Data.DataObjectConverter">
            <summary>
            本类提供DataRow对象和普通对象之间的相互转换功能，
            </summary>
        </member>
        <member name="M:ClassLib4Net.Data.DataObjectConverter.FillDataRowToObject(System.Data.DataRow,System.Type)">
            <summary>
            把DataRow对象转换为普通持久化（业务）对象
            </summary>
            <param name="dataRow">DataRow对象</param>
            <param name="typeOfObject">目标持久化对象的类型</param>
            <returns>普通持久化（业务）对象</returns>
        </member>
        <member name="M:ClassLib4Net.Data.DataObjectConverter.FillObjectToDataRow(System.Object,System.Data.DataRow)">
            <summary>
            把普通持久化（业务）对象转换为DataRow对象
            </summary>
            <param name="srcObject">普通持久化（业务）对象</param>
            <param name="dataRow">DataRow对象</param>
        </member>
        <member name="T:ClassLib4Net.Data.MySqlHelper">
            <summary>
            MySqlHelper操作类
            </summary>
        </member>
        <member name="F:ClassLib4Net.Data.MySqlHelper.BatchSize">
            <summary>
            批量操作每批次记录数
            </summary>
        </member>
        <member name="F:ClassLib4Net.Data.MySqlHelper.CommandTimeOut">
            <summary>
            超时时间
            </summary>
        </member>
        <member name="M:ClassLib4Net.Data.MySqlHelper.#ctor(System.String)">
             <summary>
            初始化MySqlHelper实例
             </summary>
             <param name="connectionString">数据库连接字符串</param>
        </member>
        <member name="P:ClassLib4Net.Data.MySqlHelper.ConnectionString">
            <summary>
            数据库连接字符串
            </summary>
        </member>
        <member name="M:ClassLib4Net.Data.MySqlHelper.ExecuteNonQuery(System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回影响的行数
            </summary>
            <param name="commandText">SQL语句</param>
            <param name="parms">查询参数</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:ClassLib4Net.Data.MySqlHelper.ExecuteNonQuery(System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回影响的行数
            </summary>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:ClassLib4Net.Data.MySqlHelper.ExecuteScalar``1(System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回结果集中的第一行第一列
            </summary>
            <typeparam name="T">返回对象类型</typeparam>
            <param name="commandText">SQL语句</param>
            <param name="parms">查询参数</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:ClassLib4Net.Data.MySqlHelper.ExecuteScalar(System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回结果集中的第一行第一列
            </summary>
            <param name="commandText">SQL语句</param>
            <param name="parms">查询参数</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:ClassLib4Net.Data.MySqlHelper.ExecuteScalar(System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回结果集中的第一行第一列
            </summary>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:ClassLib4Net.Data.MySqlHelper.ExecuteDataReader(System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回只读数据集
            </summary>
            <param name="commandText">SQL语句</param>
            <param name="parms">查询参数</param>
            <returns>返回只读数据集</returns>
        </member>
        <member name="M:ClassLib4Net.Data.MySqlHelper.ExecuteDataReader(System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回只读数据集
            </summary>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>返回只读数据集</returns>
        </member>
        <member name="M:ClassLib4Net.Data.MySqlHelper.ExecuteDataRow(System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回结果集中的第一行
            </summary>
            <param name="commandText">SQL语句</param>
            <param name="parms">查询参数</param>
            <returns>返回结果集中的第一行</returns>
        </member>
        <member name="M:ClassLib4Net.Data.MySqlHelper.ExecuteDataRow(System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回结果集中的第一行
            </summary>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>返回结果集中的第一行</returns>
        </member>
        <member name="M:ClassLib4Net.Data.MySqlHelper.ExecuteDataTable(System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回结果集中的第一个数据表
            </summary>
            <param name="commandText">SQL语句</param>
            <param name="parms">查询参数</param>
            <returns>返回结果集中的第一个数据表</returns>
        </member>
        <member name="M:ClassLib4Net.Data.MySqlHelper.ExecuteDataTable(System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回结果集中的第一个数据表
            </summary>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>返回结果集中的第一个数据表</returns>
        </member>
        <member name="M:ClassLib4Net.Data.MySqlHelper.ExecuteDataSet(System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回结果集
            </summary>
            <param name="commandText">SQL语句</param>
            <param name="parms">查询参数</param>
            <returns>返回结果集</returns>
        </member>
        <member name="M:ClassLib4Net.Data.MySqlHelper.ExecuteDataSet(System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回结果集
            </summary>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>返回结果集</returns>
        </member>
        <member name="M:ClassLib4Net.Data.MySqlHelper.BatchUpdate(System.Data.DataTable)">
            <summary>
            使用MySqlDataAdapter批量更新数据
            </summary>
            <param name="table">数据表</param>
        </member>
        <member name="M:ClassLib4Net.Data.MySqlHelper.BulkInsert(System.Data.DataTable)">
             <summary>
            大批量数据插入,返回成功插入行数
             </summary>
             <param name="table">数据表</param>
             <returns>返回成功插入行数</returns>
        </member>
        <member name="M:ClassLib4Net.Data.MySqlHelper.ExecuteNonQuery(System.String,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回影响的行数
            </summary>
            <param name="connectionString">数据库连接字符串</param>
            <param name="commandText">SQL语句</param>
            <param name="parms">查询参数</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:ClassLib4Net.Data.MySqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回影响的行数
            </summary>
            <param name="connectionString">数据库连接字符串</param>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:ClassLib4Net.Data.MySqlHelper.ExecuteNonQuery(MySql.Data.MySqlClient.MySqlConnection,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回影响的行数
            </summary>
            <param name="connection">数据库连接</param>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:ClassLib4Net.Data.MySqlHelper.ExecuteNonQuery(MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回影响的行数
            </summary>
            <param name="transaction">事务</param>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:ClassLib4Net.Data.MySqlHelper.ExecuteNonQuery(MySql.Data.MySqlClient.MySqlConnection,MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回影响的行数
            </summary>
            <param name="connection">数据库连接</param>
            <param name="transaction">事务</param>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:ClassLib4Net.Data.MySqlHelper.ExecuteScalar``1(System.String,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回结果集中的第一行第一列
            </summary>
            <typeparam name="T">返回对象类型</typeparam>
            <param name="connectionString">数据库连接字符串</param>
            <param name="commandText">SQL语句</param>
            <param name="parms">查询参数</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:ClassLib4Net.Data.MySqlHelper.ExecuteScalar(System.String,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回结果集中的第一行第一列
            </summary>
            <param name="connectionString">数据库连接字符串</param>
            <param name="commandText">SQL语句</param>
            <param name="parms">查询参数</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:ClassLib4Net.Data.MySqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回结果集中的第一行第一列
            </summary>
            <param name="connectionString">数据库连接字符串</param>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:ClassLib4Net.Data.MySqlHelper.ExecuteScalar(MySql.Data.MySqlClient.MySqlConnection,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回结果集中的第一行第一列
            </summary>
            <param name="connection">数据库连接</param>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:ClassLib4Net.Data.MySqlHelper.ExecuteScalar(MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回结果集中的第一行第一列
            </summary>
            <param name="transaction">事务</param>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:ClassLib4Net.Data.MySqlHelper.ExecuteScalar(MySql.Data.MySqlClient.MySqlConnection,MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回结果集中的第一行第一列
            </summary>
            <param name="connection">数据库连接</param>
            <param name="transaction">事务</param>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:ClassLib4Net.Data.MySqlHelper.ExecuteDataReader(System.String,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回只读数据集
            </summary>
            <param name="connection">数据库连接</param>
            <param name="commandText">SQL语句</param>
            <param name="parms">查询参数</param>
            <returns>返回只读数据集</returns>
        </member>
        <member name="M:ClassLib4Net.Data.MySqlHelper.ExecuteDataReader(System.String,System.Data.CommandType,System.String)">
            <summary>
            执行SQL语句,返回只读数据集
            </summary>
            <param name="connection">数据库连接</param>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <returns>返回只读数据集</returns>
        </member>
        <member name="M:ClassLib4Net.Data.MySqlHelper.ExecuteDataReader(System.String,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回只读数据集
            </summary>
            <param name="connection">数据库连接</param>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>返回只读数据集</returns>
        </member>
        <member name="M:ClassLib4Net.Data.MySqlHelper.ExecuteDataReader(MySql.Data.MySqlClient.MySqlConnection,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回只读数据集
            </summary>
            <param name="connection">数据库连接</param>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>返回只读数据集</returns>
        </member>
        <member name="M:ClassLib4Net.Data.MySqlHelper.ExecuteDataReader(MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回只读数据集
            </summary>
            <param name="transaction">事务</param>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>返回只读数据集</returns>
        </member>
        <member name="M:ClassLib4Net.Data.MySqlHelper.ExecuteDataReader(MySql.Data.MySqlClient.MySqlConnection,MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回只读数据集
            </summary>
            <param name="connection">数据库连接</param>
            <param name="transaction">事务</param>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>返回只读数据集</returns>
        </member>
        <member name="M:ClassLib4Net.Data.MySqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回只读数据集
            </summary>
            <param name="connection">数据库连接</param>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>返回只读数据集</returns>
        </member>
        <member name="M:ClassLib4Net.Data.MySqlHelper.ExecuteReader(MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回只读数据集
            </summary>
            <param name="transaction">事务</param>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>返回只读数据集</returns>
        </member>
        <member name="M:ClassLib4Net.Data.MySqlHelper.ExecuteDataRow(System.String,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回结果集中的第一行
            </summary>
            <param name="connectionString">数据库连接字符串</param>
            <param name="commandText">SQL语句</param>
            <param name="parms">查询参数</param>
            <returns>,返回结果集中的第一行</returns>
        </member>
        <member name="M:ClassLib4Net.Data.MySqlHelper.ExecuteDataRow(System.String,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回结果集中的第一行
            </summary>
            <param name="connectionString">数据库连接字符串</param>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>,返回结果集中的第一行</returns>
        </member>
        <member name="M:ClassLib4Net.Data.MySqlHelper.ExecuteDataRow(MySql.Data.MySqlClient.MySqlConnection,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回结果集中的第一行
            </summary>
            <param name="connection">数据库连接</param>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>,返回结果集中的第一行</returns>
        </member>
        <member name="M:ClassLib4Net.Data.MySqlHelper.ExecuteDataRow(MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回结果集中的第一行
            </summary>
            <param name="transaction">事务</param>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>,返回结果集中的第一行</returns>
        </member>
        <member name="M:ClassLib4Net.Data.MySqlHelper.ExecuteDataTable(System.String,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回结果集中的第一个数据表
            </summary>
            <param name="connectionString">数据库连接字符串</param>
            <param name="commandText">SQL语句</param>
            <param name="parms">查询参数</param>
            <returns>返回结果集中的第一个数据表</returns>
        </member>
        <member name="M:ClassLib4Net.Data.MySqlHelper.ExecuteDataTable(System.String,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回结果集中的第一个数据表
            </summary>
            <param name="connectionString">数据库连接字符串</param>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>返回结果集中的第一个数据表</returns>
        </member>
        <member name="M:ClassLib4Net.Data.MySqlHelper.ExecuteDataTable(MySql.Data.MySqlClient.MySqlConnection,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回结果集中的第一个数据表
            </summary>
            <param name="connection">数据库连接</param>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>返回结果集中的第一个数据表</returns>
        </member>
        <member name="M:ClassLib4Net.Data.MySqlHelper.ExecuteDataTable(MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回结果集中的第一个数据表
            </summary>
            <param name="transaction">事务</param>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>返回结果集中的第一个数据表</returns>
        </member>
        <member name="M:ClassLib4Net.Data.MySqlHelper.ExecuteEmptyDataTable(System.String,System.String)">
            <summary>
            执行SQL语句,返回结果集中的第一个数据表
            </summary>
            <param name="connectionString">数据库连接字符串</param>
            <param name="tableName">数据表名称</param>
            <returns>返回结果集中的第一个数据表</returns>
        </member>
        <member name="M:ClassLib4Net.Data.MySqlHelper.ExecuteDataSet(System.String,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回结果集
            </summary>
            <param name="connectionString">数据库连接字符串</param>
            <param name="commandText">SQL语句</param>
            <param name="parms">查询参数</param>
            <returns>返回结果集</returns>
        </member>
        <member name="M:ClassLib4Net.Data.MySqlHelper.ExecuteDataSet(System.String,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回结果集
            </summary>
            <param name="connectionString">数据库连接字符串</param>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>返回结果集</returns>
        </member>
        <member name="M:ClassLib4Net.Data.MySqlHelper.ExecuteDataSet(MySql.Data.MySqlClient.MySqlConnection,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回结果集
            </summary>
            <param name="connection">数据库连接</param>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>返回结果集</returns>
        </member>
        <member name="M:ClassLib4Net.Data.MySqlHelper.ExecuteDataSet(MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回结果集
            </summary>
            <param name="transaction">事务</param>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>返回结果集</returns>
        </member>
        <member name="M:ClassLib4Net.Data.MySqlHelper.ExecuteDataSet(MySql.Data.MySqlClient.MySqlConnection,MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回结果集
            </summary>
            <param name="connection">数据库连接</param>
            <param name="transaction">事务</param>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>返回结果集</returns>
        </member>
        <member name="M:ClassLib4Net.Data.MySqlHelper.BatchUpdate(System.String,System.Data.DataTable)">
             <summary>
            使用MySqlDataAdapter批量更新数据
             </summary>
             <param name="connectionString">数据库连接字符串</param>
             <param name="table">数据表</param>
        </member>
        <member name="M:ClassLib4Net.Data.MySqlHelper.BulkInsert(System.String,System.Data.DataTable)">
             <summary>
            大批量数据插入,返回成功插入行数
             </summary>
             <param name="connectionString">数据库连接字符串</param>
             <param name="table">数据表</param>
             <returns>返回成功插入行数</returns>
        </member>
        <member name="M:ClassLib4Net.Data.MySqlHelper.DataTableToCsv(System.Data.DataTable)">
             <summary>
            将DataTable转换为标准的CSV
             </summary>
             <param name="table">数据表</param>
             <returns>返回标准的CSV</returns>
        </member>
        <member name="T:ClassLib4Net.Data.NpgsqlHelper">
            <summary>
            The NpgsqlHelper class is intended to encapsulate high performance, scalable best practices for 
            common uses of SqlClient
            </summary>
        </member>
        <member name="M:ClassLib4Net.Data.NpgsqlHelper.AttachParameters(Npgsql.NpgsqlCommand,Npgsql.NpgsqlParameter[])">
            <summary>
            This method is used to attach array of NpgsqlParameters to a NpgsqlCommand.
            
            This method will assign a value of DbNull to any parameter with a direction of
            InputOutput and a value of null.  
            
            This behavior will prevent default values from being used, but
            this will be the less common case than an intended pure output parameter (derived as InputOutput)
            where the user provided no input value.
            </summary>
            <param name="command">The command to which the parameters will be added</param>
            <param name="commandParameters">An array of NpgsqlParameters to be added to command</param>
        </member>
        <member name="M:ClassLib4Net.Data.NpgsqlHelper.AssignParameterValues(Npgsql.NpgsqlParameter[],System.Data.DataRow)">
            <summary>
            This method assigns dataRow column values to an array of NpgsqlParameters
            </summary>
            <param name="commandParameters">Array of NpgsqlParameters to be assigned values</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values</param>
        </member>
        <member name="M:ClassLib4Net.Data.NpgsqlHelper.AssignParameterValues(Npgsql.NpgsqlParameter[],System.Object[])">
            <summary>
            This method assigns an array of values to an array of NpgsqlParameters
            </summary>
            <param name="commandParameters">Array of NpgsqlParameters to be assigned values</param>
            <param name="parameterValues">Array of objects holding the values to be assigned</param>
        </member>
        <member name="M:ClassLib4Net.Data.NpgsqlHelper.PrepareCommand(Npgsql.NpgsqlCommand,Npgsql.NpgsqlConnection,Npgsql.NpgsqlTransaction,System.Data.CommandType,System.String,Npgsql.NpgsqlParameter[],System.Boolean@)">
            <summary>
            This method opens (if necessary) and assigns a connection, transaction, command type and parameters 
            to the provided command
            </summary>
            <param name="command">The NpgsqlCommand to be prepared</param>
            <param name="connection">A valid NpgsqlConnection, on which to execute this command</param>
            <param name="transaction">A valid NpgsqlTransaction, or 'null'</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of NpgsqlParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="mustCloseConnection"><c>true</c> if the connection was opened by the method, otherwose is false.</param>
        </member>
        <member name="M:ClassLib4Net.Data.NpgsqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a NpgsqlCommand (that returns no resultset and takes no parameters) against the database specified in 
            the connection string
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a NpgsqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.NpgsqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,Npgsql.NpgsqlParameter[])">
            <summary>
            Execute a NpgsqlCommand (that returns no resultset) against the database specified in the connection string 
            using the provided parameters
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new NpgsqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a NpgsqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of NpgsqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.NpgsqlHelper.ExecuteNonQuery(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a NpgsqlCommand (that returns no resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(connString, "PublishOrders", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a NpgsqlConnection</param>
            <param name="spName">The name of the stored prcedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.NpgsqlHelper.ExecuteNonQuery(Npgsql.NpgsqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a NpgsqlCommand (that returns no resultset and takes no parameters) against the provided NpgsqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connection">A valid NpgsqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.NpgsqlHelper.ExecuteNonQuery(Npgsql.NpgsqlConnection,System.Data.CommandType,System.String,Npgsql.NpgsqlParameter[])">
            <summary>
            Execute a NpgsqlCommand (that returns no resultset) against the specified NpgsqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders", new NpgsqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid NpgsqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of NpgsqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.NpgsqlHelper.ExecuteNonQuery(Npgsql.NpgsqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a NpgsqlCommand (that returns no resultset) against the specified NpgsqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(conn, "PublishOrders", 24, 36);
            </remarks>
            <param name="connection">A valid NpgsqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.NpgsqlHelper.ExecuteNonQuery(Npgsql.NpgsqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a NpgsqlCommand (that returns no resultset and takes no parameters) against the provided NpgsqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="transaction">A valid NpgsqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.NpgsqlHelper.ExecuteNonQuery(Npgsql.NpgsqlTransaction,System.Data.CommandType,System.String,Npgsql.NpgsqlParameter[])">
            <summary>
            Execute a NpgsqlCommand (that returns no resultset) against the specified NpgsqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "GetOrders", new NpgsqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid NpgsqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of NpgsqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.NpgsqlHelper.ExecuteNonQuery(Npgsql.NpgsqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a NpgsqlCommand (that returns no resultset) against the specified 
            NpgsqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(conn, trans, "PublishOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid NpgsqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.NpgsqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a NpgsqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a NpgsqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.NpgsqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String,Npgsql.NpgsqlParameter[])">
            <summary>
            Execute a NpgsqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders", new NpgsqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a NpgsqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of NpgsqlParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.NpgsqlHelper.ExecuteDataset(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a NpgsqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a NpgsqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.NpgsqlHelper.ExecuteDataset(Npgsql.NpgsqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a NpgsqlCommand (that returns a resultset and takes no parameters) against the provided NpgsqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid NpgsqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.NpgsqlHelper.ExecuteDataset(Npgsql.NpgsqlConnection,System.Data.CommandType,System.String,Npgsql.NpgsqlParameter[])">
            <summary>
            Execute a NpgsqlCommand (that returns a resultset) against the specified NpgsqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders", new NpgsqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid NpgsqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of NpgsqlParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.NpgsqlHelper.ExecuteDataset(Npgsql.NpgsqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a NpgsqlCommand (that returns a resultset) against the specified NpgsqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">A valid NpgsqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.NpgsqlHelper.ExecuteDataset(Npgsql.NpgsqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a NpgsqlCommand (that returns a resultset and takes no parameters) against the provided NpgsqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid NpgsqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.NpgsqlHelper.ExecuteDataset(Npgsql.NpgsqlTransaction,System.Data.CommandType,System.String,Npgsql.NpgsqlParameter[])">
            <summary>
            Execute a NpgsqlCommand (that returns a resultset) against the specified NpgsqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders", new NpgsqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid NpgsqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of NpgsqlParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.NpgsqlHelper.ExecuteDataset(Npgsql.NpgsqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a NpgsqlCommand (that returns a resultset) against the specified 
            NpgsqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid NpgsqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="T:ClassLib4Net.Data.NpgsqlHelper.NpgsqlConnectionOwnership">
            <summary>
            This enum is used to indicate whether the connection was provided by the caller, or created by NpgsqlHelper, so that
            we can set the appropriate CommandBehavior when calling ExecuteReader()
            </summary>
        </member>
        <member name="F:ClassLib4Net.Data.NpgsqlHelper.NpgsqlConnectionOwnership.Internal">
            <summary>Connection is owned and managed by NpgsqlHelper</summary>
        </member>
        <member name="F:ClassLib4Net.Data.NpgsqlHelper.NpgsqlConnectionOwnership.External">
            <summary>Connection is owned and managed by the caller</summary>
        </member>
        <member name="M:ClassLib4Net.Data.NpgsqlHelper.ExecuteReader(Npgsql.NpgsqlConnection,Npgsql.NpgsqlTransaction,System.Data.CommandType,System.String,Npgsql.NpgsqlParameter[],ClassLib4Net.Data.NpgsqlHelper.NpgsqlConnectionOwnership)">
            <summary>
            Create and prepare a NpgsqlCommand, and call ExecuteReader with the appropriate CommandBehavior.
            </summary>
            <remarks>
            If we created and opened the connection, we want the connection to be closed when the DataReader is closed.
            
            If the caller provided the connection, we want to leave it to them to manage.
            </remarks>
            <param name="connection">A valid NpgsqlConnection, on which to execute this command</param>
            <param name="transaction">A valid NpgsqlTransaction, or 'null'</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of NpgsqlParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="connectionOwnership">Indicates whether the connection parameter was provided by the caller, or created by NpgsqlHelper</param>
            <returns>NpgsqlDataReader containing the results of the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.NpgsqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a NpgsqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             NpgsqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a NpgsqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A NpgsqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.NpgsqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String,Npgsql.NpgsqlParameter[])">
            <summary>
            Execute a NpgsqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             NpgsqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders", new NpgsqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a NpgsqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of NpgsqlParamters used to execute the command</param>
            <returns>A NpgsqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.NpgsqlHelper.ExecuteReader(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a NpgsqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             NpgsqlDataReader dr = ExecuteReader(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a NpgsqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A NpgsqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.NpgsqlHelper.ExecuteReader(Npgsql.NpgsqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a NpgsqlCommand (that returns a resultset and takes no parameters) against the provided NpgsqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             NpgsqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid NpgsqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A NpgsqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.NpgsqlHelper.ExecuteReader(Npgsql.NpgsqlConnection,System.Data.CommandType,System.String,Npgsql.NpgsqlParameter[])">
            <summary>
            Execute a NpgsqlCommand (that returns a resultset) against the specified NpgsqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             NpgsqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders", new NpgsqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid NpgsqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of NpgsqlParamters used to execute the command</param>
            <returns>A NpgsqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.NpgsqlHelper.ExecuteReader(Npgsql.NpgsqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a NpgsqlCommand (that returns a resultset) against the specified NpgsqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             NpgsqlDataReader dr = ExecuteReader(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">A valid NpgsqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A NpgsqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.NpgsqlHelper.ExecuteReader(Npgsql.NpgsqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a NpgsqlCommand (that returns a resultset and takes no parameters) against the provided NpgsqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             NpgsqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid NpgsqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A NpgsqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.NpgsqlHelper.ExecuteReader(Npgsql.NpgsqlTransaction,System.Data.CommandType,System.String,Npgsql.NpgsqlParameter[])">
            <summary>
            Execute a NpgsqlCommand (that returns a resultset) against the specified NpgsqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
              NpgsqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders", new NpgsqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid NpgsqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of NpgsqlParamters used to execute the command</param>
            <returns>A NpgsqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.NpgsqlHelper.ExecuteReader(Npgsql.NpgsqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a NpgsqlCommand (that returns a resultset) against the specified
            NpgsqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             NpgsqlDataReader dr = ExecuteReader(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid NpgsqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A NpgsqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.NpgsqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a NpgsqlCommand (that returns a 1x1 resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connectionString">A valid connection string for a NpgsqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.NpgsqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String,Npgsql.NpgsqlParameter[])">
            <summary>
            Execute a NpgsqlCommand (that returns a 1x1 resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount", new NpgsqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a NpgsqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of NpgsqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.NpgsqlHelper.ExecuteScalar(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a NpgsqlCommand (that returns a 1x1 resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a NpgsqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.NpgsqlHelper.ExecuteScalar(Npgsql.NpgsqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a NpgsqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided NpgsqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connection">A valid NpgsqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.NpgsqlHelper.ExecuteScalar(Npgsql.NpgsqlConnection,System.Data.CommandType,System.String,Npgsql.NpgsqlParameter[])">
            <summary>
            Execute a NpgsqlCommand (that returns a 1x1 resultset) against the specified NpgsqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount", new NpgsqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid NpgsqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of NpgsqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.NpgsqlHelper.ExecuteScalar(Npgsql.NpgsqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a NpgsqlCommand (that returns a 1x1 resultset) against the specified NpgsqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connection">A valid NpgsqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.NpgsqlHelper.ExecuteScalar(Npgsql.NpgsqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a NpgsqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided NpgsqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="transaction">A valid NpgsqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.NpgsqlHelper.ExecuteScalar(Npgsql.NpgsqlTransaction,System.Data.CommandType,System.String,Npgsql.NpgsqlParameter[])">
            <summary>
            Execute a NpgsqlCommand (that returns a 1x1 resultset) against the specified NpgsqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount", new NpgsqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid NpgsqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of NpgsqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.NpgsqlHelper.ExecuteScalar(Npgsql.NpgsqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a NpgsqlCommand (that returns a 1x1 resultset) against the specified
            NpgsqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, "GetOrderCount", 24, 36);
            </remarks>
            <param name="transaction">A valid NpgsqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.NpgsqlHelper.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute a NpgsqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="connectionString">A valid connection string for a NpgsqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)</param>
        </member>
        <member name="M:ClassLib4Net.Data.NpgsqlHelper.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],Npgsql.NpgsqlParameter[])">
            <summary>
            Execute a NpgsqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new NpgsqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a NpgsqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of NpgsqlParamters used to execute the command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
        </member>
        <member name="M:ClassLib4Net.Data.NpgsqlHelper.FillDataset(System.String,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via a NpgsqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, 24);
            </remarks>
            <param name="connectionString">A valid connection string for a NpgsqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>    
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
        </member>
        <member name="M:ClassLib4Net.Data.NpgsqlHelper.FillDataset(Npgsql.NpgsqlConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute a NpgsqlCommand (that returns a resultset and takes no parameters) against the provided NpgsqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             FillDataset(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="connection">A valid NpgsqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>    
        </member>
        <member name="M:ClassLib4Net.Data.NpgsqlHelper.FillDataset(Npgsql.NpgsqlConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],Npgsql.NpgsqlParameter[])">
            <summary>
            Execute a NpgsqlCommand (that returns a resultset) against the specified NpgsqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new NpgsqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid NpgsqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of NpgsqlParamters used to execute the command</param>
        </member>
        <member name="M:ClassLib4Net.Data.NpgsqlHelper.FillDataset(Npgsql.NpgsqlConnection,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via a NpgsqlCommand (that returns a resultset) against the specified NpgsqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             FillDataset(conn, "GetOrders", ds, new string[] {"orders"}, 24, 36);
            </remarks>
            <param name="connection">A valid NpgsqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
        </member>
        <member name="M:ClassLib4Net.Data.NpgsqlHelper.FillDataset(Npgsql.NpgsqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute a NpgsqlCommand (that returns a resultset and takes no parameters) against the provided NpgsqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             FillDataset(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="transaction">A valid NpgsqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
        </member>
        <member name="M:ClassLib4Net.Data.NpgsqlHelper.FillDataset(Npgsql.NpgsqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],Npgsql.NpgsqlParameter[])">
            <summary>
            Execute a NpgsqlCommand (that returns a resultset) against the specified NpgsqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new NpgsqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid NpgsqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of NpgsqlParamters used to execute the command</param>
        </member>
        <member name="M:ClassLib4Net.Data.NpgsqlHelper.FillDataset(Npgsql.NpgsqlTransaction,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via a NpgsqlCommand (that returns a resultset) against the specified 
            NpgsqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             FillDataset(trans, "GetOrders", ds, new string[]{"orders"}, 24, 36);
            </remarks>
            <param name="transaction">A valid NpgsqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
        </member>
        <member name="M:ClassLib4Net.Data.NpgsqlHelper.FillDataset(Npgsql.NpgsqlConnection,Npgsql.NpgsqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],Npgsql.NpgsqlParameter[])">
            <summary>
            Private helper method that execute a NpgsqlCommand (that returns a resultset) against the specified NpgsqlTransaction and NpgsqlConnection
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(conn, trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new NpgsqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid NpgsqlConnection</param>
            <param name="transaction">A valid NpgsqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of NpgsqlParamters used to execute the command</param>
        </member>
        <member name="M:ClassLib4Net.Data.NpgsqlHelper.UpdateDataset(Npgsql.NpgsqlCommand,Npgsql.NpgsqlCommand,Npgsql.NpgsqlCommand,System.Data.DataSet,System.String)">
            <summary>
            Executes the respective command for each inserted, updated, or deleted row in the DataSet.
            </summary>
            <remarks>
            e.g.:  
             UpdateDataset(conn, insertCommand, deleteCommand, updateCommand, dataSet, "Order");
            </remarks>
            <param name="insertCommand">A valid transact-SQL statement or stored procedure to insert new records into the data source</param>
            <param name="deleteCommand">A valid transact-SQL statement or stored procedure to delete records from the data source</param>
            <param name="updateCommand">A valid transact-SQL statement or stored procedure used to update records in the data source</param>
            <param name="dataSet">The DataSet used to update the data source</param>
            <param name="tableName">The DataTable used to update the data source.</param>
        </member>
        <member name="M:ClassLib4Net.Data.NpgsqlHelper.CreateCommand(Npgsql.NpgsqlConnection,System.String,System.String[])">
            <summary>
            Simplify the creation of a Sql command object by allowing
            a stored procedure and optional parameters to be provided
            </summary>
            <remarks>
            e.g.:  
             NpgsqlCommand command = CreateCommand(conn, "AddCustomer", "CustomerID", "CustomerName");
            </remarks>
            <param name="connection">A valid NpgsqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="sourceColumns">An array of string to be assigned as the source columns of the stored procedure parameters</param>
            <returns>A valid NpgsqlCommand object</returns>
        </member>
        <member name="M:ClassLib4Net.Data.NpgsqlHelper.ExecuteNonQueryTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a NpgsqlCommand (that returns no resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connectionString">A valid connection string for a NpgsqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.NpgsqlHelper.ExecuteNonQueryTypedParams(Npgsql.NpgsqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a NpgsqlCommand (that returns no resultset) against the specified NpgsqlConnection 
            using the dataRow column values as the stored procedure's parameters values.  
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connection">A valid NpgsqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.NpgsqlHelper.ExecuteNonQueryTypedParams(Npgsql.NpgsqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a NpgsqlCommand (that returns no resultset) against the specified
            NpgsqlTransaction using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="transaction">A valid NpgsqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.NpgsqlHelper.ExecuteDatasetTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a NpgsqlCommand (that returns a resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connectionString">A valid connection string for a NpgsqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.NpgsqlHelper.ExecuteDatasetTypedParams(Npgsql.NpgsqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a NpgsqlCommand (that returns a resultset) against the specified NpgsqlConnection 
            using the dataRow column values as the store procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connection">A valid NpgsqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.NpgsqlHelper.ExecuteDatasetTypedParams(Npgsql.NpgsqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a NpgsqlCommand (that returns a resultset) against the specified NpgsqlTransaction 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="transaction">A valid NpgsqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.NpgsqlHelper.ExecuteReaderTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a NpgsqlCommand (that returns a resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connectionString">A valid connection string for a NpgsqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A NpgsqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.NpgsqlHelper.ExecuteReaderTypedParams(Npgsql.NpgsqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a NpgsqlCommand (that returns a resultset) against the specified NpgsqlConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connection">A valid NpgsqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A NpgsqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.NpgsqlHelper.ExecuteReaderTypedParams(Npgsql.NpgsqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a NpgsqlCommand (that returns a resultset) against the specified NpgsqlTransaction 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="transaction">A valid NpgsqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A NpgsqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.NpgsqlHelper.ExecuteScalarTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a NpgsqlCommand (that returns a 1x1 resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connectionString">A valid connection string for a NpgsqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.NpgsqlHelper.ExecuteScalarTypedParams(Npgsql.NpgsqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a NpgsqlCommand (that returns a 1x1 resultset) against the specified NpgsqlConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connection">A valid NpgsqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.NpgsqlHelper.ExecuteScalarTypedParams(Npgsql.NpgsqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a NpgsqlCommand (that returns a 1x1 resultset) against the specified NpgsqlTransaction
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="transaction">A valid NpgsqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.NpgsqlHelper.SecLike(System.String,System.Boolean,System.Boolean)">
            <summary>
            Execute a stored procedure via a NpgsqlCommand (that returns a resultset) against the specified NpgsqlTransaction 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="transaction">A valid NpgsqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="T:ClassLib4Net.Data.NpgsqlHelperParameterCache">
            <summary>
            NpgsqlHelperParameterCache provides functions to leverage a static cache of procedure parameters, and the
            ability to discover parameters for stored procedures at run-time.
            </summary>
        </member>
        <member name="M:ClassLib4Net.Data.NpgsqlHelperParameterCache.DiscoverSpParameterSet(Npgsql.NpgsqlConnection,System.String,System.Boolean)">
            <summary>
            Resolve at run time the appropriate set of NpgsqlParameters for a stored procedure
            </summary>
            <param name="connection">A valid NpgsqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">Whether or not to include their return value parameter</param>
            <returns>The parameter array discovered.</returns>
        </member>
        <member name="M:ClassLib4Net.Data.NpgsqlHelperParameterCache.CloneParameters(Npgsql.NpgsqlParameter[])">
            <summary>
            Deep copy of cached NpgsqlParameter array
            </summary>
            <param name="originalParameters"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Data.NpgsqlHelperParameterCache.CacheParameterSet(System.String,System.String,Npgsql.NpgsqlParameter[])">
            <summary>
            Add parameter array to the cache
            </summary>
            <param name="connectionString">A valid connection string for a NpgsqlConnection</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of NpgsqlParamters to be cached</param>
        </member>
        <member name="M:ClassLib4Net.Data.NpgsqlHelperParameterCache.GetCachedParameterSet(System.String,System.String)">
            <summary>
            Retrieve a parameter array from the cache
            </summary>
            <param name="connectionString">A valid connection string for a NpgsqlConnection</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An array of NpgsqlParamters</returns>
        </member>
        <member name="M:ClassLib4Net.Data.NpgsqlHelperParameterCache.GetSpParameterSet(System.String,System.String)">
            <summary>
            Retrieves the set of NpgsqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">A valid connection string for a NpgsqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <returns>An array of NpgsqlParameters</returns>
        </member>
        <member name="M:ClassLib4Net.Data.NpgsqlHelperParameterCache.GetSpParameterSet(System.String,System.String,System.Boolean)">
            <summary>
            Retrieves the set of NpgsqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">A valid connection string for a NpgsqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of NpgsqlParameters</returns>
        </member>
        <member name="M:ClassLib4Net.Data.NpgsqlHelperParameterCache.GetSpParameterSet(Npgsql.NpgsqlConnection,System.String)">
            <summary>
            Retrieves the set of NpgsqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connection">A valid NpgsqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <returns>An array of NpgsqlParameters</returns>
        </member>
        <member name="M:ClassLib4Net.Data.NpgsqlHelperParameterCache.GetSpParameterSet(Npgsql.NpgsqlConnection,System.String,System.Boolean)">
            <summary>
            Retrieves the set of NpgsqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connection">A valid NpgsqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of NpgsqlParameters</returns>
        </member>
        <member name="M:ClassLib4Net.Data.NpgsqlHelperParameterCache.GetSpParameterSetInternal(Npgsql.NpgsqlConnection,System.String,System.Boolean)">
            <summary>
            Retrieves the set of NpgsqlParameters appropriate for the stored procedure
            </summary>
            <param name="connection">A valid NpgsqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of NpgsqlParameters</returns>
        </member>
        <member name="T:ClassLib4Net.Data.OleDbHelper">
            <summary>
            为进行 OleDbServer 数据库访问而做的封装
            </summary>
        </member>
        <member name="M:ClassLib4Net.Data.OleDbHelper.AttachParameters(System.Data.OleDb.OleDbCommand,System.Data.OleDb.OleDbParameter[])">
            <summary>
            此方法用力将OleDbParameter数组挂接到OleDbcommand 
            
            This method will assign a value of DbNull to any parameter with a direction of
            InputOutput and a value of null.  
            
            This behavior will prevent default values from being used, but
            this will be the less common case than an intended pure output parameter (derived as InputOutput)
            where the user provided no input value.
            </summary>
            <param name="command">The command to which the parameters will be added</param>
            <param name="commandParameters">An array of OleDbParameters to be added to command</param>
        </member>
        <member name="M:ClassLib4Net.Data.OleDbHelper.AssignParameterValues(System.Data.OleDb.OleDbParameter[],System.Object[])">
            <summary>
            This method assigns an array of values to an array of OleDbParameters
            </summary>
            <param name="commandParameters">Array of OleDbParameters to be assigned values</param>
            <param name="parameterValues">Array of objects holding the values to be assigned</param>
        </member>
        <member name="M:ClassLib4Net.Data.OleDbHelper.PrepareCommand(System.Data.OleDb.OleDbCommand,System.Data.OleDb.OleDbConnection,System.Data.OleDb.OleDbTransaction,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[],System.Boolean@)">
            <summary>
            This method opens (if necessary) and assigns a connection, transaction, command type and parameters 
            to the provided command
            </summary>
            <param name="command">The OleDbCommand to be prepared</param>
            <param name="connection">A valid OleDbConnection, on which to execute this command</param>
            <param name="transaction">A valid OleDbTransaction, or 'null'</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-OleDb command</param>
            <param name="commandParameters">An array of OleDbParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="mustCloseConnection"><c>true</c> if the connection was opened by the method, otherwose is false.</param>
        </member>
        <member name="M:ClassLib4Net.Data.OleDbHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a OleDbCommand (that returns no resultset and takes no parameters) against the database specified in 
            the connection string
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a OleDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-OleDb command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.OleDbHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Execute a OleDbCommand (that returns no resultset) against the database specified in the connection string 
            using the provided parameters
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new OleDbParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a OleDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-OleDb command</param>
            <param name="commandParameters">An array of OleDbParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.OleDbHelper.ExecuteNonQuery(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a OleDbCommand (that returns no resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(connString, "PublishOrders", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a OleDbConnection</param>
            <param name="spName">The name of the stored prcedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.OleDbHelper.ExecuteNonQuery(System.Data.OleDb.OleDbConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a OleDbCommand (that returns no resultset and takes no parameters) against the provided OleDbConnection. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connection">A valid OleDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-OleDb command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.OleDbHelper.ExecuteNonQuery(System.Data.OleDb.OleDbConnection,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Execute a OleDbCommand (that returns no resultset) against the specified OleDbConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders", new OleDbParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid OleDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-OleDb command</param>
            <param name="commandParameters">An array of OleDbParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.OleDbHelper.ExecuteNonQuery(System.Data.OleDb.OleDbConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a OleDbCommand (that returns no resultset) against the specified OleDbConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(conn, "PublishOrders", 24, 36);
            </remarks>
            <param name="connection">A valid OleDbConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.OleDbHelper.ExecuteNonQuery(System.Data.OleDb.OleDbTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a OleDbCommand (that returns no resultset and takes no parameters) against the provided OleDbTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="transaction">A valid OleDbTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-OleDb command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.OleDbHelper.ExecuteNonQuery(System.Data.OleDb.OleDbTransaction,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Execute a OleDbCommand (that returns no resultset) against the specified OleDbTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "GetOrders", new OleDbParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid OleDbTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-OleDb command</param>
            <param name="commandParameters">An array of OleDbParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.OleDbHelper.ExecuteNonQuery(System.Data.OleDb.OleDbTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a OleDbCommand (that returns no resultset) against the specified 
            OleDbTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(conn, trans, "PublishOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid OleDbTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.OleDbHelper.ExecuteNonQueryReturnValue(System.String,System.Data.CommandType,System.String,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            执行一个 OleDb 命令，返回指定 Output 参数的值
            </summary>
            <param name="connectionString">a valid connection string for a OleDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-OleDb command</param>
            <param name="outParamName">返回参数的名称</param>
            <param name="commandParameters">an array of OleDbParamters used to execute the command</param>
            <returns>返回参数值</returns>
        </member>
        <member name="M:ClassLib4Net.Data.OleDbHelper.ExecuteNonQueryReturnValue(System.Data.OleDb.OleDbConnection,System.Data.CommandType,System.String,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            执行一个 OleDb 命令，返回指定 Output 参数的值
            </summary>
            <param name="connection">OleDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-OleDb command</param>
            <param name="outParamName">返回参数的名称</param>
            <param name="commandParameters">an array of OleDbParamters used to execute the command</param>
            <returns>返回参数值</returns>
        </member>
        <member name="M:ClassLib4Net.Data.OleDbHelper.ExecuteNonQueryReturnValue(System.String,System.String,System.String,System.Object[])">
            <summary>
            执行一个 存储过程 命令，返回指定 Output 参数的值
            </summary>
            <param name="connectionString">a valid connection string for a OleDbConnection</param>
            <param name="spName">the stored procedure name</param>
            <param name="outParamName">返回参数的名称</param>
            <param name="parameterValues">an array of OleDbParamters used to execute the command</param>
            <returns>返回参数值</returns>
        </member>
        <member name="M:ClassLib4Net.Data.OleDbHelper.ExecuteNonQueryReturnValue(System.Data.OleDb.OleDbConnection,System.String,System.String,System.Object[])">
            <summary>
            执行一个 存储过程 命令，返回指定 Output 参数的值
            </summary>
            <param name="connection">OleDbConnection</param>
            <param name="spName">the stored procedure name or T-OleDb command</param>
            <param name="outParamName">返回参数的名称</param>
            <param name="parameterValues">an array of OleDbParamters used to execute the command</param>
            <returns>返回参数值</returns>
        </member>
        <member name="M:ClassLib4Net.Data.OleDbHelper.ExecuteNonQueryReturnValue(System.Data.OleDb.OleDbTransaction,System.String,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            执行一个事务 存储过程 命令，返回指定 Output 参数的值
            </summary>
            <param name="transaction">事务</param>
            <param name="spName">the stored procedure name</param>
            <param name="outParamName">返回参数的名称</param>
            <param name="commandParameters">an array of OleDbParamters used to execute the command</param>
            <returns>返回参数</returns>
        </member>
        <member name="M:ClassLib4Net.Data.OleDbHelper.ExecuteNonQueryReturnArray(System.String,System.Data.CommandType,System.String,System.String[],System.Data.OleDb.OleDbParameter[])">
            <summary>
            执行一个 OleDb 命令，返回指定 Output 参数数组
            </summary>
            <param name="connectionString">数据库链接字符串</param>
            <param name="commandType">指定如何解释命令字符串。(stored procedure, text, etc.)</param>
            <param name="commandText">要对数据源执行的 Transact-OleDb 语句或存储过程</param>
            <param name="outParamNameList">返回参数的名称数组</param>
            <param name="commandParameters">an array of OleDbParamters used to execute the command</param>
            <returns>返回参数数组</returns>
        </member>
        <member name="M:ClassLib4Net.Data.OleDbHelper.ExecuteNonQueryReturnArray(System.Data.OleDb.OleDbConnection,System.Data.CommandType,System.String,System.String[],System.Data.OleDb.OleDbParameter[])">
            <summary>
            执行一个 OleDb 命令，返回指定 Output 参数数组
            </summary>
            <param name="connection">OleDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-OleDb command</param>
            <param name="outParamNameList">返回参数的名称数组</param>
            <param name="commandParameters">an array of OleDbParamters used to execute the command</param>
            <returns>返回object数组</returns>
        </member>
        <member name="M:ClassLib4Net.Data.OleDbHelper.ExecuteNonQueryReturnArray(System.String,System.String,System.String[],System.Object[])">
            <summary>
            执行一个 存储过程 命令，返回指定 Output 参数数组
            </summary>
            <param name="connectionString">a valid connection string for a OleDbConnection</param>
            <param name="spName">存储过程名</param>
            <param name="outParamNameList">返回参数的名称数组</param>
            <param name="parameterValues">an array of OleDbParamters used to execute the command</param>
            <returns>返回object数组</returns>
        </member>
        <member name="M:ClassLib4Net.Data.OleDbHelper.ExecuteNonQueryReturnArray(System.Data.OleDb.OleDbConnection,System.String,System.String[],System.Object[])">
            <summary>
            执行一个 存储过程 命令，返回指定 Output 参数数组
            </summary>
            <param name="connection">OleDbConnection</param>
            <param name="spName">存储过程名</param>
            <param name="outParamNameList">返回参数的名称数组</param>
            <param name="parameterValues">an array of OleDbParamters used to execute the command</param>
            <returns>返回object数组</returns>
        </member>
        <member name="M:ClassLib4Net.Data.OleDbHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a OleDbCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a OleDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-OleDb command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.OleDbHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Execute a OleDbCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders", new OleDbParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a OleDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-OleDb command</param>
            <param name="commandParameters">An array of OleDbParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.OleDbHelper.ExecuteDataset(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a OleDbCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a OleDbConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.OleDbHelper.ExecuteDataset(System.Data.OleDb.OleDbConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a OleDbCommand (that returns a resultset and takes no parameters) against the provided OleDbConnection. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid OleDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-OleDb command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.OleDbHelper.ExecuteDataset(System.Data.OleDb.OleDbConnection,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Execute a OleDbCommand (that returns a resultset) against the specified OleDbConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders", new OleDbParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid OleDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-OleDb command</param>
            <param name="commandParameters">An array of OleDbParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.OleDbHelper.ExecuteDataset(System.Data.OleDb.OleDbConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a OleDbCommand (that returns a resultset) against the specified OleDbConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">A valid OleDbConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.OleDbHelper.ExecuteDataset(System.Data.OleDb.OleDbTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a OleDbCommand (that returns a resultset and takes no parameters) against the provided OleDbTransaction. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid OleDbTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-OleDb command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.OleDbHelper.ExecuteDataset(System.Data.OleDb.OleDbTransaction,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Execute a OleDbCommand (that returns a resultset) against the specified OleDbTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders", new OleDbParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid OleDbTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-OleDb command</param>
            <param name="commandParameters">An array of OleDbParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.OleDbHelper.ExecuteDataset(System.Data.OleDb.OleDbTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a OleDbCommand (that returns a resultset) against the specified 
            OleDbTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid OleDbTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="T:ClassLib4Net.Data.OleDbHelper.OleDbConnectionOwnership">
            <summary>
            This enum is used to indicate whether the connection was provided by the caller, or created by OleDbHelper, so that
            we can set the appropriate CommandBehavior when calling ExecuteReader()
            </summary>
        </member>
        <member name="F:ClassLib4Net.Data.OleDbHelper.OleDbConnectionOwnership.Internal">
            <summary>Connection is owned and managed by OleDbHelper</summary>
        </member>
        <member name="F:ClassLib4Net.Data.OleDbHelper.OleDbConnectionOwnership.External">
            <summary>Connection is owned and managed by the caller</summary>
        </member>
        <member name="M:ClassLib4Net.Data.OleDbHelper.ExecuteReader(System.Data.OleDb.OleDbConnection,System.Data.OleDb.OleDbTransaction,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[],ClassLib4Net.Data.OleDbHelper.OleDbConnectionOwnership)">
            <summary>
            Create and prepare a OleDbCommand, and call ExecuteReader with the appropriate CommandBehavior.
            </summary>
            <remarks>
            If we created and opened the connection, we want the connection to be closed when the DataReader is closed.
            
            If the caller provided the connection, we want to leave it to them to manage.
            </remarks>
            <param name="connection">A valid OleDbConnection, on which to execute this command</param>
            <param name="transaction">A valid OleDbTransaction, or 'null'</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-OleDb command</param>
            <param name="commandParameters">An array of OleDbParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="connectionOwnership">Indicates whether the connection parameter was provided by the caller, or created by OleDbHelper</param>
            <returns>OleDbDataReader containing the results of the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.OleDbHelper.ExecuteReader(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a OleDbCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             OleDbDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a OleDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-OleDb command</param>
            <returns>A OleDbDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.OleDbHelper.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Execute a OleDbCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             OleDbDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders", new OleDbParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a OleDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-OleDb command</param>
            <param name="commandParameters">An array of OleDbParamters used to execute the command</param>
            <returns>A OleDbDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.OleDbHelper.ExecuteReader(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a OleDbCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             OleDbDataReader dr = ExecuteReader(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a OleDbConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A OleDbDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.OleDbHelper.ExecuteReader(System.Data.OleDb.OleDbConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a OleDbCommand (that returns a resultset and takes no parameters) against the provided OleDbConnection. 
            </summary>
            <remarks>
            e.g.:  
             OleDbDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid OleDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-OleDb command</param>
            <returns>A OleDbDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.OleDbHelper.ExecuteReader(System.Data.OleDb.OleDbConnection,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Execute a OleDbCommand (that returns a resultset) against the specified OleDbConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             OleDbDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders", new OleDbParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid OleDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-OleDb command</param>
            <param name="commandParameters">An array of OleDbParamters used to execute the command</param>
            <returns>A OleDbDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.OleDbHelper.ExecuteReader(System.Data.OleDb.OleDbConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a OleDbCommand (that returns a resultset) against the specified OleDbConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             OleDbDataReader dr = ExecuteReader(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">A valid OleDbConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A OleDbDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.OleDbHelper.ExecuteReader(System.Data.OleDb.OleDbTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a OleDbCommand (that returns a resultset and takes no parameters) against the provided OleDbTransaction. 
            </summary>
            <remarks>
            e.g.:  
             OleDbDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid OleDbTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-OleDb command</param>
            <returns>A OleDbDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.OleDbHelper.ExecuteReader(System.Data.OleDb.OleDbTransaction,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Execute a OleDbCommand (that returns a resultset) against the specified OleDbTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
              OleDbDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders", new OleDbParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid OleDbTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-OleDb command</param>
            <param name="commandParameters">An array of OleDbParamters used to execute the command</param>
            <returns>A OleDbDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.OleDbHelper.ExecuteReader(System.Data.OleDb.OleDbTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a OleDbCommand (that returns a resultset) against the specified
            OleDbTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             OleDbDataReader dr = ExecuteReader(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid OleDbTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A OleDbDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.OleDbHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a OleDbCommand (that returns a 1x1 resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connectionString">A valid connection string for a OleDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-OleDb command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.OleDbHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Execute a OleDbCommand (that returns a 1x1 resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount", new OleDbParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a OleDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-OleDb command</param>
            <param name="commandParameters">An array of OleDbParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.OleDbHelper.ExecuteScalar(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a OleDbCommand (that returns a 1x1 resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a OleDbConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.OleDbHelper.ExecuteScalar(System.Data.OleDb.OleDbConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a OleDbCommand (that returns a 1x1 resultset and takes no parameters) against the provided OleDbConnection. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connection">A valid OleDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-OleDb command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.OleDbHelper.ExecuteScalar(System.Data.OleDb.OleDbConnection,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Execute a OleDbCommand (that returns a 1x1 resultset) against the specified OleDbConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount", new OleDbParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid OleDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-OleDb command</param>
            <param name="commandParameters">An array of OleDbParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.OleDbHelper.ExecuteScalar(System.Data.OleDb.OleDbConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a OleDbCommand (that returns a 1x1 resultset) against the specified OleDbConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connection">A valid OleDbConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.OleDbHelper.ExecuteScalar(System.Data.OleDb.OleDbTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a OleDbCommand (that returns a 1x1 resultset and takes no parameters) against the provided OleDbTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="transaction">A valid OleDbTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-OleDb command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.OleDbHelper.ExecuteScalar(System.Data.OleDb.OleDbTransaction,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Execute a OleDbCommand (that returns a 1x1 resultset) against the specified OleDbTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount", new OleDbParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid OleDbTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-OleDb command</param>
            <param name="commandParameters">An array of OleDbParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.OleDbHelper.ExecuteScalar(System.Data.OleDb.OleDbTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a OleDbCommand (that returns a 1x1 resultset) against the specified
            OleDbTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, "GetOrderCount", 24, 36);
            </remarks>
            <param name="transaction">A valid OleDbTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="T:ClassLib4Net.Data.OleDbHelperParameterCache">
            <summary>
            OleDbHelperParameterCache provides functions to leverage a static cache of procedure parameters, 
            and the ability to discover parameters for stored procedures at run-time.
            </summary>
        </member>
        <member name="M:ClassLib4Net.Data.OleDbHelperParameterCache.DiscoverSpParameterSet(System.Data.OleDb.OleDbConnection,System.String,System.Boolean)">
            <summary>
            Resolve at run time the appropriate set of OleDbParameters for a stored procedure
            </summary>
            <param name="connection">A valid OleDbConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">Whether or not to include their return value parameter</param>
            <returns>The parameter array discovered.</returns>
        </member>
        <member name="M:ClassLib4Net.Data.OleDbHelperParameterCache.CloneParameters(System.Data.OleDb.OleDbParameter[])">
            <summary>
            Deep copy of cached OleDbParameter array
            </summary>
            <param name="originalParameters"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Data.OleDbHelperParameterCache.CacheParameterSet(System.String,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Add parameter array to the cache
            </summary>
            <param name="connectionString">A valid connection string for a OleDbConnection</param>
            <param name="commandText">The stored procedure name or T-OleDb command</param>
            <param name="commandParameters">An array of OleDbParamters to be cached</param>
        </member>
        <member name="M:ClassLib4Net.Data.OleDbHelperParameterCache.GetCachedParameterSet(System.String,System.String)">
            <summary>
            Retrieve a parameter array from the cache
            </summary>
            <param name="connectionString">A valid connection string for a OleDbConnection</param>
            <param name="commandText">The stored procedure name or T-OleDb command</param>
            <returns>An array of OleDbParamters</returns>
        </member>
        <member name="M:ClassLib4Net.Data.OleDbHelperParameterCache.GetSpParameterSet(System.String,System.String)">
            <summary>
            Retrieves the set of OleDbParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">A valid connection string for a OleDbConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <returns>An array of OleDbParameters</returns>
        </member>
        <member name="M:ClassLib4Net.Data.OleDbHelperParameterCache.GetSpParameterSet(System.String,System.String,System.Boolean)">
            <summary>
            Retrieves the set of OleDbParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">A valid connection string for a OleDbConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of OleDbParameters</returns>
        </member>
        <member name="M:ClassLib4Net.Data.OleDbHelperParameterCache.GetSpParameterSet(System.Data.OleDb.OleDbConnection,System.String)">
            <summary>
            Retrieves the set of OleDbParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connection">A valid OleDbConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <returns>An array of OleDbParameters</returns>
        </member>
        <member name="M:ClassLib4Net.Data.OleDbHelperParameterCache.GetSpParameterSet(System.Data.OleDb.OleDbConnection,System.String,System.Boolean)">
            <summary>
            Retrieves the set of OleDbParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connection">A valid OleDbConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of OleDbParameters</returns>
        </member>
        <member name="M:ClassLib4Net.Data.OleDbHelperParameterCache.GetSpParameterSetInternal(System.Data.OleDb.OleDbConnection,System.String,System.Boolean)">
            <summary>
            Retrieves the set of OleDbParameters appropriate for the stored procedure
            </summary>
            <param name="connection">A valid OleDbConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of OleDbParameters</returns>
        </member>
        <member name="T:ClassLib4Net.Data.ORM.DataMapperAttribute">
            <summary>
            简易数据映射属性
            </summary>
        </member>
        <member name="M:ClassLib4Net.Data.ORM.DataMapperAttribute.#ctor(System.String,System.Int64,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            简易数据映射属性构造函数
            </summary>
        </member>
        <member name="T:ClassLib4Net.Data.ORM.DataTableMapperAttribute">
            <summary>
            简易数据表映射属性
            </summary>
        </member>
        <member name="M:ClassLib4Net.Data.ORM.DataTableMapperAttribute.#ctor(ClassLib4Net.Data.ORM.LoadDataMode,System.String,System.Int64,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            简易数据表映射属性构造函数
            </summary>
        </member>
        <member name="T:ClassLib4Net.Data.ORM.DataColumnMapperAttribute">
            <summary>
            简易数据表字段映射属性
            </summary>
        </member>
        <member name="P:ClassLib4Net.Data.ORM.DataColumnMapperAttribute.IsPrimaryKey">
            <summary>
            是主键
            </summary>
        </member>
        <member name="P:ClassLib4Net.Data.ORM.DataColumnMapperAttribute.IsForeignKey">
            <summary>
            是外键
            </summary>
        </member>
        <member name="P:ClassLib4Net.Data.ORM.DataColumnMapperAttribute.IsIdentity">
            <summary>
            是ID标识(自增标识)
            </summary>
        </member>
        <member name="P:ClassLib4Net.Data.ORM.DataColumnMapperAttribute.CanNull">
            <summary>
            可空
            </summary>
        </member>
        <member name="P:ClassLib4Net.Data.ORM.DataColumnMapperAttribute.CanDefaultValue">
            <summary>
            可自动初始化(默认值)
            </summary>
        </member>
        <member name="M:ClassLib4Net.Data.ORM.DataColumnMapperAttribute.#ctor(System.Int64,System.Data.MappingType,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            简易数据表字段映射属性构造函数
            </summary>
        </member>
        <member name="T:ClassLib4Net.Data.ORM.DataTableMapperHelper`1">
            <summary>
            数据表映射助手
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:ClassLib4Net.Data.ORM.DataColumnMapperHelper`1">
            <summary>
            数据表字段映射助手
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:ClassLib4Net.Data.ORM.DataRowMapperHelper`1">
            <summary>
            DataRow映射助手
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:ClassLib4Net.Data.ORM.LoadDataMode">
            <summary>
            数据加载模式
            </summary>
        </member>
        <member name="F:ClassLib4Net.Data.ORM.LoadDataMode.Table">
            <summary>
            数据表
            </summary>
        </member>
        <member name="F:ClassLib4Net.Data.ORM.LoadDataMode.ComplexQuery">
            <summary>
            复杂查询
            </summary>
        </member>
        <member name="F:ClassLib4Net.Data.ORM.LoadDataMode.View">
            <summary>
            视图
            </summary>
        </member>
        <member name="F:ClassLib4Net.Data.ORM.LoadDataMode.StoredProcedure">
            <summary>
            存储过程返回结果
            </summary>
        </member>
        <member name="F:ClassLib4Net.Data.ORM.LoadDataMode.Enums">
            <summary>
            枚举
            </summary>
        </member>
        <member name="F:ClassLib4Net.Data.ORM.LoadDataMode.StaticData">
            <summary>
            静态数据
            </summary>
        </member>
        <member name="F:ClassLib4Net.Data.ORM.LoadDataMode.XmlDocument">
            <summary>
            静态数据
            </summary>
        </member>
        <member name="F:ClassLib4Net.Data.ORM.LoadDataMode.JsonObject">
            <summary>
            静态数据
            </summary>
        </member>
        <member name="F:ClassLib4Net.Data.ORM.LoadDataMode.Other">
            <summary>
            其它
            </summary>
        </member>
        <member name="T:ClassLib4Net.Data.ORM.ExecuteOperation">
            <summary>
            执行操作
            </summary>
        </member>
        <member name="F:ClassLib4Net.Data.ORM.ExecuteOperation.Insert">
            <summary>
            插入
            </summary>
        </member>
        <member name="F:ClassLib4Net.Data.ORM.ExecuteOperation.Delete">
            <summary>
            删除
            </summary>
        </member>
        <member name="F:ClassLib4Net.Data.ORM.ExecuteOperation.Select">
            <summary>
            查询
            </summary>
        </member>
        <member name="F:ClassLib4Net.Data.ORM.ExecuteOperation.Update">
            <summary>
            修改
            </summary>
        </member>
        <member name="T:ClassLib4Net.Data.ORM.WhereConj">
            <summary>
            多个条件之间的连接词
            </summary>
        </member>
        <member name="T:ClassLib4Net.Data.ORM.WhereOperator">
            <summary>
            对具体条件使用操作符
            </summary>
        </member>
        <member name="F:ClassLib4Net.Data.ORM.WhereOperator.GreaterThan">
            <summary>
            大于
            </summary>
        </member>
        <member name="F:ClassLib4Net.Data.ORM.WhereOperator.LessThan">
            <summary>
            小于
            </summary>
        </member>
        <member name="F:ClassLib4Net.Data.ORM.WhereOperator.GreaterOrEqual">
            <summary>
            大于或等于
            </summary>
        </member>
        <member name="F:ClassLib4Net.Data.ORM.WhereOperator.LessOrEqual">
            <summary>
            小于等于
            </summary>
        </member>
        <member name="T:ClassLib4Net.Data.ORM.MySql.MySqlTableMapperAttribute">
            <summary>
            MySql数据表映射属性
            </summary>
        </member>
        <member name="M:ClassLib4Net.Data.ORM.MySql.MySqlTableMapperAttribute.#ctor(ClassLib4Net.Data.ORM.LoadDataMode,System.String,System.Int64,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            MySql数据表映射属性构造函数
            </summary>
            <param name="LoadMode">数据加载模式</param>
            <param name="Name">名称</param>
            <param name="CanLoad">是否可装载</param>
            <param name="CanInsert">是否可插入</param>
            <param name="CanUpdate">是否可更新</param>
            <param name="CanDelete">是否可删除</param>
        </member>
        <member name="T:ClassLib4Net.Data.ORM.MySql.MySqlColumnMapperAttribute">
            <summary>
            MySql数据表字段映射属性
            </summary>
        </member>
        <member name="P:ClassLib4Net.Data.ORM.MySql.MySqlColumnMapperAttribute.DbType">
            <summary>
            字段类型
            </summary>
        </member>
        <member name="M:ClassLib4Net.Data.ORM.MySql.MySqlColumnMapperAttribute.#ctor(MySql.Data.MySqlClient.MySqlDbType,System.Int64,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Data.MappingType,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            MySql数据表字段映射属性构造函数
            </summary>
            <param name="DbType">对应数据库类型</param>
            <param name="Size">大小(容量)</param>
            <param name="CanNull">可空</param>
            <param name="IsPrimaryKey">是主键</param>
            <param name="IsForeignKey">是外键</param>
            <param name="IsIdentity">是ID标识(自增标识)</param>
            <param name="CanDefaultValue">可自动默认值</param>
            <param name="MappingType">映射类型</param>
            <param name="Name">名字</param>
            <param name="Describe">描述</param>
            <param name="CanLoad">可加载(SELECT)</param>
            <param name="CanInsert">可插入(INSERT)</param>
            <param name="CanUpdate">可修改(UPDATE)</param>
            <param name="CanDelete">可删除(DELETE)</param>
        </member>
        <member name="T:ClassLib4Net.Data.ORM.MySql.MySqlTableMapperHelper`1">
            <summary>
            MySql数据表映射助手
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ClassLib4Net.Data.ORM.MySql.MySqlTableMapperHelper`1.GetCustomAttributes(`0)">
            <summary>
            获取自定义属性集合
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Data.ORM.MySql.MySqlTableMapperHelper`1.GetCustomAttribute(`0)">
            <summary>
            获取下标索引为0的自定义属性
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="T:ClassLib4Net.Data.ORM.MySql.MySqlColumnMapperHelper`1">
            <summary>
            MySql数据表字段映射助手
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ClassLib4Net.Data.ORM.MySql.MySqlColumnMapperHelper`1.GetCustomAttributes(`0)">
            <summary>
            获取自定义属性集合
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Data.ORM.MySql.MySqlColumnMapperHelper`1.GetCustomAttribute(`0)">
            <summary>
            获取下标索引为0的自定义属性
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Data.ORM.MySql.MySqlColumnMapperHelper`1.GetCustomAttributes(System.Reflection.PropertyInfo)">
            <summary>
            获取自定义属性集合
            </summary>
            <param name="PropertyInfo"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Data.ORM.MySql.MySqlColumnMapperHelper`1.GetCustomAttribute(System.Reflection.PropertyInfo)">
            <summary>
            获取下标索引为0的自定义属性
            </summary>
            <param name="PropertyInfo"></param>
            <returns></returns>
        </member>
        <member name="T:ClassLib4Net.Data.ORM.MySql.MySqlMapperHelper`1">
            <summary>
            MySql数据库映射
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ClassLib4Net.Data.ORM.MySql.MySqlMapperHelper`1.IsExistingColumn(System.String,MySql.Data.MySqlClient.MySqlDataReader)">
            <summary>
            是现有的列
            </summary>
            <param name="columnName"></param>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Data.ORM.MySql.MySqlMapperHelper`1.DoLoad(`0,MySql.Data.MySqlClient.MySqlDataReader)">
            <summary>
            对象关系映射
            </summary>
            <param name="t">object</param>
            <param name="reader">使用前必须 reader.Read()</param>
        </member>
        <member name="M:ClassLib4Net.Data.ORM.MySql.MySqlMapperHelper`1.Load(MySql.Data.MySqlClient.MySqlDataReader)">
            <summary>
            从MySqlDataReader装载对象
            </summary>
            <param name="reader">使用前必须 reader.Read()</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Data.ORM.MySql.MySqlMapperHelper`1.LoadAll(MySql.Data.MySqlClient.MySqlDataReader)">
            <summary>
            从MySqlDataReader装载对象
            </summary>
            <param name="reader">data reader</param>
            <returns>object list</returns>
        </member>
        <member name="T:ClassLib4Net.Data.ORM.Npgsql.NpgsqlTableMapperAttribute">
            <summary>
            Npgsql数据表映射属性
            </summary>
        </member>
        <member name="M:ClassLib4Net.Data.ORM.Npgsql.NpgsqlTableMapperAttribute.#ctor(ClassLib4Net.Data.ORM.LoadDataMode,System.String,System.Int64,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Npgsql数据表映射属性构造函数
            </summary>
            <param name="LoadMode">数据加载模式</param>
            <param name="Name">名称</param>
            <param name="CanLoad">是否可装载</param>
            <param name="CanInsert">是否可插入</param>
            <param name="CanUpdate">是否可更新</param>
            <param name="CanDelete">是否可删除</param>
        </member>
        <member name="T:ClassLib4Net.Data.ORM.Npgsql.NpgsqlColumnMapperAttribute">
            <summary>
            Npgsql数据表字段映射属性
            </summary>
        </member>
        <member name="P:ClassLib4Net.Data.ORM.Npgsql.NpgsqlColumnMapperAttribute.DbType">
            <summary>
            字段类型
            </summary>
        </member>
        <member name="M:ClassLib4Net.Data.ORM.Npgsql.NpgsqlColumnMapperAttribute.#ctor(NpgsqlTypes.NpgsqlDbType,System.Int64,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Data.MappingType,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Npgsql数据表字段映射属性构造函数
            </summary>
            <param name="DbType">对应数据库类型</param>
            <param name="Size">大小(容量)</param>
            <param name="CanNull">可空</param>
            <param name="IsPrimaryKey">是主键</param>
            <param name="IsForeignKey">是外键</param>
            <param name="IsIdentity">是ID标识(自增标识)</param>
            <param name="CanDefaultValue">可自动默认值</param>
            <param name="MappingType">映射类型</param>
            <param name="Name">名字</param>
            <param name="Describe">描述</param>
            <param name="CanLoad">可加载(SELECT)</param>
            <param name="CanInsert">可插入(INSERT)</param>
            <param name="CanUpdate">可修改(UPDATE)</param>
            <param name="CanDelete">可删除(DELETE)</param>
        </member>
        <member name="T:ClassLib4Net.Data.ORM.Npgsql.NpgsqlTableMapperHelper`1">
            <summary>
            Npgsql数据表映射助手
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ClassLib4Net.Data.ORM.Npgsql.NpgsqlTableMapperHelper`1.GetCustomAttributes(`0)">
            <summary>
            获取自定义属性集合
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Data.ORM.Npgsql.NpgsqlTableMapperHelper`1.GetCustomAttribute(`0)">
            <summary>
            获取下标索引为0的自定义属性
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="T:ClassLib4Net.Data.ORM.Npgsql.NpgsqlColumnMapperHelper`1">
            <summary>
            Npgsql数据表字段映射助手
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ClassLib4Net.Data.ORM.Npgsql.NpgsqlColumnMapperHelper`1.GetCustomAttributes(`0)">
            <summary>
            获取自定义属性集合
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Data.ORM.Npgsql.NpgsqlColumnMapperHelper`1.GetCustomAttribute(`0)">
            <summary>
            获取下标索引为0的自定义属性
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Data.ORM.Npgsql.NpgsqlColumnMapperHelper`1.GetCustomAttributes(System.Reflection.PropertyInfo)">
            <summary>
            获取自定义属性集合
            </summary>
            <param name="PropertyInfo"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Data.ORM.Npgsql.NpgsqlColumnMapperHelper`1.GetCustomAttribute(System.Reflection.PropertyInfo)">
            <summary>
            获取下标索引为0的自定义属性
            </summary>
            <param name="PropertyInfo"></param>
            <returns></returns>
        </member>
        <member name="T:ClassLib4Net.Data.ORM.Npgsql.NpgsqlMapperHelper`1">
            <summary>
            Npgsql数据库映射
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ClassLib4Net.Data.ORM.Npgsql.NpgsqlMapperHelper`1.IsExistingColumn(System.String,Npgsql.NpgsqlDataReader)">
            <summary>
            是现有的列
            </summary>
            <param name="columnName"></param>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Data.ORM.Npgsql.NpgsqlMapperHelper`1.DoLoad(`0,Npgsql.NpgsqlDataReader)">
            <summary>
            对象关系映射
            </summary>
            <param name="t">object</param>
            <param name="reader">使用前必须 reader.Read()</param>
        </member>
        <member name="M:ClassLib4Net.Data.ORM.Npgsql.NpgsqlMapperHelper`1.Load(Npgsql.NpgsqlDataReader)">
            <summary>
            从NpgsqlDataReader装载对象
            </summary>
            <param name="reader">使用前必须 reader.Read()</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Data.ORM.Npgsql.NpgsqlMapperHelper`1.LoadAll(Npgsql.NpgsqlDataReader)">
            <summary>
            从NpgsqlDataReader装载对象
            </summary>
            <param name="reader">data reader</param>
            <returns>object list</returns>
        </member>
        <member name="T:ClassLib4Net.Data.ORM.SqlServer.SqlServerTableMapperAttribute">
            <summary>
            SqlServer数据表映射属性
            </summary>
        </member>
        <member name="M:ClassLib4Net.Data.ORM.SqlServer.SqlServerTableMapperAttribute.#ctor(ClassLib4Net.Data.ORM.LoadDataMode,System.String,System.Int64,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            SqlServer数据表映射属性构造函数
            </summary>
            <param name="LoadMode">数据加载模式</param>
            <param name="Name">名称</param>
            <param name="CanLoad">是否可装载</param>
            <param name="CanInsert">是否可插入</param>
            <param name="CanUpdate">是否可更新</param>
            <param name="CanDelete">是否可删除</param>
        </member>
        <member name="T:ClassLib4Net.Data.ORM.SqlServer.SqlServerColumnMapperAttribute">
            <summary>
            SqlServer数据表字段映射属性
            </summary>
        </member>
        <member name="P:ClassLib4Net.Data.ORM.SqlServer.SqlServerColumnMapperAttribute.DbType">
            <summary>
            字段类型
            </summary>
        </member>
        <member name="M:ClassLib4Net.Data.ORM.SqlServer.SqlServerColumnMapperAttribute.#ctor(System.Data.SqlDbType,System.Int64,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Data.MappingType,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            SqlServer数据表字段映射属性构造函数
            </summary>
            <param name="DbType">对应数据库类型</param>
            <param name="Size">大小(容量)</param>
            <param name="CanNull">可空</param>
            <param name="IsPrimaryKey">是主键</param>
            <param name="IsForeignKey">是外键</param>
            <param name="IsIdentity">是ID标识(自增标识)</param>
            <param name="CanDefaultValue">可自动默认值</param>
            <param name="MappingType">映射类型</param>
            <param name="Name">名字</param>
            <param name="Describe">描述</param>
            <param name="CanLoad">可加载(SELECT)</param>
            <param name="CanInsert">可插入(INSERT)</param>
            <param name="CanUpdate">可修改(UPDATE)</param>
            <param name="CanDelete">可删除(DELETE)</param>
        </member>
        <member name="T:ClassLib4Net.Data.ORM.SqlServer.SqlServerTableMapperHelper`1">
            <summary>
            SqlServer数据表映射助手
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ClassLib4Net.Data.ORM.SqlServer.SqlServerTableMapperHelper`1.GetCustomAttributes(`0)">
            <summary>
            获取自定义属性集合
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Data.ORM.SqlServer.SqlServerTableMapperHelper`1.GetCustomAttribute(`0)">
            <summary>
            获取下标索引为0的自定义属性
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="T:ClassLib4Net.Data.ORM.SqlServer.SqlServerColumnMapperHelper`1">
            <summary>
            SqlServer数据表字段映射助手
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ClassLib4Net.Data.ORM.SqlServer.SqlServerColumnMapperHelper`1.GetCustomAttributes(`0)">
            <summary>
            获取自定义属性集合
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Data.ORM.SqlServer.SqlServerColumnMapperHelper`1.GetCustomAttribute(`0)">
            <summary>
            获取下标索引为0的自定义属性
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Data.ORM.SqlServer.SqlServerColumnMapperHelper`1.GetCustomAttributes(System.Reflection.PropertyInfo)">
            <summary>
            获取自定义属性集合
            </summary>
            <param name="PropertyInfo"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Data.ORM.SqlServer.SqlServerColumnMapperHelper`1.GetCustomAttribute(System.Reflection.PropertyInfo)">
            <summary>
            获取下标索引为0的自定义属性
            </summary>
            <param name="PropertyInfo"></param>
            <returns></returns>
        </member>
        <member name="T:ClassLib4Net.Data.ORM.SqlServer.SqlServerMapperHelper`1">
            <summary>
            SqlServer数据库映射
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ClassLib4Net.Data.ORM.SqlServer.SqlServerMapperHelper`1.IsExistingColumn(System.String,System.Data.SqlClient.SqlDataReader)">
            <summary>
            是现有的列
            </summary>
            <param name="columnName"></param>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Data.ORM.SqlServer.SqlServerMapperHelper`1.DoLoad(`0,System.Data.SqlClient.SqlDataReader)">
            <summary>
            对象关系映射
            </summary>
            <param name="t">object</param>
            <param name="reader">使用前必须 reader.Read()</param>
        </member>
        <member name="M:ClassLib4Net.Data.ORM.SqlServer.SqlServerMapperHelper`1.Load(System.Data.SqlClient.SqlDataReader)">
            <summary>
            从SqlDataReader装载对象
            </summary>
            <param name="reader">使用前必须 reader.Read()</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Data.ORM.SqlServer.SqlServerMapperHelper`1.LoadAll(System.Data.SqlClient.SqlDataReader)">
            <summary>
            从SqlDataReader装载对象
            </summary>
            <param name="reader">data reader</param>
            <returns>object list</returns>
        </member>
        <member name="T:ClassLib4Net.Data.Paging.CommonPagingMethods">
            <summary>
            分页相关的公用方法
            </summary>
        </member>
        <member name="M:ClassLib4Net.Data.Paging.CommonPagingMethods.ComputePageCount(System.Int64,System.Int32)">
            <summary>
             取得分页页数数
            </summary>
            <param name="dataCount">数据总记录数</param>
            <param name="PageSize">每页显示记录数</param>
            <returns>页面总数</returns>
        </member>
        <member name="T:ClassLib4Net.Data.Paging.SqlDataAdapterPagingWrapper">
            <summary>
            封装了SqlDataAdapter中的Fill分页算法，对于小数据量的分页比较方便。
            但是大数据量的分页不推荐使用这个类。
            </summary>    
        </member>
        <member name="M:ClassLib4Net.Data.Paging.SqlDataAdapterPagingWrapper.GetDataSetByPage(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            获取分页数据
            </summary>
            <param name="sql">取数sql语句</param>
            <param name="pageIndex">起始的页面编号</param>
            <param name="pageSize">页面的记录数</param>
            <param name="connectionString">
            数据库连接对象，如果连接对象未打开，本方法将会打开，
            无论如何，本方法不会关闭连接，所以调用方应该显示关闭连接。
            </param>
            <returns>指定条件的分页数据</returns> 
        </member>
        <member name="M:ClassLib4Net.Data.Paging.SqlDataAdapterPagingWrapper.GetDataSetByPage(System.String,System.Int32,System.Int32,System.Data.SqlClient.SqlConnection)">
            <summary>
                获取分页数据
            </summary>
            <param name="sql">取数sql语句</param>
            <param name="pageIndex">0 起始的页面编号</param>
            <param name="pageSize">页面的记录数</param>
            <param name="conn">
                数据库连接对象，如果连接对象未打开，本方法将会打开，
                无论如何，本方法不会关闭连接，所以调用方应该显示关闭连接。
            </param>
            <returns>指定条件的分页数据</returns>
        </member>
        <member name="M:ClassLib4Net.Data.Paging.SqlDataAdapterPagingWrapper.GetDataCount(System.String,System.String,System.String,System.String)">
            <summary>
                获取分页数据的记录总数
            </summary>
            <param name="tableName">表名，可以是子查询</param>
            <param name="whereCondition">
                查询条件，可以是子查询，可以不带"where"前缀关键字。
            </param>
            <param name="groupBy">分组条件，可以不带"group by"关键字</param>
            <param name="connectionString">
                数据库连接字符串
            </param>
            <returns>分页数据的记录总数</returns>
        </member>
        <member name="M:ClassLib4Net.Data.Paging.SqlDataAdapterPagingWrapper.GetDataCount(System.String,System.String,System.String,System.Data.SqlClient.SqlConnection)">
            <summary>
                获取分页数据的记录总数
            </summary>
            <param name="tableName">表名，可以是子查询</param>
            <param name="whereCondition">
                查询条件，可以是子查询，不带"where"前缀关键字也可以。
            </param>
            <param name="groupBy">分组条件，可以不带"group by"关键字</param>
            <param name="conn">
                数据库连接对象，如果连接对象未打开，本方法将会打开，
                无论如何，本方法不会关闭连接，所以调用方应该显示关闭连接。
            </param>
            <returns>分页数据的记录总数</returns>
        </member>
        <member name="M:ClassLib4Net.Data.Paging.SqlDataAdapterPagingWrapper.GetDataCount(System.String,System.String)">
            <summary>
                获取记录总数
            </summary>
            <param name="sql">
                形如"select count(*) from tablename" 的Sql语句
            </param>
            <param name="connectionString">
                数据库连接字符串
            </param>
            <returns>记录总数</returns>
        </member>
        <member name="M:ClassLib4Net.Data.Paging.SqlDataAdapterPagingWrapper.GetDataCount(System.String,System.Data.SqlClient.SqlConnection)">
            <summary>
                获取记录总数
            </summary>
            <param name="sql">
                形如"select count(*) from tablename" 的Sql语句
            </param>
            <param name="conn">
                数据库连接对象，如果连接对象未打开，本方法将会打开，
                无论如何，本方法不会关闭连接，所以调用方应该显示关闭连接。
            </param>
            <returns>记录总数</returns>
        </member>
        <member name="T:ClassLib4Net.Data.SelectSqlBuilder">
            <summary>
            本类是一个工具类，功能是根据DataRow、DataTable对象生成Sql语句
            注意：只支持DataRow中属性类型如下：
            Boolean、Byte、Char、DateTime、Double、Int16、
            Int32、Int64、SByte、Single、String、TimeSpan、UInt16、UInt32、UInt64，
            只有这些类型的DataRow属性能作为条件生成Where子句，
            当DataRow数字类型属性为0时或DateTime类型的值为最小时间时，不会作为Where子句中的条件
            </summary>
        </member>
        <member name="M:ClassLib4Net.Data.SelectSqlBuilder.BuildSelectSql(System.Data.DataRow)">
            <summary>
            根据DataRow对象生成Select Sql语句
            </summary>
            <param name="row">DataRow对象</param>
            <returns>Select Sql语句</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SelectSqlBuilder.BuildSelectList(System.Data.DataTable)">
            <summary>
            生成Sql语句的Select List
            </summary>
            <param name="table">DataTable对象</param>
            <returns>Sql语句的Select List 字串</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SelectSqlBuilder.BuildSelectList(System.Data.DataTable,System.Boolean)">
            <summary>
            生成Sql语句的Select List，如果isChangeColumnName为true,
            则把表明作为Select List中字段别名的前缀，
            如table1.column1字段在Select List中的别名为：table1_column1
            </summary>
            <param name="table">DataTable对象</param>
            <param name="isChangeColumnName">是否把表名作为Select List中字段别名的前缀</param>
            <returns>Sql语句的Select List 字串</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SelectSqlBuilder.BuildWhere(System.Data.DataRow)">
            <summary>
            创建带参数的sql语句的where条件
            </summary>
            <param name="row">DataRow对象</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Data.SelectSqlBuilder.BuildParameter(System.Data.DataRow)">
            <summary>
            	创建Where条件用到的sql参数，
            </summary>
            <param name="row">参数条件的具体值从此DataRow中取</param>
            <returns></returns>
        </member>
        <member name="T:ClassLib4Net.Data.SingleDataTableQuery">
            <summary>
            本辅助类利用SelectSqlBuilder类实现单个表的数据读取，
            调用方只需指定一个DataRow对象和数据库连接字符串就可以。
            注意：只支持DataRow中属性类型如下：
            Boolean、Byte、Char、DateTime、Double、Int16、
            Int32、Int64、SByte、Single、String、TimeSpan、UInt16、UInt32、UInt64，
            只有这些类型的DataRow属性能作为条件生成Where子句，
            当DataRow数字类型属性为0时或DateTime类型的值为最小时间时，不会作为Where子句中的条件，
            当你的DataRow对象只有一个数字类型且值为零时，并不能查询出该属性（字段）等于0的记录，
            而是查询出所有的记录。
            </summary>
        </member>
        <member name="M:ClassLib4Net.Data.SingleDataTableQuery.GetDataSet(System.String,System.Data.DataRow)">
            <summary>
            从数据库中取得满足参数paramRow中各值"与/and"条件的DataSet
            </summary>
            <param name="connectionString">数据库连接字符串</param>
            <param name="paramRow">DataRow参数值</param>
            <returns>符合paramRow条件的DataSet</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SingleDataTableQuery.GetDataSet(System.Data.SqlClient.SqlConnection,System.Data.DataRow)">
            <summary>
            从数据库中取得满足参数paramRow中各值"与/and"条件的DataSet
            </summary>
            <param name="connection">数据库连接对象</param>
            <param name="paramRow">DataRow参数值</param>
            <returns>符合paramRow条件的DataSet</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SingleDataTableQuery.GetDataSet(System.String,System.Data.DataRow,System.String,System.Int32,System.Int32)">
            <summary>
            从数据库中取得满足参数paramRow中各值"与/and"条件的DataSet,
            并且以orderSql、startRecord和maxRecords作为分页条件
            </summary>
            <param name="connectionString">数据库连接字符串</param>
            <param name="paramRow">DataRow参数值</param>
            <param name="orderSql">排序Sql子句</param>
            <param name="startRecord">起始记录号，最小值为0</param>
            <param name="maxRecords">一次返回的最大记录数</param>
            <returns>符合paramRow条件的DataSet</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SingleDataTableQuery.GetDataSet(System.Data.SqlClient.SqlConnection,System.Data.DataRow,System.String,System.Int32,System.Int32)">
            <summary>
            从数据库中取得满足参数paramRow中各值"与/and"条件的DataSet,
            并且以orderSql、startRecord和maxRecords作为分页条件
            </summary>
            <param name="connection">数据库连接对象</param>
            <param name="paramRow">DataRow参数值</param>
            <param name="orderSql">排序Sql子句</param>
            <param name="startRecord">起始记录号，最小值为0</param>
            <param name="maxRecords">一次返回的最大记录数</param>
            <returns>符合paramRow条件的DataSet</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SingleDataTableQuery.FillDataSet(System.String,System.Data.DataRow,System.Data.DataSet)">
            <summary>
            所有FillDataSet与GetDataSet方法功能相同，只是由调用方传入DataSet，而不是新建DataSet
            </summary>
            <param name="connectionString"></param>
            <param name="paramRow"></param>
            <param name="dataSet"></param>
        </member>
        <member name="M:ClassLib4Net.Data.SingleDataTableQuery.FillDataSet(System.Data.SqlClient.SqlConnection,System.Data.DataRow,System.Data.DataSet)">
            <summary>
            
            </summary>
            <param name="connection"></param>
            <param name="paramRow"></param>
            <param name="dataSet"></param>
        </member>
        <member name="M:ClassLib4Net.Data.SingleDataTableQuery.FillDataSet(System.String,System.Data.DataRow,System.String,System.Int32,System.Int32,System.Data.DataSet)">
            <summary>
            
            </summary>
            <param name="connectionString"></param>
            <param name="paramRow"></param>
            <param name="orderSql"></param>
            <param name="startRecord"></param>
            <param name="maxRecords"></param>
            <param name="dataSet"></param>
        </member>
        <member name="M:ClassLib4Net.Data.SingleDataTableQuery.FillDataSet(System.Data.SqlClient.SqlConnection,System.Data.DataRow,System.String,System.Int32,System.Int32,System.Data.DataSet)">
            <summary>
            
            </summary>
            <param name="connection"></param>
            <param name="paramRow"></param>
            <param name="orderSql"></param>
            <param name="startRecord"></param>
            <param name="maxRecords"></param>
            <param name="dataSet"></param>
        </member>
        <member name="M:ClassLib4Net.Data.SingleDataTableQuery.FillDataTable(System.String,System.Data.DataRow,System.Data.DataTable)">
            <summary>
            所有FillDataSet与GetDataSet方法功能相同，
            只是由调用方传入DataTable，把数据填入此DataTable
            </summary>
            <param name="connectionString"></param>
            <param name="paramRow"></param>
            <param name="dataTable"></param>
        </member>
        <member name="M:ClassLib4Net.Data.SingleDataTableQuery.FillDataTable(System.Data.SqlClient.SqlConnection,System.Data.DataRow,System.Data.DataTable)">
            <summary>
            
            </summary>
            <param name="connection"></param>
            <param name="paramRow"></param>
            <param name="dataTable"></param>
        </member>
        <member name="T:ClassLib4Net.Data.SqlCommonHelper">
            <summary>
            SQL助手
            熊学浩
            2015-01-21
            </summary>
        </member>
        <member name="M:ClassLib4Net.Data.SqlCommonHelper.ExecuteSql(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行SQL语句，返回影响的记录数
            </summary>
            <param name="SQLString">SQL语句</param>
            <param name="connectionString">链接字符串</param>
            <param name="cmdParms">参数</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlCommonHelper.ExecuteSql(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行SQL语句，SQL事物，返回影响的记录数
            </summary>
            <param name="SQLString">SQL语句</param>
            <param name="connection">链接字符串</param>
            <param name="trans">SQL事物</param>
            <param name="cmdParms">参数</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlCommonHelper.ExecuteSqlTran(System.Collections.Hashtable,System.String)">
            <summary>
            执行多条SQL语句，实现数据库事务。
            </summary>
            <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>
            <param name="connectionString">链接字符串</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlCommonHelper.GetSingle(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行一条计算查询结果语句，返回查询结果（object）。
            </summary>
            <param name="SQLString">计算查询结果语句</param>
            <returns>查询结果（object）</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlCommonHelper.ExecuteReader(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行查询语句，返回SqlDataReader ( 注意：使用后一定要对SqlDataReader进行Close )
            </summary>
            <param name="strSQL">查询语句</param>
            <returns>SqlDataReader</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlCommonHelper.Query(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行查询语句，返回DataSet
            </summary>
            <param name="SQLString">查询语句</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlCommonHelper.CheckSql(System.String)">
            <summary>
            SQL注入关键字符号组,检测字符串是否包含关键字，符号，运算符等不利于数据库安全的因素
            作者：熊学浩
            日期：2013-6-18
            </summary>
            <param name="_txt">需要验证的字符串</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlCommonHelper.ReplaceQuotes(System.String)">
            <summary>
            替换字符串中出现的英文单引号为两个连续的单引号，避免sql出错
            </summary>
            <param name="_txt">需要替换的字符串</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlCommonHelper.CheckDS(System.Data.DataSet)">
            <summary>
            验证DataSet是否不为空
            作者：熊学浩
            日期：2015-01-21
            </summary>
            <param name="ds">DataSet</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlCommonHelper.CheckDT(System.Data.DataTable)">
            <summary>
            验证DataTable是否不为空
            作者：熊学浩
            日期：2013-6-18
            </summary>
            <param name="dt">DataTable</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlCommonHelper.CheckDR(System.Data.DataRow)">
            <summary>
            验证DataRow是否不为空
            作者：熊学浩
            日期：2015-01-21
            </summary>
            <param name="dr">DataRow</param>
            <returns></returns>
        </member>
        <member name="T:ClassLib4Net.Data.SqlHelper">
            <summary>
            The SqlHelper class is intended to encapsulate high performance, scalable best practices for 
            common uses of SqlClient
            </summary>
            <summary>
            SqlHelper操作类
            </summary>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.AttachParameters(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlParameter[])">
            <summary>
            This method is used to attach array of SqlParameters to a SqlCommand.
            
            This method will assign a value of DbNull to any parameter with a direction of
            InputOutput and a value of null.  
            
            This behavior will prevent default values from being used, but
            this will be the less common case than an intended pure output parameter (derived as InputOutput)
            where the user provided no input value.
            </summary>
            <param name="command">The command to which the parameters will be added</param>
            <param name="commandParameters">An array of SqlParameters to be added to command</param>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.AssignParameterValues(System.Data.SqlClient.SqlParameter[],System.Data.DataRow)">
            <summary>
            This method assigns dataRow column values to an array of SqlParameters
            </summary>
            <param name="commandParameters">Array of SqlParameters to be assigned values</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values</param>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.AssignParameterValues(System.Data.SqlClient.SqlParameter[],System.Object[])">
            <summary>
            This method assigns an array of values to an array of SqlParameters
            </summary>
            <param name="commandParameters">Array of SqlParameters to be assigned values</param>
            <param name="parameterValues">Array of objects holding the values to be assigned</param>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.PrepareCommand(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[],System.Boolean@)">
            <summary>
            This method opens (if necessary) and assigns a connection, transaction, command type and parameters 
            to the provided command
            </summary>
            <param name="command">The SqlCommand to be prepared</param>
            <param name="connection">A valid SqlConnection, on which to execute this command</param>
            <param name="transaction">A valid SqlTransaction, or 'null'</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="mustCloseConnection"><c>true</c> if the connection was opened by the method, otherwose is false.</param>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the database specified in 
            the connection string
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the database specified in the connection string 
            using the provided parameters
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteNonQuery(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(connString, "PublishOrders", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored prcedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(conn, "PublishOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(conn, trans, "PublishOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteDataset(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="T:ClassLib4Net.Data.SqlHelper.SqlConnectionOwnership">
            <summary>
            This enum is used to indicate whether the connection was provided by the caller, or created by SqlHelper, so that
            we can set the appropriate CommandBehavior when calling ExecuteReader()
            </summary>
        </member>
        <member name="F:ClassLib4Net.Data.SqlHelper.SqlConnectionOwnership.Internal">
            <summary>Connection is owned and managed by SqlHelper</summary>
        </member>
        <member name="F:ClassLib4Net.Data.SqlHelper.SqlConnectionOwnership.External">
            <summary>Connection is owned and managed by the caller</summary>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[],ClassLib4Net.Data.SqlHelper.SqlConnectionOwnership)">
            <summary>
            Create and prepare a SqlCommand, and call ExecuteReader with the appropriate CommandBehavior.
            </summary>
            <remarks>
            If we created and opened the connection, we want the connection to be closed when the DataReader is closed.
            
            If the caller provided the connection, we want to leave it to them to manage.
            </remarks>
            <param name="connection">A valid SqlConnection, on which to execute this command</param>
            <param name="transaction">A valid SqlTransaction, or 'null'</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="connectionOwnership">Indicates whether the connection parameter was provided by the caller, or created by SqlHelper</param>
            <returns>SqlDataReader containing the results of the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteReader(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
              SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             SqlDataReader dr = ExecuteReader(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteScalar(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, "GetOrderCount", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure using "FOR XML AUTO"</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)</param>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.FillDataset(System.String,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, 24);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>    
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             FillDataset(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>    
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             FillDataset(conn, "GetOrders", ds, new string[] {"orders"}, 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             FillDataset(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             FillDataset(trans, "GetOrders", ds, new string[]{"orders"}, 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Private helper method that execute a SqlCommand (that returns a resultset) against the specified SqlTransaction and SqlConnection
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(conn, trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.UpdateDataset(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlCommand,System.Data.DataSet,System.String)">
            <summary>
            Executes the respective command for each inserted, updated, or deleted row in the DataSet.
            </summary>
            <remarks>
            e.g.:  
             UpdateDataset(conn, insertCommand, deleteCommand, updateCommand, dataSet, "Order");
            </remarks>
            <param name="insertCommand">A valid transact-SQL statement or stored procedure to insert new records into the data source</param>
            <param name="deleteCommand">A valid transact-SQL statement or stored procedure to delete records from the data source</param>
            <param name="updateCommand">A valid transact-SQL statement or stored procedure used to update records in the data source</param>
            <param name="dataSet">The DataSet used to update the data source</param>
            <param name="tableName">The DataTable used to update the data source.</param>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.CreateCommand(System.Data.SqlClient.SqlConnection,System.String,System.String[])">
            <summary>
            Simplify the creation of a Sql command object by allowing
            a stored procedure and optional parameters to be provided
            </summary>
            <remarks>
            e.g.:  
             SqlCommand command = CreateCommand(conn, "AddCustomer", "CustomerID", "CustomerName");
            </remarks>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="sourceColumns">An array of string to be assigned as the source columns of the stored procedure parameters</param>
            <returns>A valid SqlCommand object</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteNonQueryTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteNonQueryTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.  
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteNonQueryTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified
            SqlTransaction using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteDatasetTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteDatasetTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the dataRow column values as the store procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteDatasetTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlTransaction 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteReaderTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteReaderTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteReaderTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlTransaction 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteScalarTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteScalarTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteScalarTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified SqlTransaction
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteXmlReaderTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteXmlReaderTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlTransaction 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="F:ClassLib4Net.Data.SqlHelper.BatchSize">
            <summary>
            批量操作每批次记录数
            </summary>
        </member>
        <member name="F:ClassLib4Net.Data.SqlHelper.CommandTimeOut">
            <summary>
            超时时间
            </summary>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.#ctor(System.String)">
             <summary>
            初始化SqlHelper实例
             </summary>
             <param name="connectionString">数据库连接字符串</param>
        </member>
        <member name="P:ClassLib4Net.Data.SqlHelper.ConnectionString">
            <summary>
            数据库连接字符串
            </summary>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteNonQuery(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行SQL语句,返回影响的行数
            </summary>
            <param name="commandText">SQL语句</param>
            <param name="parms">查询参数</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteNonQuery(System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行SQL语句,返回影响的行数
            </summary>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteScalar``1(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行SQL语句,返回结果集中的第一行第一列
            </summary>
            <typeparam name="T">返回对象类型</typeparam>
            <param name="commandText">SQL语句</param>
            <param name="parms">查询参数</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteScalar(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行SQL语句,返回结果集中的第一行第一列
            </summary>
            <param name="commandText">SQL语句</param>
            <param name="parms">查询参数</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteScalar(System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行SQL语句,返回结果集中的第一行第一列
            </summary>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteDataReader(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行SQL语句,返回只读数据集
            </summary>
            <param name="commandText">SQL语句</param>
            <param name="parms">查询参数</param>
            <returns>返回只读数据集</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteDataReader(System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行SQL语句,返回只读数据集
            </summary>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>返回只读数据集</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteDataRow(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行SQL语句,返回结果集中的第一行
            </summary>
            <param name="commandText">SQL语句</param>
            <param name="parms">查询参数</param>
            <returns>返回结果集中的第一行</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteDataRow(System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行SQL语句,返回结果集中的第一行
            </summary>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>返回结果集中的第一行</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteDataTable(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行SQL语句,返回结果集中的第一个数据表
            </summary>
            <param name="commandText">SQL语句</param>
            <param name="parms">查询参数</param>
            <returns>返回结果集中的第一个数据表</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteDataTable(System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行SQL语句,返回结果集中的第一个数据表
            </summary>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>返回结果集中的第一个数据表</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecutePageDataTable(System.String,System.String,System.Int32,System.Int32,System.Data.SqlClient.SqlParameter[],System.String,System.String)">
            <summary>
             执行SQL语句,返回结果集中的第一个数据表
            </summary>
            <param name="sql">SQL语句</param>
            <param name="order">排序SQL,如"ORDER BY ID DESC"</param>
            <param name="pageSize">每页记录数</param>
            <param name="pageIndex">页索引</param>
            <param name="parms">查询参数</param>
            <param name="query">查询SQL</param>        
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteDataSet(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行SQL语句,返回结果集
            </summary>
            <param name="commandText">SQL语句</param>
            <param name="parms">查询参数</param>
            <returns>返回结果集</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteDataSet(System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行SQL语句,返回结果集
            </summary>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>返回结果集</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.BulkInsert(System.Data.DataTable)">
            <summary>
            大批量数据插入
            </summary>
            <param name="table">数据表</param>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.BatchUpdate(System.Data.DataTable)">
            <summary>
            使用MySqlDataAdapter批量更新数据
            </summary>
            <param name="table">数据表</param>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.BatchDelete(System.String,System.Int32,System.Int32)">
            <summary>
            分批次批量删除数据
            </summary>
            <param name="sql">SQL语句</param>
            <param name="batchSize">每批次删除记录行数</param>
            <param name="interval">批次执行间隔(秒)</param>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.BatchUpdate(System.String,System.Int32,System.Int32)">
            <summary>
            分批次批量更新数据
            </summary>
            <param name="sql">SQL语句</param>
            <param name="batchSize">每批次更新记录行数</param>
            <param name="interval">批次执行间隔(秒)</param>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteNonQuery(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行SQL语句,返回影响的行数
            </summary>
            <param name="connectionString">数据库连接字符串</param>
            <param name="commandText">SQL语句</param>
            <param name="parms">查询参数</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行SQL语句,返回影响的行数
            </summary>
            <param name="connection">数据库连接</param>
            <param name="transaction">事务</param>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteScalar``1(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行SQL语句,返回结果集中的第一行第一列
            </summary>
            <typeparam name="T">返回对象类型</typeparam>
            <param name="connectionString">数据库连接字符串</param>
            <param name="commandText">SQL语句</param>
            <param name="parms">查询参数</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行SQL语句,返回结果集中的第一行第一列
            </summary>
            <param name="connection">数据库连接</param>
            <param name="transaction">事务</param>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteDataReader(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行SQL语句,返回只读数据集
            </summary>
            <param name="connection">数据库连接</param>
            <param name="commandText">SQL语句</param>
            <param name="parms">查询参数</param>
            <returns>返回只读数据集</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteDataReader(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行SQL语句,返回只读数据集
            </summary>
            <param name="connection">数据库连接</param>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>返回只读数据集</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteDataReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行SQL语句,返回只读数据集
            </summary>
            <param name="connection">数据库连接</param>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>返回只读数据集</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteDataReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行SQL语句,返回只读数据集
            </summary>
            <param name="transaction">事务</param>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>返回只读数据集</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteDataReader(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行SQL语句,返回只读数据集
            </summary>
            <param name="connection">数据库连接</param>
            <param name="transaction">事务</param>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>返回只读数据集</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteDataRow(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行SQL语句,返回结果集中的第一行
            </summary>
            <param name="connectionString">数据库连接字符串</param>
            <param name="commandText">SQL语句</param>
            <param name="parms">查询参数</param>
            <returns>,返回结果集中的第一行</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteDataRow(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行SQL语句,返回结果集中的第一行
            </summary>
            <param name="connectionString">数据库连接字符串</param>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>,返回结果集中的第一行</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteDataRow(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行SQL语句,返回结果集中的第一行
            </summary>
            <param name="connection">数据库连接</param>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>,返回结果集中的第一行</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteDataRow(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行SQL语句,返回结果集中的第一行
            </summary>
            <param name="transaction">事务</param>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>,返回结果集中的第一行</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteDataTable(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行SQL语句,返回结果集中的第一个数据表
            </summary>
            <param name="connectionString">数据库连接字符串</param>
            <param name="commandText">SQL语句</param>
            <param name="parms">查询参数</param>
            <returns>返回结果集中的第一个数据表</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteDataTable(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行SQL语句,返回结果集中的第一个数据表
            </summary>
            <param name="connectionString">数据库连接字符串</param>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>返回结果集中的第一个数据表</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteDataTable(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行SQL语句,返回结果集中的第一个数据表
            </summary>
            <param name="connection">数据库连接</param>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>返回结果集中的第一个数据表</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteDataTable(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行SQL语句,返回结果集中的第一个数据表
            </summary>
            <param name="transaction">事务</param>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>返回结果集中的第一个数据表</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteEmptyDataTable(System.String,System.String)">
            <summary>
            获取空表结构
            </summary>
            <param name="connectionString">数据库连接字符串</param>
            <param name="tableName">数据表名称</param>
            <returns>返回结果集中的第一个数据表</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecutePageDataTable(System.String,System.String,System.String,System.Int32,System.Int32,System.Data.SqlClient.SqlParameter[],System.String,System.String)">
            <summary>
             执行SQL语句,返回结果集中的第一个数据表
            </summary>
            <param name="connectionString">数据库连接字符串</param>
            <param name="sql">SQL语句</param>
            <param name="order">排序SQL,如"ORDER BY ID DESC"</param>
            <param name="pageSize">每页记录数</param>
            <param name="pageIndex">页索引</param>
            <param name="parms">查询参数</param>      
            <param name="query">查询SQL</param>
            <param name="cte">CTE表达式</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteDataSet(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行SQL语句,返回结果集
            </summary>
            <param name="connectionString">数据库连接字符串</param>
            <param name="commandText">SQL语句</param>
            <param name="parms">查询参数</param>
            <returns>返回结果集</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteDataSet(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行SQL语句,返回结果集
            </summary>
            <param name="connectionString">数据库连接字符串</param>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>返回结果集</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteDataSet(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行SQL语句,返回结果集
            </summary>
            <param name="connection">数据库连接</param>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>返回结果集</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteDataSet(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行SQL语句,返回结果集
            </summary>
            <param name="transaction">事务</param>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>返回结果集</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.ExecuteDataSet(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行SQL语句,返回结果集
            </summary>
            <param name="connection">数据库连接</param>
            <param name="transaction">事务</param>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>返回结果集</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.BulkInsert(System.String,System.Data.DataTable)">
            <summary>
            大批量数据插入
            </summary>
            <param name="connectionString">数据库连接字符串</param>
            <param name="table">数据表</param>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.BatchUpdate(System.String,System.Data.DataTable)">
            <summary>
            使用MySqlDataAdapter批量更新数据
            </summary>
            <param name="connectionString">数据库连接字符串</param>
            <param name="table">数据表</param>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.BatchDelete(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            分批次批量删除数据
            </summary>
            <param name="connectionString">数据库连接字符串</param>
            <param name="sql">SQL语句</param>
            <param name="batchSize">每批次更新记录行数</param>
            <param name="interval">批次执行间隔(秒)</param>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.BatchUpdate(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            分批次批量更新数据
            </summary>
            <param name="connectionString">数据库连接字符串</param>
            <param name="sql">SQL语句</param>
            <param name="batchSize">每批次更新记录行数</param>
            <param name="interval">批次执行间隔(秒)</param>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.GetDatabases(System.String)">
            <summary>
            执行指定数据库连接字符串的命令,返回服务器数据库名称数组
            </summary>
            <param name="connectionString">数据库连接字符串</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.GetDbTables(System.String,System.String)">
            <summary>
            执行指定数据库连接字符串的命令,返回指定数据库的表信息
            </summary>
            <param name="connectionString">数据库连接字符串</param>
            <param name="database"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.GetDbColumns(System.String,System.String,System.String,System.String)">
            <summary>
            执行指定数据库连接字符串的命令,返回指定数据库、表的字段信息
            </summary>
            <param name="connectionString">数据库连接字符串</param>
            <param name="database"></param>
            <param name="tableName"></param>
            <param name="schema"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelper.GetDbIndexs(System.String,System.String,System.String,System.String)">
            <summary>
            执行指定数据库连接字符串的命令,返回指定数据库、表的索引信息
            </summary>
            <param name="connectionString">数据库连接字符串</param>
            <param name="database"></param>
            <param name="tableName"></param>
            <param name="schema"></param>
            <returns></returns>
        </member>
        <member name="T:ClassLib4Net.Data.SqlHelperParameterCache">
            <summary>
            SqlHelperParameterCache provides functions to leverage a static cache of procedure parameters, and the
            ability to discover parameters for stored procedures at run-time.
            </summary>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelperParameterCache.DiscoverSpParameterSet(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            Resolve at run time the appropriate set of SqlParameters for a stored procedure
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">Whether or not to include their return value parameter</param>
            <returns>The parameter array discovered.</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelperParameterCache.CloneParameters(System.Data.SqlClient.SqlParameter[])">
            <summary>
            Deep copy of cached SqlParameter array
            </summary>
            <param name="originalParameters"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelperParameterCache.CacheParameterSet(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Add parameter array to the cache
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters to be cached</param>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelperParameterCache.GetCachedParameterSet(System.String,System.String)">
            <summary>
            Retrieve a parameter array from the cache
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An array of SqlParamters</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelperParameterCache.GetSpParameterSet(System.String,System.String)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelperParameterCache.GetSpParameterSet(System.String,System.String,System.Boolean)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelperParameterCache.GetSpParameterSet(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelperParameterCache.GetSpParameterSet(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:ClassLib4Net.Data.SqlHelperParameterCache.GetSpParameterSetInternal(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="T:ClassLib4Net.Data.DbIndex">
            <summary>
            表索引结构
            </summary>
        </member>
        <member name="P:ClassLib4Net.Data.DbIndex.IndexName">
            <summary>
            索引名称
            </summary>
        </member>
        <member name="P:ClassLib4Net.Data.DbIndex.IndexType">
            <summary>
            索引类型
            </summary>
        </member>
        <member name="P:ClassLib4Net.Data.DbIndex.IsPrimaryKey">
            <summary>
            是否为主键
            </summary>
        </member>
        <member name="P:ClassLib4Net.Data.DbIndex.IsUnique">
            <summary>
            是否唯一索引
            </summary>
        </member>
        <member name="P:ClassLib4Net.Data.DbIndex.IsUniqueConstraint">
            <summary>
            是否唯一约束
            </summary>
        </member>
        <member name="P:ClassLib4Net.Data.DbIndex.IndexColumns">
            <summary>
            索引列
            </summary>
        </member>
        <member name="P:ClassLib4Net.Data.DbIndex.IncludeColumns">
            <summary>
            覆盖索引列
            </summary>
        </member>
        <member name="T:ClassLib4Net.Data.DbTable">
            <summary>
            表结构
            </summary>
        </member>
        <member name="P:ClassLib4Net.Data.DbTable.TableName">
            <summary>
            表名称
            </summary>
        </member>
        <member name="P:ClassLib4Net.Data.DbTable.SchemaName">
            <summary>
            表的架构
            </summary>
        </member>
        <member name="P:ClassLib4Net.Data.DbTable.Rows">
            <summary>
            表的记录数
            </summary>
        </member>
        <member name="P:ClassLib4Net.Data.DbTable.HasPrimaryKey">
            <summary>
            是否含有主键
            </summary>
        </member>
        <member name="T:ClassLib4Net.Data.DbColumn">
            <summary>
            表字段结构
            </summary>
        </member>
        <member name="P:ClassLib4Net.Data.DbColumn.ColumnID">
            <summary>
            字段ID
            </summary>
        </member>
        <member name="P:ClassLib4Net.Data.DbColumn.IsPrimaryKey">
            <summary>
            是否主键
            </summary>
        </member>
        <member name="P:ClassLib4Net.Data.DbColumn.ColumnName">
            <summary>
            字段名称
            </summary>
        </member>
        <member name="P:ClassLib4Net.Data.DbColumn.ColumnType">
            <summary>
            字段类型
            </summary>
        </member>
        <member name="P:ClassLib4Net.Data.DbColumn.CSharpType">
            <summary>
            数据库类型对应的C#类型
            </summary>
        </member>
        <member name="P:ClassLib4Net.Data.DbColumn.CommonType">
            <summary>
            
            </summary>
        </member>
        <member name="P:ClassLib4Net.Data.DbColumn.ByteLength">
            <summary>
            字节长度
            </summary>
        </member>
        <member name="P:ClassLib4Net.Data.DbColumn.CharLength">
            <summary>
            字符长度
            </summary>
        </member>
        <member name="P:ClassLib4Net.Data.DbColumn.Scale">
            <summary>
            小数位
            </summary>
        </member>
        <member name="P:ClassLib4Net.Data.DbColumn.IsIdentity">
            <summary>
            是否自增列
            </summary>
        </member>
        <member name="P:ClassLib4Net.Data.DbColumn.IsNullable">
            <summary>
            是否允许空
            </summary>
        </member>
        <member name="P:ClassLib4Net.Data.DbColumn.Remark">
            <summary>
            描述
            </summary>
        </member>
        <member name="T:ClassLib4Net.DictionaryHelper">
            <summary>
            字典帮助类
            </summary>
        </member>
        <member name="M:ClassLib4Net.DictionaryHelper.DictionaryToXml(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            字典转换XML字符串
            </summary>
            <param name="dictionary">字典</param>
            <returns>XML字符串</returns>
        </member>
        <member name="M:ClassLib4Net.DictionaryHelper.XmlToDictionary(System.Xml.XmlDocument)">
            <summary>
            XML文档转换字典
            </summary>
            <param name="doc">XmlDocument</param>
            <returns></returns>
        </member>
        <member name="T:ClassLib4Net.EmailHelper">
            <summary>
            电子邮件助手
            </summary>
        </member>
        <member name="M:ClassLib4Net.EmailHelper.Send(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String[])">
            <summary>
            发送邮件的方法
            </summary>
            <param name="from">发件箱地址</param>
            <param name="title">标题</param>
            <param name="body">内容</param>
            <param name="displayName">发件人显示名</param>
            <param name="smtp">smtp服务器地址</param>
            <param name="smtpUsername">发件箱地址</param>
            <param name="smtpPassword">发件箱密码</param>
            <param name="isAysnc">异步</param>
            <param name="tos">密件抄送多人</param>
        </member>
        <member name="M:ClassLib4Net.EmailHelper.SendEmail(System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            发送邮件的方法
            </summary>
            <param name="strSmtpServer">邮件服务器地址</param>
            <param name="strFrom">发送地址</param>
            <param name="strFromPass">发送密码</param>
            <param name="strto">接收地址</param>
            <param name="strSubject">邮件主题</param>
            <param name="strBody">邮件内容</param>
            <param name="isHtmlFormat">邮件内容是否以html格式发送</param>
        </member>
        <member name="M:ClassLib4Net.EmailHelper.SendEmail(System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String[])">
            <summary>
            发送邮件的方法
            </summary>
            <param name="strSmtpServer">邮件服务器地址</param>
            <param name="strFrom">发送地址</param>
            <param name="strFromPass">发送密码</param>
            <param name="strto">接收地址</param>
            <param name="strSubject">邮件主题</param>
            <param name="strBody">邮件内容</param>
            <param name="isHtmlFormat">邮件内容是否以html格式发送</param>
            <param name="files">附件文件的集合</param>
        </member>
        <member name="M:ClassLib4Net.EmailHelper.SendAsyncEmail(System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String[],System.Object,System.Net.Mail.SendCompletedEventHandler)">
            <summary>
            异步发送邮件的方法
            </summary>
            <param name="strSmtpServer">邮件服务器地址</param>
            <param name="strFrom">发送地址</param>
            <param name="strFromPass">发送密码</param>
            <param name="strto">接收地址</param>
            <param name="strSubject">邮件主题</param>
            <param name="strBody">邮件内容</param>
            <param name="isHtmlFormat">邮件内容是否以html格式发送</param>
            <param name="files">附件文件的集合</param>
            <param name="userToken">一个用户定义对象，此对象将被传递给完成异步操作时所调用的方法。</param>
            <param name="onComplete">发送结束后的回调函数</param>
        </member>
        <member name="M:ClassLib4Net.EmailHelper.SendEmail2(System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Collections.ArrayList)">
            <summary>
            发送邮件的方法
            </summary>
            <param name="strSmtpServer">邮件服务器地址</param>
            <param name="strFrom">发送地址</param>
            <param name="strFromPass">发送密码</param>
            <param name="strto">接收地址(多个接收地址用逗号分隔)</param>
            <param name="strSubject">邮件主题</param>
            <param name="strBody">邮件内容</param>
            <param name="isHtmlFormat">邮件内容是否以html格式发送</param>
            <param name="files">附件文件的集合</param>
        </member>
        <member name="T:ClassLib4Net.EncodingTransfer">
            <summary>
            编码转换
            </summary>
        </member>
        <member name="M:ClassLib4Net.EncodingTransfer.TransferEncoding(System.String,System.Text.Encoding,System.Text.Encoding)">
            <summary>
            把字符串从一种编码转换到另一种编码
            </summary>
            <param name="fromText">需要转换的字符串</param>
            <param name="fromEncoding">原始编码</param>
            <param name="toEncoding">转换后的编码</param>
            <returns>转换结果</returns>
        </member>
        <member name="M:ClassLib4Net.EncodingTransfer.FromBase64String(System.String)">
            <summary>
            把以base64编码的字符串转换为byte[]数组
            </summary>
            <param name="base64String">以base64编码的字符串</param>
            <returns></returns>
        </member>
        <member name="T:ClassLib4Net.Encrypt.Base64Helper">
            <summary>
            Base64方式加密与解密
            </summary>
        </member>
        <member name="M:ClassLib4Net.Encrypt.Base64Helper.Base64Encrypt(System.String)">
            <summary>
            Base64加密
            </summary>
            <param name="input">需要加密的字符串</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Encrypt.Base64Helper.Base64Encrypt(System.String,System.Text.Encoding)">
            <summary>
            Base64加密
            </summary>
            <param name="input">需要加密的字符串</param>
            <param name="encode">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Encrypt.Base64Helper.Base64Decrypt(System.String)">
            <summary>
            Base64解密
            </summary>
            <param name="input">需要解密的字符串</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Encrypt.Base64Helper.Base64Decrypt(System.String,System.Text.Encoding)">
            <summary>
            Base64解密
            </summary>
            <param name="input">需要解密的字符串</param>
            <param name="encode">字符的编码</param>
            <returns></returns>
        </member>
        <member name="T:ClassLib4Net.Encrypt.DESHelper">
            <summary>
            DES方式加密与解密
            </summary>
        </member>
        <member name="M:ClassLib4Net.Encrypt.DESHelper.CreateDESProvider(System.String)">
            <summary>
            获取DES加密算法的提供程序
            </summary>
            <param name="encryptKey">密钥，长度为8位。如果字符超长则截断，不足8位自动用字符@补充。</param>
            <returns>DES加密算法的提供程序</returns>
        </member>
        <member name="M:ClassLib4Net.Encrypt.DESHelper.Encrypt(System.String)">
            <summary>
            使用默认密码加密字符串
            </summary>
            <param name="strText">字符串数据</param>
            <returns>加密后的字符串</returns>
        </member>
        <member name="M:ClassLib4Net.Encrypt.DESHelper.Encrypt(System.String,System.String)">
            <summary>
            加密字符串
            </summary>
            <param name="strText">字符串数据</param>
            <param name="encryptKey">密钥，长度为8位。如果字符超长则截断，不足8位自动用字符@补充。</param>
            <returns>加密后的字符串</returns>
        </member>
        <member name="M:ClassLib4Net.Encrypt.DESHelper.Decrypt(System.String)">
            <summary>
            使用默认密码解密字符串
            </summary>
            <param name="encryptedText">加了密的字符串</param>
            <returns>解密后的字符串</returns>
        </member>
        <member name="M:ClassLib4Net.Encrypt.DESHelper.Decrypt(System.String,System.String)">
            <summary>
            解密字符串
            </summary>
            <param name="encryptedText">加了密的字符串</param>
            <param name="decryptKey">密钥，长度为8位。如果字符超长则截断，不足8位自动用字符@补充。</param>
            <returns>解密后的字符串</returns>
        </member>
        <member name="M:ClassLib4Net.Encrypt.DESHelper.EncryptFile(System.String,System.String)">
            <summary>
            使用默认密码加密文件
            </summary>
            <param name="inputFilePath">源文件路径</param>
            <param name="outFilePath">输出文件路径</param>
        </member>
        <member name="M:ClassLib4Net.Encrypt.DESHelper.EncryptFile(System.String,System.String,System.String)">
            <summary>
            DES加密文件
            </summary>
            <param name="inputFilePath">源文件路径</param>
            <param name="outFilePath">输出文件路径</param>
            <param name="encryptKey">密钥，长度为8位。如果字符超长则截断，不足8位自动用字符@补充。</param>
        </member>
        <member name="M:ClassLib4Net.Encrypt.DESHelper.DecryptFile(System.String,System.String)">
            <summary>
            使用默认密码解密文件
            </summary>
            <param name="inputFilePath">加密了的文件路径</param>
            <param name="outFilePath">输出文件路径</param>
        </member>
        <member name="M:ClassLib4Net.Encrypt.DESHelper.DecryptFile(System.String,System.String,System.String)">
            <summary>
            解密文件
            </summary>
            <param name="inputFilePath">加密了的文件路径</param>
            <param name="outFilePath">输出文件路径</param>
            <param name="decryptKey">密钥，长度为8位。如果字符超长则截断，不足8位自动用字符@补充。</param>
        </member>
        <member name="T:ClassLib4Net.Encrypt.MD5Helper">
            <summary>
            MD5方式加密
            </summary>
        </member>
        <member name="M:ClassLib4Net.Encrypt.MD5Helper.MD5Encrypt(System.String,System.Text.Encoding)">
            <summary>
            MD5方式加密字符串的方法
            </summary>
            <param name="text">要进行加密的字符串</param>
            <param name="encoding">字符串编码格式</param>
            <returns>加密后的字符串</returns>
        </member>
        <member name="M:ClassLib4Net.Encrypt.MD5Helper.MD5Encrypt(System.String)">
            <summary>
            MD5方式加密字符串的方法（utf-8编码）
            </summary>
            <param name="text">要进行加密的字符串</param>
            <returns>加密后的字符串</returns>
        </member>
        <member name="M:ClassLib4Net.Encrypt.MD5Helper.MD5Hash(System.String)">
            <summary>
            使用默认编码进行标准MD5加密
            </summary>
            <param name="strText">text</param>
            <returns>md5 Encrypt string</returns>
        </member>
        <member name="M:ClassLib4Net.Encrypt.MD5Helper.MD5Hash(System.String,System.Text.Encoding)">
            <summary>
            标准MD5加密
            </summary>
            <param name="strText">text</param>
            <param name="encoding">编码方式</param>
            <returns>md5 Encrypt string</returns>
        </member>
        <member name="T:ClassLib4Net.Encrypt.OtherHelper">
            <summary>
            其它方式加密与解密
            </summary>
        </member>
        <member name="M:ClassLib4Net.Encrypt.OtherHelper.encode(System.String)">
            <summary>
            简单加密
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Encrypt.OtherHelper.decode(System.String)">
            <summary>
            简单解密
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:ClassLib4Net.Encrypt.SHA1Helper">
            <summary>
            SHA1方式加密与解密
            </summary>
        </member>
        <member name="M:ClassLib4Net.Encrypt.SHA1Helper.SHA1Encrypt(System.String,System.Text.Encoding)">
            <summary>
            SHA1方式加密字符串的方法
            </summary>
            <param name="text">要进行加密的字符串</param>
            <param name="encoding">字符串编码格式</param>
            <returns>加密后的字符串</returns>
        </member>
        <member name="M:ClassLib4Net.Encrypt.SHA1Helper.SHA1Encrypt(System.String)">
            <summary>
            SHA1方式加密字符串的方法（utf-8编码）
            </summary>
            <param name="text">要进行加密的字符串</param>
            <returns>加密后的字符串</returns>
        </member>
        <member name="T:ClassLib4Net.EnumHelper">
            <summary>
            枚举助手
            </summary>
        </member>
        <member name="M:ClassLib4Net.EnumHelper.GetEnumDescription(System.Enum)">
            <summary>
            根据枚举类型获取描述
            </summary>
            <param name="value">类型</param>
            <returns>描述</returns>
        </member>
        <member name="T:ClassLib4Net.ExcelHelper">
            <summary>
            调用Com组件Excel帮助类
            </summary>
        </member>
        <member name="M:ClassLib4Net.ExcelHelper.GetRangIndex(System.String[],System.String)">
            <summary>
            根据指定值返回所在数组索引号
            </summary>
            <param name="list"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.ExcelHelper.Export(System.Data.DataSet,System.String[],System.String[],System.String,System.String,System.String@)">
            <summary>
            生成Excel报表
            </summary>
            <param name="ds">需要生成数据的的DataSet</param>
            <param name="exportPath">输出路径</param>
            <param name="columnName">数据库字段名</param>
            <param name="columnTitle">改变数据库字段名的名字</param>
            <param name="exportFileName">导出Excle文件名（短文件名，无需后缀）</param>
            <param name="errorMessage">出错信息</param>
            <returns>返回路径</returns>
        </member>
        <member name="M:ClassLib4Net.ExcelHelper.Export``1(System.Collections.Generic.List{``0},System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            导出Excle
            </summary>
            <typeparam name="T">类对象</typeparam>
            <param name="list">对象数据集合</param>
            <param name="column">类字段，字段对应列名</param>
            <param name="exportFileName">导出Excle文件名（短文件名，无需后缀）</param>
        </member>
        <member name="M:ClassLib4Net.ExcelHelper.GetExcelSheetNames(ClassLib4Net.ExcelConnectionString)">
            <summary>
            获取Excel工作表名
            </summary>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.ExcelHelper.GetDS(ClassLib4Net.ExcelConnectionString,System.String)">
            <summary>
            获取数据集
            </summary>
            <param name="connection"></param>
            <param name="SheetName"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.ExcelHelper.GetDS(ClassLib4Net.ExcelConnectionString)">
            <summary>
            获取数据集
            </summary>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.ExcelHelper.DropSheet(ClassLib4Net.ExcelConnectionString,System.String)">
            <summary>
            移除工作表
            </summary>
            <param name="connection"></param>
            <param name="SheetName"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.ExcelHelper.ExecuteCommand(ClassLib4Net.ExcelConnectionString,System.String)">
            <summary>  
            Execute new command  
            </summary>  
            <param name="command">Command</param>  
        </member>
        <member name="M:ClassLib4Net.ExcelHelper.GenerateCreateTable(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>  
            Generates create table script  
            </summary>  
            <param name="tableName">Table Name（注意Excel表名最后的字符$）</param>  
            <param name="tableDefinition">Table Definition</param>  
            <returns>Create table script</returns>  
        </member>
        <member name="M:ClassLib4Net.ExcelHelper.GenerateInsertStatement(System.Data.DataRow)">
            <summary>  
            Generates insert statement script  
            </summary>  
            <param name="dr">Data row</param>  
            <returns>Insert statement script</returns>  
        </member>
        <member name="M:ClassLib4Net.ExcelHelper.CreateTable(ClassLib4Net.ExcelConnectionString,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>  
            Create Table  
            </summary>  
            <param name="tableName">Table Name（注意Excel表名最后的字符$）</param>  
            <param name="tableDefinition">Table Definition</param>  
        </member>
        <member name="M:ClassLib4Net.ExcelHelper.AddNewRow(ClassLib4Net.ExcelConnectionString,System.Data.DataRow)">
            <summary>  
            Add new row  
            </summary>  
            <param name="dr">Data Row</param>  
        </member>
        <member name="T:ClassLib4Net.ExcelConnectionString">
            <summary>
            Excel数据库链接字符串
            </summary>
        </member>
        <member name="P:ClassLib4Net.ExcelConnectionString.DataSource">
            <summary>
            Data Source即文件路径（完整的物理路径）
            </summary>
        </member>
        <member name="P:ClassLib4Net.ExcelConnectionString.HDR">
            <summary>
            参数HDR的值：HDR=Yes，这代表第一行是标题，不做为数据使用 ，如果用HDR=NO，则表示第一行不是标题，做为数据来使用。系统默认的是YES
            缺省为YES
            </summary>
        </member>
        <member name="P:ClassLib4Net.ExcelConnectionString.IMEX">
            <summary>
            IMEX ( IMport EXport mode )
            当 IMEX=0 时为“汇出模式”，这个模式开启的 Excel 档案只能用来做“写入”用途。
            当 IMEX=1 时为“汇入模式”，这个模式开启的 Excel 档案只能用来做“读取”用途。
            当 IMEX=2 时为“连結模式”，这个模式开启的 Excel 档案可同时支援“读取”与“写入”用途(完全更新能力)。
            缺省为2
            </summary>
        </member>
        <member name="P:ClassLib4Net.ExcelConnectionString.PersistSecurityInfo">
            <summary>
            ADO在数据库连接成功后是否保存密码信息"，
            True表示保存，False表示不保存
            缺省为False
            </summary>
        </member>
        <member name="P:ClassLib4Net.ExcelConnectionString.ConnectionString">
            <summary>
            链接字符串（支持.xls|.xlsx后缀名的Excel文件）
            </summary>
        </member>
        <member name="M:ClassLib4Net.ExcelConnectionString.#ctor(System.String,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            带参数的构造函数
            </summary>
            <param name="DataSource"></param>
            <param name="HDR"></param>
            <param name="IMEX"></param>
            <param name="PersistSecurityInfo"></param>
        </member>
        <member name="T:ClassLib4Net.ExportDataHelper">
            <summary>
            数据导出为Excel或XML文件
            </summary>
        </member>
        <member name="M:ClassLib4Net.ExportDataHelper.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:ClassLib4Net.ExportDataHelper.ExportDataSetToFile(System.String,System.Data.DataSet,ClassLib4Net.ExportFormat,System.String)">
            <summary>
            把DataSet导出到文件
            </summary>
            <param name="_caption">表头标题文字，以 | 分隔</param>
            <param name="ds">源数据DataSet</param>
            <param name="ef">导出格式</param>
            <param name="FileName">导出的文件名</param>
        </member>
        <member name="M:ClassLib4Net.ExportDataHelper.ExportDataSetToFile(System.String,System.Data.DataSet,System.String[],ClassLib4Net.ExportFormat,System.String)">
            <summary>
            把DataSet导出到文件
            </summary>
            <param name="_caption">表头标题文字，以 | 分隔</param>
            <param name="ds">源数据DataSet</param>
            <param name="cols">输出列</param>        
            <param name="ef">导出格式</param>
            <param name="FileName">导出的文件名</param>
        </member>
        <member name="M:ClassLib4Net.ExportDataHelper.ExportDataSetToFile(System.String[],System.Data.DataSet,ClassLib4Net.ExportFormat,System.String)">
            <summary>
            把DataSet导出到文件
            </summary>
            <param name="_caption">表头标题文字</param>
            <param name="ds">源数据DataSet</param>
            <param name="ef">导出格式</param>
            <param name="FileName">导出的文件名</param>
        </member>
        <member name="M:ClassLib4Net.ExportDataHelper.ExportDataSetToFile(System.String[],System.Data.DataSet,System.String[],ClassLib4Net.ExportFormat,System.String)">
            <summary>
            把DataSet导出到文件
            </summary>
            <param name="_caption">表头标题文字，以 | 分隔</param>        
            <param name="ds">源数据DataSet</param>
            <param name="cols">输出列</param>
            <param name="ef">导出格式</param>
            <param name="FileName">导出的文件名</param>
        </member>
        <member name="M:ClassLib4Net.ExportDataHelper.ExportDataSetToFile(System.Data.DataSet,ClassLib4Net.ExportFormat,System.String)">
            <summary>
            把DataSet导出到文件
            </summary>
            <param name="ds">源数据DataSet</param>
            <param name="ef">导出格式</param>
            <param name="FileName">导出的文件名</param>
        </member>
        <member name="M:ClassLib4Net.ExportDataHelper.ExportDataSetToFile(System.Data.DataSet,System.String[],ClassLib4Net.ExportFormat,System.String)">
            <summary>
            把DataSet导出到文件
            </summary>
            <param name="ds">源数据DataSet</param>
            <param name="cols">导出的列</param>
            <param name="ef">导出格式</param>
            <param name="FileName">导出的文件名</param>
        </member>
        <member name="M:ClassLib4Net.ExportDataHelper.ExportDataSetToExcelWithTitle(System.String,System.String[],System.Data.DataSet,System.String[],System.String)">
            <summary>
            把DataSet导出到Excel文件,并带表头
            </summary>
            <param name="title">表头</param>
            <param name="_caption">标题</param>
            <param name="ds">源数据DataSet</param>
            <param name="cols">导出的列</param>
            <param name="FileName">导出的文件名</param>
        </member>
        <member name="T:ClassLib4Net.ExportFormat">
            <summary>
            导出文件的类型
            </summary>
        </member>
        <member name="F:ClassLib4Net.ExportFormat.ExcelFormat">
            <summary>
            
            </summary>
        </member>
        <member name="F:ClassLib4Net.ExportFormat.XMLFormat">
            <summary>
            
            </summary>
        </member>
        <member name="T:ClassLib4Net.ExtensionHelper">
            <summary>
            基础方法扩展类
            </summary>
        </member>
        <member name="M:ClassLib4Net.ExtensionHelper.Convert``1(System.String,``0)">
            <summary>
            转成基本的类型（支持可空类型）
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="str"></param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.ExtensionHelper.ConvertObject``1(System.Object,``0)">
            <summary>
            转成基本的类型（支持可空类型）
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="obj"></param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.ExtensionHelper.ToGuid(System.String)">
            <summary>
            转换成Guid
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.ExtensionHelper.ToNumber(System.String)">
            <summary>
            转成数字字符串
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.ExtensionHelper.ToInt(System.String,System.Int32)">
            <summary>
            转成整数
            </summary>
            <param name="str"></param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
            
        </member>
        <member name="M:ClassLib4Net.ExtensionHelper.ToShortInt(System.Object)">
            <summary>
            将对象变量转成短整型变量的方法
            </summary>
            <param name="obj">对象变量</param>
            <returns>短整型变量</returns>
        </member>
        <member name="M:ClassLib4Net.ExtensionHelper.ToLong(System.Object)">
            <summary>
            将对象变量转成64位整数型变量的方法
            </summary>
            <param name="obj">对象变量</param>
            <returns>64位整数型变量</returns>
        </member>
        <member name="M:ClassLib4Net.ExtensionHelper.ToDouble(System.Object)">
            <summary>
            将对象变量转成双精度浮点型变量的方法
            </summary>
            <param name="obj">对象变量</param>
            <returns>双精度浮点型变量</returns>
        </member>
        <member name="M:ClassLib4Net.ExtensionHelper.ToFloat(System.String)">
            <summary>
            转成浮点类型
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.ExtensionHelper.ToBoolean(System.Object)">
            <summary>
            将对象变量转成布尔型变量的方法
            </summary>
            <param name="obj">对象变量</param>
            <returns>布尔型变量</returns>
        </member>
        <member name="M:ClassLib4Net.ExtensionHelper.ToDecimal(System.Object)">
            <summary>
            将对象变量转成十进制数字变量的方法
            </summary>
            <param name="obj">对象变量</param>
            <returns>十进制数字变量</returns>
        </member>
        <member name="M:ClassLib4Net.ExtensionHelper.ToDateTimeString(System.Object,System.String)">
            <summary>
            将对象变量转成日期时间型字符串变量的方法
            </summary>
            <param name="obj">对象变量</param>
            <param name="sFormat">时间字符串格式，例：yyyy-MM-dd</param>
            <returns>时间型字符串变量</returns>
        </member>
        <member name="M:ClassLib4Net.ExtensionHelper.ToShortDateString(System.Object)">
            <summary>
            将对象变量转成日期字符串变量的方法
            </summary>
            <param name="obj">对象变量</param>
            <returns>日期字符串变量</returns>
        </member>
        <member name="M:ClassLib4Net.ExtensionHelper.ToDateTime(System.Object)">
            <summary>
            将对象变量转成日期型变量的方法
            </summary>
            <param name="obj">对象变量</param>
            <returns>日期型变量</returns>
        </member>
        <member name="M:ClassLib4Net.ExtensionHelper.GetLeft(System.String,System.Int32)">
            <summary>
            获取字符串左侧字符
            </summary>
            <param name="str"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.ExtensionHelper.GetRight(System.String,System.Int32)">
            <summary>
            获取字符串右侧字符
            </summary>
            <param name="str"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.ExtensionHelper.UrlEncode(System.String,System.Text.Encoding)">
            <summary>
            Url编码，空格转成%20
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.ExtensionHelper.UrlEncode(System.String)">
            <summary>
            Url编码，空格转成%20
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.ExtensionHelper.UrlDecode(System.String)">
             <summary>
            Url解码 
             </summary>
             <param name="str"></param>
             <returns></returns>
        </member>
        <member name="M:ClassLib4Net.ExtensionHelper.ChineseWeek(System.DateTime)">
            <summary>
            时间格式获得中国星期
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.ExtensionHelper.ToTimestamp(System.DateTime)">
            <summary>
            Windows DateTime to Unix Timestamp
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.ExtensionHelper.ToTimestamp(System.Nullable{System.DateTime})">
            <summary>
            Windows DateTime to Unix Timestamp
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.ExtensionHelper.ToDateTime(System.Int64)">
            <summary>
             Unix Timestamp to Windows DateTime
            </summary>
            <param name="timestamp"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.ExtensionHelper.ToDateTime(System.Nullable{System.Int64})">
            <summary>
             Unix Timestamp to Windows DateTime
            </summary>
            <param name="timestamp"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.ExtensionHelper.ToDateTime(System.Int32)">
            <summary>
             Unix Timestamp to Windows DateTime
            </summary>
            <param name="timestamp"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.ExtensionHelper.ToDateTime(System.Nullable{System.Int32})">
            <summary>
             Unix Timestamp to Windows DateTime
            </summary>
            <param name="timestamp"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.ExtensionHelper.ToDateTime(System.Double)">
            <summary>
             Unix Timestamp to Windows DateTime
            </summary>
            <param name="timestamp"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.ExtensionHelper.ToDateTime(System.Nullable{System.Double})">
            <summary>
            Unix Timestamp to Windows DateTime
            </summary>
            <param name="timestamp"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.ExtensionHelper.FormatDateTime(System.DateTime,System.String)">
            <summary>
            时间格式化
            </summary>
            <param name="time"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.ExtensionHelper.FormatDateTime(System.Nullable{System.DateTime},System.String)">
            <summary>
            时间格式化
            </summary>
            <param name="time"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.ExtensionHelper.FormatDateTime(System.String)">
            <summary>
            将8位，14位，17位纯数字字符串转换成日期时间格式
            例如：20101010101010100 转换成：2010-10-10 10:10:10.100
            熊学浩
            2013-07-12
            </summary>
            <param name="time">例如：20101010101010100</param>
            <returns></returns>
        </member>
        <member name="T:ClassLib4Net.Extension.Dictionary.DictionaryExtensions">
            <summary>
            字典扩展
            </summary>
        </member>
        <member name="M:ClassLib4Net.Extension.Dictionary.DictionaryExtensions.GetValue``1(System.Collections.Generic.Dictionary{System.String,``0},System.String)">
            <summary>
            根据key获取value
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dictionary"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Extension.Dictionary.DictionaryExtensions.GetValue``1(System.Collections.Generic.Dictionary{System.String,``0},System.String,``0)">
            <summary>
            根据key获取value
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dictionary"></param>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Extension.Dictionary.DictionaryExtensions.AddValue``1(System.Collections.Generic.Dictionary{System.String,``0},System.String,``0)">
            <summary>
            添加键值对数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dictionary"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Extension.Dictionary.DictionaryExtensions.AddValues``1(System.Collections.Generic.Dictionary{System.String,``0},System.String[],``0[])">
            <summary>
            添加键值对数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dictionary"></param>
            <param name="keys"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Extension.Dictionary.DictionaryExtensions.Sort(System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
            <summary>
            将集合内非空参数值的参数按照参数名ASCII码从小到大排序（字典序）
            </summary>
            <param name="dictionary">参数（键值对）字典</param>
            <param name="isAsc">参数（键值对）字典的主键排序方式</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Extension.Dictionary.DictionaryExtensions.ToURLParameter(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            将参数字典转换成URL键值对的格式（即 key1=value1&amp;key2=value2…）
            </summary>
            <param name="dictionary">参数（键值对）字典</param>
            <returns></returns>
        </member>
        <member name="T:ClassLib4Net.Extension.Enum.EnumExtensions">
            <summary>
            枚举扩展
            </summary>
        </member>
        <member name="M:ClassLib4Net.Extension.Enum.EnumExtensions.GetDescription(System.Object)">
            <summary>
            根据枚举成员获取DescriptionAttribute的属性Description
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="T:ClassLib4Net.Extension.Enum.MultiLanguageAttribute">
            <summary>
            定义枚举多语言属性
            </summary>
        </member>
        <member name="M:ClassLib4Net.Extension.Enum.MultiLanguageAttribute.#ctor(System.Object,System.String)">
            <summary>
            带参数的构造方法
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="P:ClassLib4Net.Extension.Enum.MultiLanguageAttribute.key">
            <summary>
            属性
            </summary>
        </member>
        <member name="P:ClassLib4Net.Extension.Enum.MultiLanguageAttribute.value">
            <summary>
            属性值
            </summary>
        </member>
        <member name="T:ClassLib4Net.Extension.Enum.MultiLanguageExtensions">
            <summary>
            多语言扩展
            </summary>
        </member>
        <member name="M:ClassLib4Net.Extension.Enum.MultiLanguageExtensions.Language(System.Enum)">
            <summary>
            当前语言值
            </summary>
            <param name="enumObject"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Extension.Enum.MultiLanguageExtensions.Language(System.Enum,System.String)">
            <summary>
            枚举指定语言显示
            </summary>
            <param name="enumObject"></param>
            <param name="language"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ClassLib4Net.Extension.Enum.MultiLanguageExtensions.ToIEnumerable(System.Enum)" -->
        <member name="M:ClassLib4Net.Extension.Enum.MultiLanguageExtensions.ToSelectList(System.Enum)">
            <summary>
            枚举转换为selectlist，并翻译为当前语言
            </summary>
            <param name="enumObject"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Extension.Enum.MultiLanguageExtensions.ToSelectList(System.Enum,System.Object)">
            <summary>
            枚举转换为selectlist，设置默认值，并翻译为当前语言
            </summary>
            <param name="enumObject"></param>
            <param name="defaultValue">默认值类型为Int32</param>
            <returns></returns>
        </member>
        <member name="P:ClassLib4Net.Extension.Enum.MultiLanguageExtensions.CurrentCultureName">
            <summary>
            当前用户地区编码
            </summary>
        </member>
        <member name="T:ClassLib4Net.Extension.List.ListExtensions">
            <summary>
            列表扩展
            </summary>
        </member>
        <member name="M:ClassLib4Net.Extension.List.ListExtensions.ToDataTable``1(System.Collections.Generic.IList{``0})">
             <summary>
            List转换成DataTable
             </summary>
             <typeparam name="T"></typeparam>
             <param name="list"></param>
             <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Extension.List.ListExtensions.ToDataSet``1(System.Collections.Generic.IList{``0})">
            <summary>
            List转换成DataSet
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="T:ClassLib4Net.FileHelper">
            <summary>
            对文件进行处理的类
            </summary>
        </member>
        <member name="M:ClassLib4Net.FileHelper.GetFileName(System.String)">
            <summary>
            得到文件名的方法
            </summary>
            <param name="physicalPath">包含文件名的物理路径</param>
            <returns>文件名</returns>
        </member>
        <member name="M:ClassLib4Net.FileHelper.CreateDirectory(System.String)">
            <summary>
            如果目录不存在则创建目录的方法
            </summary>
            <param name="path">要创建目录路径（“/”会自动转换成“\”）</param>
        </member>
        <member name="M:ClassLib4Net.FileHelper.GetSuffix(System.String)">
            <summary>
            取扩展名的方法
            </summary>
            <param name="path">完整文件名</param>
            <returns>扩展名</returns>
        </member>
        <member name="M:ClassLib4Net.FileHelper.BuildFileNameByTime(System.String)">
            <summary>
            根据时间合成文件名的方法
            </summary>
            <param name="_srcName">完整文件名</param>
            <returns>根据时间生成的文件名</returns>
        </member>
        <member name="M:ClassLib4Net.FileHelper.BuildFileNameByTime(System.String,System.String)">
            <summary>
            根据时间合成文件名的方法
            </summary>
            <param name="_srcName">完整文件名</param>
            <param name="_tgtName">自定义完整文件名</param>
            <returns>文件名</returns>
        </member>
        <member name="M:ClassLib4Net.FileHelper.RemoveFile(System.String)">
            <summary>
            如果文件存在则删除文件的方法
            </summary>
            <param name="physicalPath">完整文件名</param>
        </member>
        <member name="M:ClassLib4Net.FileHelper.RenameFile(System.String,System.String)">
            <summary>
            重命名文件的方法
            </summary>
            <param name="physicalPath">完整文件名</param>
            <param name="newName">新文件名(不包含后缀名)</param>
        </member>
        <member name="M:ClassLib4Net.FileHelper.AppendFile(System.String,System.String)">
            <summary>
            往文件里追加内容的方法
            </summary>
            <param name="_content">要追加的内容</param>
            <param name="path">完整文件名</param>
        </member>
        <member name="M:ClassLib4Net.FileHelper.AppendFile(System.String,System.String,System.Text.Encoding)">
            <summary>
            往文件里追加内容的方法
            </summary>
            <param name="content">要追加的内容</param>
            <param name="physicalPath">完整文件名</param>
            <param name="encoding">文件编码</param>
        </member>
        <member name="M:ClassLib4Net.FileHelper.UpdateFile(System.String,System.String)">
            <summary>
            将内容写入文件中，自动创建文件和目录的方法
            </summary>
            <param name="content">要写入的内容</param>
            <param name="physicalPath">完整文件名</param>
        </member>
        <member name="M:ClassLib4Net.FileHelper.UpdateFile(System.String,System.String,System.Text.Encoding)">
            <summary>
            将内容写入文件中，自动创建文件和目录的方法
            </summary>
            <param name="content">要写入的内容</param>
            <param name="physicalPath">完整文件名</param>
            <param name="encoding">文件编码</param>
        </member>
        <member name="M:ClassLib4Net.FileHelper.ReadFile(System.String)">
            <summary>
            读取文件内容
            </summary>
            <param name="physicalPath">要读取的完整文件路径</param>
            <returns>模版内容</returns>
        </member>
        <member name="M:ClassLib4Net.FileHelper.ReadFile(System.String,System.Text.Encoding)">
            <summary>
            读取文件内容
            </summary>
            <param name="physicalPath">要读取的完整文件路径</param>
            <param name="encoding">文件编码</param>
            <returns>模版内容</returns>
        </member>
        <member name="M:ClassLib4Net.FileHelper.SaveFileToServer(System.Web.HttpPostedFile,System.String,System.String@)">
            <summary>
            保存上传文件的方法
            </summary>
            <param name="file">文件对象</param>
            <param name="fileLocalPath">目录文件夹</param>
            <param name="absPath">回传保存绝对路径</param>
        </member>
        <member name="M:ClassLib4Net.FileHelper.SaveFileToServer(System.Web.HttpPostedFile,System.String,System.String@,ClassLib4Net.FileHelper.NamingRules)">
            <summary>
            保存上传文件的方法
            </summary>
            <param name="file">要保存的文件</param>
            <param name="physicalFolder">保存到物理文件夹（示例：D:\WebSite\MyWeb\）</param>
            <param name="relativePath">基于物理文件夹下的相对路径（示例：/Upload/MyFiles/）</param>
            <param name="namingRules">文件命名规则</param>
            <returns>是否保存成功</returns>
        </member>
        <member name="M:ClassLib4Net.FileHelper.SaveFileToServer(System.Web.HttpPostedFileBase,System.String,System.String@,ClassLib4Net.FileHelper.NamingRules)">
            <summary>
            保存上传文件的方法
            </summary>
            <param name="file">要保存的文件</param>
            <param name="physicalFolder">保存到物理文件夹（示例：D:\WebSite\MyWeb\）</param>
            <param name="relativePath">基于物理文件夹下的相对路径（示例：/Upload/MyFiles/）</param>
            <param name="namingRules">文件命名规则</param>
            <returns>是否保存成功</returns>
        </member>
        <member name="T:ClassLib4Net.FileHelper.NamingRules">
            <summary>
            文件命名规则 Naming rules
            </summary>
        </member>
        <member name="F:ClassLib4Net.FileHelper.NamingRules.Guid">
            <summary>
            NewGuid
            </summary>
        </member>
        <member name="F:ClassLib4Net.FileHelper.NamingRules.GuidWithoutCrossLine">
            <summary>
            Guid without a cross line
            </summary>
        </member>
        <member name="F:ClassLib4Net.FileHelper.NamingRules.DateTime">
            <summary>
            DateTime
            </summary>
        </member>
        <member name="F:ClassLib4Net.FileHelper.NamingRules.OriginalFileName">
            <summary>
            OriginalFileName
            </summary>
        </member>
        <member name="F:ClassLib4Net.FileHelper.NamingRules.FromRelativePath">
            <summary>
            From RelativePath
            </summary>
        </member>
        <member name="M:ClassLib4Net.FileHelper.SaveFileToServer(System.Web.HttpPostedFileWrapper,System.String,System.String@,ClassLib4Net.FileHelper.NamingRules)">
            <summary>
            保存上传文件的方法
            </summary>
            <param name="file">要保存的文件</param>
            <param name="physicalFolder">保存到物理文件夹（示例：D:\WebSite\MyWeb\）</param>
            <param name="relativePath">基于物理文件夹下的相对路径（示例：/Upload/MyFiles/）</param>
            <param name="namingRules">文件命名规则</param>
            <returns>是否保存成功</returns>
        </member>
        <member name="M:ClassLib4Net.FileHelper.FileDownload(System.String,System.String)">
            <summary>
            文件下载的方法
            </summary>
            <param name="FullFileName">完整文件名</param>
            <param name="RealFileName">下载显示的文件名</param>
        </member>
        <member name="M:ClassLib4Net.FileHelper.DeleteFolder(System.String)">
            <summary>
            删除文件夹及其旗下所有文件
            </summary>
            <param name="path">路径</param>
        </member>
        <member name="M:ClassLib4Net.FileHelper.Cut(System.String,System.String,System.Boolean)">
            <summary>
            剪切文件到指定目录
            </summary>
            <param name="sourcePath">源文件路径</param>
            <param name="destPath">目标文件路径</param>
            <param name="overwrite">覆盖，如果目标文件可以被覆盖，则为true；否则false。</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.FileHelper.BytesToStream(System.Byte[])">
            <summary>
            byte[]转换成Stream
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.FileHelper.FileToBytes(System.String)">
            <summary>
            文件转换成byte[]
            </summary>
            <param name="path">完整路径</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.FileHelper.StreamToBytes(System.IO.Stream)">
            <summary>
            Stream转换成byte[]
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.FileHelper.StreamToFile(System.IO.Stream,System.String)">
            <summary>
            Stream写入文件
            </summary>
            <param name="stream"></param>
            <param name="path">完整路径</param>
        </member>
        <member name="M:ClassLib4Net.FileHelper.FileToStream(System.String)">
            <summary>
            文件转换成Stream
            </summary>
            <param name="path">完整路径</param>
            <returns></returns>
        </member>
        <member name="T:ClassLib4Net.FilterWord">
            <summary>
            过滤词
            </summary>
        </member>
        <member name="M:ClassLib4Net.FilterWord.Contain(System.String)">
            <summary>
            是否包含过滤词
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.FilterWord.Filter(System.String,System.String)">
            <summary>
            过滤处理
            </summary>
            <param name="text">字符串</param>
            <param name="replacement">替换字符串</param>
            <returns>过滤处理后的字符串</returns>
        </member>
        <member name="M:ClassLib4Net.FilterWord.Filter(System.String)">
            <summary>
            过滤处理，替换字符串“*”
            </summary>
            <param name="text">字符串</param>
            <returns></returns>
        </member>
        <member name="F:ClassLib4Net.FilterWord.filterWord6">
            <summary>
            过滤词（6字及6字以上）
            </summary>
        </member>
        <member name="F:ClassLib4Net.FilterWord.filterWord5">
            <summary>
            过滤词（5字）
            </summary>
        </member>
        <member name="F:ClassLib4Net.FilterWord.filterWord4">
            <summary>
            过滤词（4字）
            </summary>
        </member>
        <member name="F:ClassLib4Net.FilterWord.filterWord3">
            <summary>
            过滤词（3字）
            </summary>
        </member>
        <member name="F:ClassLib4Net.FilterWord.filterWord2">
            <summary>
            过滤词（2字）
            </summary>
        </member>
        <member name="F:ClassLib4Net.FilterWord.filterWord1">
            <summary>
            过滤词（1字）
            </summary>
        </member>
        <member name="T:ClassLib4Net.GeographyHelper">
            <summary>
            地理坐标及位置助手
            熊学浩
            2016-05-20
            </summary>
        </member>
        <member name="F:ClassLib4Net.GeographyHelper.Ea">
            <summary>
            赤道半径（m）
            </summary>
        </member>
        <member name="F:ClassLib4Net.GeographyHelper.Eb">
            <summary>
            极半径（m）
            </summary>
        </member>
        <member name="M:ClassLib4Net.GeographyHelper.GetRectRange(System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            这个根据一个经纬度坐标、距离然后求另外一个经纬度坐标的作用，主要就是确定一个最小外包矩形(Minimum bounding rectangle，简称MBR)。例如，我要找一个坐标点(lat,lon)的5公里范围内的所有商户信息、景点信息等。这个MBR就是一个最大的范围，这个矩形是包含5公里范围内所有这些有效信息的一个最小矩形。利用公式，求出四个方向0度、90度、180度、270度方向上的四个坐标点就可以得到这个MBR
            </summary>
            <param name="centorlatitude">中心点纬度</param>
            <param name="centorLogitude">中心点经度</param>
            <param name="distance">距离（km）</param>
            <param name="maxLatitude">最大纬度</param>
            <param name="minLatitude">最小纬度</param>
            <param name="maxLongitude">最大经度</param>
            <param name="minLongitude">最小经度</param>
        </member>
        <member name="M:ClassLib4Net.GeographyHelper.GetRectRange2(System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            这个根据一个经纬度坐标、距离然后求另外一个经纬度坐标的作用，主要就是确定一个最小外包矩形(Minimum bounding rectangle，简称MBR)。例如，我要找一个坐标点(lat,lon)的5公里范围内的所有商户信息、景点信息等。这个MBR就是一个最大的范围，这个矩形是包含5公里范围内所有这些有效信息的一个最小矩形。利用公式，求出四个方向0度、90度、180度、270度方向上的四个坐标点就可以得到这个MBR
            </summary>
            <param name="centorlatitude">中心点纬度</param>
            <param name="centorLogitude">中心点经度</param>
            <param name="distance">距离（km）</param>
            <param name="maxLatitude">最大纬度</param>
            <param name="minLatitude">最小纬度</param>
            <param name="maxLongitude">最大经度</param>
            <param name="minLongitude">最小经度</param>
        </member>
        <member name="M:ClassLib4Net.GeographyHelper.GetLatLon2(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            where    φ is latitude, λ is longitude, θ is the bearing (clockwise from north),
            δ is the angular distance d/R; d being the distance travelled, R the earth’s radius
            bearing 方位 0，90，180，270
            </summary>
        </member>
        <member name="M:ClassLib4Net.GeographyHelper.ConvertDegreesToRadians(System.Double)">
            <summary>
            角度转换成弧度
            </summary>
            <param name="degrees">角度</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.GeographyHelper.ConvertRadiansToDegrees(System.Double)">
            <summary>
            弧度转换成角度
            </summary>
            <param name="radian">弧度</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.GeographyHelper.HaverSin(System.Double)">
            <summary>
            球面上任意两点之间的距离计算公式，Haversine公式采用了正弦函数，即使距离很小，也能保持足够的有效数字。
            </summary>
            <param name="theta">两点经度的差值</param>
            <returns></returns>
        </member>
        <member name="F:ClassLib4Net.GeographyHelper.EARTH_RADIUS">
            <summary>
            地球半径 平均值，千米km
            </summary>
        </member>
        <member name="M:ClassLib4Net.GeographyHelper.Distance(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            给定的经度1，纬度1；经度2，纬度2. 计算2个经纬度之间的距离。
            </summary>
            <param name="lat1">经度1</param>
            <param name="lon1">纬度1</param>
            <param name="lat2">经度2</param>
            <param name="lon2">纬度2</param>
            <returns>距离（公里、千米）</returns>
        </member>
        <member name="T:ClassLib4Net.HtmlHelper">
            <summary>
            HTML助手
            熊学浩
            2015-01-21
            </summary>
        </member>
        <member name="M:ClassLib4Net.HtmlHelper.RemoveHtml(System.String)">
            <summary>
            清除html标签
            </summary>
            <param name="htmlstring"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.HtmlHelper.HtmlEncode(System.String)">
            <summary>
            替换字符串中的特殊字符为html标记
            </summary>
            <param name="theString">需要进行替换的文本</param>
            <returns>替换完的文本。</returns>
        </member>
        <member name="M:ClassLib4Net.HtmlHelper.HtmlDiscode(System.String)">
            <summary>
            恢复字符串中的特殊字符
            </summary>
            <param name="theString">需要恢复的文本</param>
            <returns>恢复好的文本。</returns>
        </member>
        <member name="M:ClassLib4Net.HtmlHelper.RemoveAlinkTag(System.String)">
            <summary>
            移除超文本链接A标签，保留链接文本
            </summary>
            <param name="htmlContent">html内容</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.HtmlHelper.RemoveStyleTag(System.String)">
            <summary>
            移除Style标签以及样式文本
            </summary>
            <param name="htmlContent">html内容</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.HtmlHelper.RemoveScriptTag(System.String)">
            <summary>
            移除Script标签以及脚本
            </summary>
            <param name="htmlContent">html内容</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.HtmlHelper.GetHtmlImageUrlList(System.String)">
            <summary>
            取得HTML中所有图片的 URL。
            </summary>
            <param name="htmlText">HTML代码</param>
            <returns>图片的URL列表</returns>
        </member>
        <member name="M:ClassLib4Net.HtmlHelper.GetImgTag(System.String)">
            <summary>
            取得HTML中所有图片的 img标签。
            </summary>
            <param name="htmlText">HTML代码</param>
            <returns>代码中的img标签列表</returns>
        </member>
        <member name="M:ClassLib4Net.HtmlHelper.GetUrlByImgTag(System.String)">
            <summary>
            取得HTML中所有IMG标签的URL。
            </summary>
            <param name="ImgHtmlTag">HTML代码IMG标签</param>
            <returns>代码中的IMG标签URL列表</returns>
        </member>
        <member name="M:ClassLib4Net.HtmlHelper.GetAbsoluteURL(System.String,System.String)">
            <summary>
            获取绝对URL
            </summary>
            <param name="referenceUrl">参照物URL（当前网页URL）</param>
            <param name="virtualURL">要转化的虚拟URL（当前网页内的图片URL）</param>
            <returns>转化后的绝对URL</returns>
        </member>
        <member name="M:ClassLib4Net.HtmlHelper.CreateShortcut(System.String,System.String)">
            <summary> 
            创建快捷方式 
            </summary> 
            <param name="Title">标题</param> 
            <param name="URL">URL地址</param> 
        </member>
        <member name="M:ClassLib4Net.HtmlHelper.CreateShortcutFile(System.String,System.String,System.String)">
            <summary> 
            创建快捷方式 
            </summary> 
            <param name="Title">标题</param> 
            <param name="URL">URL地址</param> 
            <param name="SpecialFolder">特殊文件夹</param> 
        </member>
        <member name="T:ClassLib4Net.Http.HttpClient">
            <summary>
            对Http请求的封装
            </summary>
        </member>
        <member name="F:ClassLib4Net.Http.HttpClient.Cookies">
            <summary>
            Cookies
            </summary>
        </member>
        <member name="F:ClassLib4Net.Http.HttpClient.UserAgent">
            <summary>
            用户代理UserAgent
            </summary>
        </member>
        <member name="F:ClassLib4Net.Http.HttpClient.TimeOut">
            <summary>
            超时时间
            </summary>
        </member>
        <member name="F:ClassLib4Net.Http.HttpClient.AllowAutoRedirect">
            <summary>
            自动跳转
            </summary>
        </member>
        <member name="F:ClassLib4Net.Http.HttpClient.Encoding">
            <summary>
            编码（默认utf-8）
            </summary>
        </member>
        <member name="F:ClassLib4Net.Http.HttpClient.Proxy">
            <summary>
            代理
            </summary>
        </member>
        <member name="F:ClassLib4Net.Http.HttpClient.ContentType">
            <summary>
            ContentType
            </summary>
        </member>
        <member name="M:ClassLib4Net.Http.HttpClient.#ctor(System.Net.CookieContainer)">
            <summary>
            构造函数
            </summary>
            <param name="cookieContainer"></param>
        </member>
        <member name="M:ClassLib4Net.Http.HttpClient.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:ClassLib4Net.Http.HttpClient.GetResponse(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            获取Http的请求
            </summary>
            <param name="url"></param>
            <param name="method"></param>
            <param name="data"></param>
            <param name="host"></param>
            <param name="orign"></param>
            <param name="refer"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Http.HttpClient.Post(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            获取http请求返回的字符串（Post）
            </summary>
            <param name="url"></param>
            <param name="data"></param>
            <param name="host"></param>
            <param name="orign"></param>
            <param name="refer"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Http.HttpClient.Get(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            获取http请求返回的字符串（Get）
            </summary>
            <param name="url"></param>
            <param name="host"></param>
            <param name="orign"></param>
            <param name="refer"></param>
            <param name="data"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Http.HttpClient.GetString(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            获取http请求返回的字符串
            </summary>
            <param name="method"></param>
            <param name="url"></param>
            <param name="data"></param>
            <param name="host"></param>
            <param name="orign"></param>
            <param name="refer"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Http.HttpClient.GetUri(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            获取http请求跳转的Uri
            </summary>
            <param name="url"></param>
            <param name="method"></param>
            <param name="data"></param>
            <param name="host"></param>
            <param name="orign"></param>
            <param name="refer"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Http.HttpClient.GetImageBytes(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            获取图片的二进制数据
            </summary>
            <param name="url"></param>
            <param name="host"></param>
            <param name="orign"></param>
            <param name="refer"></param>
            <param name="data"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Http.HttpClient.GetImageStream(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            获取图片流
            </summary>
            <param name="url"></param>
            <param name="host"></param>
            <param name="orign"></param>
            <param name="refer"></param>
            <param name="data"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Http.HttpClient.DownLoad(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            下载
            </summary>
            <param name="url"></param>
            <param name="fileName"></param>
            <param name="host"></param>
            <param name="orign"></param>
            <param name="refer"></param>
            <param name="data"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Http.HttpClient.Upload(System.String,System.String,System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.String,System.String)">
            <summary>
            上传图片到服务器(模拟swf）
            </summary>
            <param name="url"></param>
            <param name="fileName"></param>
            <param name="paramName"></param>
            <param name="contentType"></param>
            <param name="nvc"></param>
            <param name="host"></param>
            <param name="orign"></param>
            <param name="refer"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Http.HttpClient.Upload(System.String,System.String,System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            上传图片到服务器
            </summary>
            <param name="url"></param>
            <param name="fileKeyName"></param>
            <param name="filePath"></param>
            <param name="stringDict"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Http.HttpClient.GetAllCookies">
            <summary>
            获取所有的cookie
            </summary>
            <returns></returns>
        </member>
        <member name="T:ClassLib4Net.Http.HttpDataHelper">
            <summary>
            HTTP数据传输助手
            </summary>
        </member>
        <member name="M:ClassLib4Net.Http.HttpDataHelper.HttpWebRequestGet(System.String,System.Collections.Generic.List{ClassLib4Net.Http.UrlParameter})">
            <summary>
            http Get
            </summary>
            <param name="url"></param>
            <param name="postParameter"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Http.HttpDataHelper.HttpWebRequestPost(System.String,System.Collections.Generic.List{ClassLib4Net.Http.UrlParameter})">
            <summary>
            http Post
            </summary>
            <param name="url"></param>
            <param name="postParameter"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Http.HttpDataHelper.HttpDownloadFile(System.String,System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            下载远程文
            </summary>
            <param name="url">远程文件url</param>
            <param name="savePath">本地保存路径</param>
            <param name="fileName">保存文件名</param>
            <param name="isAsync">是否异步下载</param>
            <param name="repeatTimesForSync">同步下载重试次数</param>
        </member>
        <member name="M:ClassLib4Net.Http.HttpDataHelper.HttpWebRequest(System.String,System.Boolean,System.Collections.Generic.List{ClassLib4Net.Http.UrlParameter})">
            <summary>
            从url获得数据
            </summary>
            <param name="url"></param>
            <param name="isPost"></param>
            <param name="postParameter"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Http.HttpDataHelper.HttpWebRequest(System.String,System.Boolean)">
            <summary>
            从url获得数据
            </summary>
            <param name="url"></param>
            <param name="isPost"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Http.HttpDataHelper.GetDirPath(System.String)">
            <summary>
            获得文件夹路径 例 c:\haha => c:\haha\
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="F:ClassLib4Net.Http.HttpDataHelper.Reg_UrlFilter">
            <summary>
            URL参数过滤正则表达式
            </summary>
        </member>
        <member name="M:ClassLib4Net.Http.HttpDataHelper.HttpWebRequest(System.String)">
            <summary>
            获取url参数列表
            熊学浩
            2013-07-02
            </summary>
            <param name="url">传入url参数，例如：Request.Url.AbsoluteUri </param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Http.HttpDataHelper.HttpWebRequest(System.Web.HttpRequestBase)">
            <summary>
            获取get/post请求参数列表
            熊学浩
            2013-07-17
            </summary>
            <param name="request">System.Web.HttpRequestBase</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Http.HttpDataHelper.HttpWebRequestFile(System.Web.HttpRequestBase)">
            <summary>
            获取get/post请求文件参数列表
            熊学浩
            2013-07-19
            </summary>
            <param name="request">System.Web.HttpRequestBase</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Http.HttpDataHelper.HttpWebRequestImage(System.Web.HttpRequestBase)">
            <summary>
            接收HTTP流传输的图片
            </summary>
            <param name="request"></param>
            <param name="flag"></param>
            <returns>Image</returns>
        </member>
        <member name="M:ClassLib4Net.Http.HttpDataHelper.HttpWebRequestInputStream(System.Web.HttpRequestBase,System.Text.Encoding)">
            <summary>
            接收HTTP流传输的字符串数据包
            </summary>
            <param name="request"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Http.HttpDataHelper.HttpWebRequest(System.String,System.String,System.String,System.String,System.Text.Encoding)">
            <summary>
            发送get/post请求,当包含文件类型的数据时默认为post方式请求
            注意：如果传输文件参数，则必须文件存在且可读
            熊学浩
            2013-07-18
            </summary>
            <param name="url">目标url</param>
            <param name="data">要发送的数据 (格式为：name1=value1&amp;name2=value2)</param>
            <param name="datafile">要发送的文件数据 (格式为：file1=C:/test.mp3&amp;file2=C:/test.jpg)</param>
            <param name="method">请求方式 get/post</param>
            <param name="encode">编码格式 System.Text.Encoding</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Http.HttpDataHelper.HttpWebRequest(System.String,System.String,System.Collections.Generic.List{ClassLib4Net.Http.FileByteParameter},System.String,System.Text.Encoding)">
            <summary>
            发送get/post请求,当包含文件类型的数据时默认为post方式请求
            熊学浩
            2013-07-22
            </summary>
            <param name="url">目标url</param>
            <param name="data">要发送的数据 (格式为：name1=value1&amp;name2=value2)</param>
            <param name="datafile">要发送的二进制文件数据 格式为：FileByteParameter </param>
            <param name="method">请求方式 get/post</param>
            <param name="encode">编码格式 System.Text.Encoding</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Http.HttpDataHelper.HttpWebRequest(System.String,System.Byte[],System.Text.Encoding)">
            <summary>
            发送图片
            </summary>
            <param name="url"></param>
            <param name="postData"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Http.HttpDataHelper.OpenFile(System.String)">
            <summary>
            读取文件并转换为二进制
            熊学浩
            2013-07-22
            </summary>
            <param name="path">文件物理路径</param>
            <returns>二进制数据</returns>
        </member>
        <member name="M:ClassLib4Net.Http.HttpDataHelper.GetDomainByHost(System.String)">
            <summary>
            从Host获取顶级（一级）域名
            （例如：www.1xuezhe.exuezhe.com将返回exuezhe.com）
            </summary>
            <param name="host">Request.Url.Host</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Http.HttpDataHelper.GetDomainByURL(System.String)">
            <summary>
            从URL中获取域名
            （例如：http://www.1xuezhe.exuezhe.com/activitys/2048SKDS/new.html将返回www.1xuezhe.exuezhe.com）
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="T:ClassLib4Net.Http.UrlParameter">
            <summary>
            url 参数
            熊学浩
            2013-07-18
            </summary>
        </member>
        <member name="P:ClassLib4Net.Http.UrlParameter.key">
            <summary>
            参数键
            </summary>
        </member>
        <member name="P:ClassLib4Net.Http.UrlParameter.value">
            <summary>
            参数值
            </summary>
        </member>
        <member name="T:ClassLib4Net.Http.FileParameter">
            <summary>
            file 参数
            熊学浩
            2013-07-18
            </summary>
        </member>
        <member name="P:ClassLib4Net.Http.FileParameter.key">
            <summary>
            作为参数传递的key
            保存的结果文件名(不含后缀名)
            </summary>
        </member>
        <member name="P:ClassLib4Net.Http.FileParameter.fileBase">
            <summary>
            文件参数
            </summary>
        </member>
        <member name="T:ClassLib4Net.Http.FileByteParameter">
            <summary>
            file Byte参数
            熊学浩
            2013-07-21
            </summary>
        </member>
        <member name="P:ClassLib4Net.Http.FileByteParameter.key">
            <summary>
            作为参数传递的key
            保存的结果文件名(不含后缀名)
            </summary>
        </member>
        <member name="P:ClassLib4Net.Http.FileByteParameter.filename">
            <summary>
            文件名（含后缀名）
            </summary>
        </member>
        <member name="P:ClassLib4Net.Http.FileByteParameter.filebyte">
            <summary>
            文件的二进制数组
            </summary>
        </member>
        <member name="T:ClassLib4Net.Http.HttpHelper">
            <summary>
            HTTP助手
            熊学浩
            2015-01-20
            </summary>
        </member>
        <member name="T:ClassLib4Net.Http.HttpHelper.Method">
            <summary>
            HttpRequest请求方式
            </summary>
        </member>
        <member name="F:ClassLib4Net.Http.HttpHelper.Method.GET">
            <summary>
            GET方式
            </summary>
        </member>
        <member name="F:ClassLib4Net.Http.HttpHelper.Method.POST">
            <summary>
            POST方式
            </summary>
        </member>
        <member name="M:ClassLib4Net.Http.HttpHelper.Request(System.String)">
            <summary>
            HTTP请求（get方式）默认utf-8编码
            作者：熊学浩
            时间：2014-5-27
            </summary>
            <param name="url">请求地址</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Http.HttpHelper.Request(System.String,System.Int32)">
            <summary>
            HTTP请求（get方式）默认utf-8编码
            作者：熊学浩
            时间：2014-5-27
            </summary>
            <param name="url">请求地址</param>
            <param name="timeout">请求超时时间（毫秒）</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Http.HttpHelper.Request(System.String,System.Int32,System.Text.Encoding)">
            <summary>
            HTTP请求（get方式）默认utf-8编码
            作者：熊学浩
            时间：2014-5-27
            </summary>
            <param name="url">请求地址</param>
            <param name="timeout">请求超时时间（毫秒）</param>
            <param name="encode">编码</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Http.HttpHelper.Request(System.String,System.String,ClassLib4Net.Http.HttpHelper.Method,System.Int32,System.Text.Encoding)">
            <summary>
            HTTP请求
            作者：熊学浩
            时间：2014-5-27
            </summary>
            <param name="url">请求地址</param>
            <param name="data">请求参数</param>
            <param name="method">请求方式</param>
            <param name="timeout">请求超时时间（毫秒）</param>
            <param name="encode">编码</param>
            <returns>HTTP请求返回结果</returns>
        </member>
        <member name="M:ClassLib4Net.Http.HttpHelper.GetBytes(System.Net.WebResponse)">
            <summary>
            内存流，将流拷贝到byte数组中保存起来。
            把流拷贝到内存里面可以重复使用。
            作者：熊学浩
            时间：2014-03-27
            </summary>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Http.HttpHelper.GetStringFromBuffer(System.Byte[],System.String@)">
            <summary>
            从字节数组编码字符串
            作者：熊学浩
            时间：2014-03-27
            </summary>
            <param name="buffer"></param>
            <param name="charSet"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Http.HttpHelper.GetEncodingFromBody(System.Byte[])">
            <summary>
            当无法从Http Header中获得编码信息是就用ASCII编码从buffer中获得字符串。我们知道HTML的标签都是字母，使用ASCII编码虽然中文或者其他双字节字符会出现乱码，但是HTML标签还是能够解析出来。这样我们就可以检测HTML的meta标签从而获得charset。
            作者：熊学浩
            时间：2014-03-27
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Http.HttpHelper.ValidateServerCertificate(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            解决“请求被中止: 未能创建 SSL/TLS 安全通道。”的问题
            http://radiumwong.iteye.com/blog/684118
            </summary>
            <param name="sender"></param>
            <param name="certificate"></param>
            <param name="chain"></param>
            <param name="sslPolicyErrors"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Http.HttpHelper.CheckHeadersByHost(System.Web.HttpRequestBase,System.String)">
            <summary>
            检查Request.Headers请求头是否是正确的域名来源。（不区分大小写）
            Request.Headers["Host"]
            </summary>
            <param name="Request">Request</param>
            <param name="Host">Host值例如：www.1xuezhe.com</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Http.HttpHelper.CheckHeadersByOrigin(System.Web.HttpRequestBase,System.String)">
            <summary>
            检查Request.Headers请求头是否是正确的域名来源。（不区分大小写）
            Request.Headers["Origin"]
            </summary>
            <param name="Request">Request</param>
            <param name="Origin">Origin值例如：http://www.1xuezhe.com</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Http.HttpHelper.CheckHeadersByReferer(System.Web.HttpRequestBase,System.String)">
            <summary>
            检查Request.Headers请求头是否是正确的域名来源。（不区分大小写，全部转换小写字符比较时采用IndexOf算法）
            Request.Headers["Referer"]
            </summary>
            <param name="Request">Request</param>
            <param name="Referer">Referer值例如：http://www.1xuezhe.com/news </param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Http.HttpHelper.CleanInvalidFileName(System.String)">
            <summary>
            清理文件名中无效的字符
            熊学浩
            2015-01-25
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Http.HttpHelper.HttpDownloadFile(System.String,System.String)">
            <summary>
            从网上下载文件，到本地，并进行保存
            熊学浩
            2015-01-25
            </summary>
            <param name="url">网络资源文件绝对URL</param>
            <param name="savePath">保存位置绝对路径</param>
            <returns>保存位置绝对路径</returns>
        </member>
        <member name="M:ClassLib4Net.Http.HttpHelper.SetProxy(System.Net.HttpWebRequest,System.String,System.String[],System.Boolean,System.String,System.String)">
            <summary>
            给HttpWebRequest添加代理服务
            熊学浩
            2015-01-26
            </summary>
            <param name="request">HttpWebRequest</param>
            <param name="proxyAddress">代理服务器的地址</param>
            <param name="BypassList">设置一个地址数组，这些地址不使用代理服务器</param>
            <param name="BypassProxyOnLocal">设置一个值，该值指示是否对本地地址不使用代理服务器</param>
            <param name="NetworkCredentialUserName">网关用户名，设置提交给代理服务器进行身份验证的凭据</param>
            <param name="NetworkCredentialPassword">网关密码，设置提交给代理服务器进行身份验证的凭据</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Http.HttpHelper.SetProxy(System.Net.HttpWebRequest,System.String,System.String[],System.String,System.String)">
            <summary>
            给HttpWebRequest添加代理服务
            熊学浩
            2015-01-26
            </summary>
            <param name="request">HttpWebRequest</param>
            <param name="proxyAddress">代理服务器的地址</param>
            <param name="BypassList">设置一个地址数组，这些地址不使用代理服务器</param>
            <param name="NetworkCredentialUserName">网关用户名，设置提交给代理服务器进行身份验证的凭据</param>
            <param name="NetworkCredentialPassword">网关密码，设置提交给代理服务器进行身份验证的凭据</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Http.HttpHelper.SetProxy(System.Net.HttpWebRequest,System.String,System.String,System.String)">
            <summary>
            给HttpWebRequest添加代理服务
            熊学浩
            2015-01-26
            </summary>
            <param name="request">HttpWebRequest</param>
            <param name="proxyAddress">代理服务器的地址</param>
            <param name="NetworkCredentialUserName">网关用户名，设置提交给代理服务器进行身份验证的凭据</param>
            <param name="NetworkCredentialPassword">网关密码，设置提交给代理服务器进行身份验证的凭据</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Http.HttpHelper.SetProxy(System.Net.HttpWebRequest,System.String,System.String[])">
            <summary>
            给HttpWebRequest添加代理服务
            熊学浩
            2015-01-26
            </summary>
            <param name="request">HttpWebRequest</param>
            <param name="proxyAddress">代理服务器的地址</param>
            <param name="BypassList">设置一个地址数组，这些地址不使用代理服务器</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Http.HttpHelper.SetProxy(System.Net.HttpWebRequest,System.String)">
            <summary>
            给HttpWebRequest添加代理服务
            熊学浩
            2015-01-26
            </summary>
            <param name="request">HttpWebRequest</param>
            <param name="proxyAddress">代理服务器的地址</param>
            <returns></returns>
        </member>
        <member name="T:ClassLib4Net.IISCache">
            <summary>
            IIS缓存管理（HttpContext.Current.Cache：为当前 HTTP 请求获取Cache对象）
            </summary>
        </member>
        <member name="M:ClassLib4Net.IISCache.GetCache(System.String,System.Boolean)">
            <summary>
            获取IIS缓存
            </summary>
            <param name="cacheKey">缓存键</param>
            <param name="isCache">是否IIS缓存</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.IISCache.RemoveCacheByKey(System.String,System.Boolean)">
            <summary>
            根据键移除IIS缓存
            </summary>
            <param name="cacheKey">缓存键</param>
            <param name="isCache">是否IIS缓存</param>
        </member>
        <member name="M:ClassLib4Net.IISCache.RemoveAllCache(System.Boolean)">
            <summary>
            移除全部IIS缓存
            </summary>
            <param name="isCache">是否IIS缓存</param>
        </member>
        <member name="M:ClassLib4Net.IISCache.SetCache(System.String,System.Object,System.Boolean,System.Int32)">
            <summary>
            设置（新增）IIS缓存
            </summary>
            <param name="cacheKey">缓存键</param>
            <param name="objectValue">缓存值</param>
            <param name="isCache">是否IIS缓存</param>
            <param name="cacheTime">过期时间（分钟）</param>
        </member>
        <member name="M:ClassLib4Net.IISCache.UpdateCache(System.String,System.Object,System.Boolean,System.Int32)">
            <summary>
            修改（新增）IIS缓存
            </summary>
            <param name="cacheKey">缓存键</param>
            <param name="objectValue">缓存值</param>
            <param name="isCache">是否IIS缓存</param>
            <param name="cacheTime">过期时间（分钟）</param>
        </member>
        <member name="T:ClassLib4Net.ImageHelper">
            <summary>
            图像处理助手
            </summary>
        </member>
        <member name="M:ClassLib4Net.ImageHelper.Format(System.Drawing.Image)">
            <summary>
            获取Image的标准ImageFormat
            </summary>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.ImageHelper.ImageToBytes(System.Drawing.Image)">
            <summary>
            Image转换成byte[]数组
            </summary>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.ImageHelper.BytesToImage(System.Byte[])">
            <summary>
            byte[]数组转换成图片
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.ImageHelper.CutImage(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            裁剪图片
            </summary>
            <param name="sourceImg">原图片路径</param>
            <param name="desImg">裁剪后图片路径</param>
            <param name="left">X（单位：像素）</param>
            <param name="top">Y（单位：像素）</param>
            <param name="width">宽（单位：像素）</param>
            <param name="height">高（单位：像素）</param>
        </member>
        <member name="M:ClassLib4Net.ImageHelper.MakeThumbnail(System.String,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            生成缩略图
            </summary>
            <param name="originalImagePath">源图路径（物理路径）</param>
            <param name="thumbnailPath">缩略图路径（物理路径）</param>
            <param name="width">缩略图宽度</param>
            <param name="height">缩略图高度</param>
            <param name="mode">生成缩略图的方式（WH：指定高宽缩放（可能变形）；W：指定宽，高按比例；H：指定高，宽按比例；Cut：指定高宽裁减（不变形）；Auto：按照最大边长，另一边按比例）默认Auto方式</param>    
        </member>
        <member name="M:ClassLib4Net.ImageHelper.MakeThumbnail(System.String,System.String,System.Int32,System.Int32,ClassLib4Net.ImageHelper.ThumbnailMode)">
            <summary>
            生成缩略图
            </summary>
            <param name="originalImagePath">源图路径（物理路径）</param>
            <param name="thumbnailPath">缩略图路径（物理路径）</param>
            <param name="width">缩略图宽度</param>
            <param name="height">缩略图高度</param>
            <param name="mode">生成缩略图的方式（WH：指定高宽缩放（可能变形）；W：指定宽，高按比例；H：指定高，宽按比例；Cut：指定高宽裁减（不变形）；Auto：按照最大边长，另一边按比例）默认Auto方式</param>
        </member>
        <member name="T:ClassLib4Net.ImageHelper.ThumbnailMode">
            <summary>
            生成缩略图的方式
            </summary>
        </member>
        <member name="F:ClassLib4Net.ImageHelper.ThumbnailMode.WH">
            <summary>
            指定高宽缩放（可能变形）
            </summary>
        </member>
        <member name="F:ClassLib4Net.ImageHelper.ThumbnailMode.Width">
            <summary>
            指定宽，高按比例
            </summary>
        </member>
        <member name="F:ClassLib4Net.ImageHelper.ThumbnailMode.Height">
            <summary>
            指定高，宽按比例
            </summary>
        </member>
        <member name="F:ClassLib4Net.ImageHelper.ThumbnailMode.Cut">
            <summary>
            指定高宽裁减（不变形）
            </summary>
        </member>
        <member name="F:ClassLib4Net.ImageHelper.ThumbnailMode.Auto">
            <summary>
            按照最大边长，另一边按比例
            </summary>
        </member>
        <member name="M:ClassLib4Net.ImageHelper.MakeThumbnail(System.String,System.Single,System.Single,System.Single,System.Single,System.String,System.Int32,System.Int32,System.Int64)">
            <summary>
            生成缩略图（截图方式）
            </summary>
            <param name="originalPath">原图像（物理路径）</param>
            <param name="cutX">裁剪区原图像左上角X轴坐标</param>
            <param name="cutY">裁剪区原图像左上角Y轴坐标</param>
            <param name="cutWidth">裁剪区原图像宽度</param>
            <param name="cutHeight">裁剪区原图像高度</param>
            <param name="destPath">目标图像（物理路径）</param>
            <param name="destWidth">目标图像宽度</param>
            <param name="destHeight">目标图像高度</param>
            <param name="quality">压缩质量(1-100数字越小压缩率越高，建议75)</param>
        </member>
        <member name="M:ClassLib4Net.ImageHelper.MakeThumbnail(System.String,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Int64)">
            <summary>
            特别适合Wap移动端页面裁剪控件生成缩略图（截图方式）
            </summary>
            <param name="originalPath">原图像（物理路径）</param>
            <param name="cutX">裁剪区原图像左上角X轴坐标</param>
            <param name="cutY">裁剪区原图像左上角Y轴坐标</param>
            <param name="cutWidth">裁剪区原图像宽度</param>
            <param name="cutHeight">裁剪区原图像高度</param>
            <param name="cutNaturalWidth">裁剪控件原图像宽度</param>
            <param name="cutNaturalHeight">裁剪控件原图像高度</param>
            <param name="destPath">目标图像（物理路径）</param>
            <param name="destWidth">目标图像宽度</param>
            <param name="destHeight">目标图像高度</param>
            <param name="quality">压缩质量(1-100数字越小压缩率越高，建议75)</param>
        </member>
        <member name="M:ClassLib4Net.ImageHelper.MakeSmallImage(System.String,System.String,System.Drawing.Size)">
            <summary>
            按照尺寸和压缩质量生成缩略图。需要指定缩略图绝对路径。使用默认的压缩质量（默认75）。
            </summary>
            <param name="srcFileFullName">源图片url</param>
            <param name="disFileFullName">目的图片url</param>
            <param name="smallSize">缩略图尺寸</param> 
            <returns>生成成功返回true，失败返回false。</returns>
        </member>
        <member name="M:ClassLib4Net.ImageHelper.MakeSmallImage(System.String,System.String,System.Drawing.Size,System.Int32)">
            <summary>
            按照尺寸和压缩质量生成缩略图。需要指定缩略图绝对路径。
            </summary>
            <param name="srcFileFullName">源图片url</param>
            <param name="disFileFullName">目的图片url</param>
            <param name="smallSize">缩略图尺寸</param>
            <param name="quality">缩略图质量。赋值范围0－100。一般75能兼顾质量和图片大小。</param>
            <returns>生成成功返回true，失败返回false。</returns>
        </member>
        <member name="M:ClassLib4Net.ImageHelper.MakeSmallImage(System.String,System.String,System.Int32,ClassLib4Net.ImageHelper.LimitSideMode)">
            <summary>
            按照限制的边长和压缩质量生成缩略图。需要指定缩略图绝对路径。使用默认的压缩质量。
            如果图片的边长不大于指定的最大边长，直接拷贝原图作为缩略图。
            </summary>
            <param name="srcFileFullName">源图片url</param>
            <param name="disFileFullName">目的图片url</param>
            <param name="maxSideLength">最大边长</param>
            <param name="limitMode">最大边长限制模式：按照宽度，高度或最大边长。</param>       
            <returns>生成成功返回true，失败返回false。</returns>
        </member>
        <member name="M:ClassLib4Net.ImageHelper.MakeSmallImage(System.String,System.String,System.Int32,ClassLib4Net.ImageHelper.LimitSideMode,System.Int32)">
            <summary>
            按照限制的边长和压缩质量生成缩略图。需要指定缩略图绝对路径。
            如果图片的边长不大于指定的最大边长，直接拷贝原图作为缩略图。
            </summary>
            <param name="srcFileFullName">源图片url</param>
            <param name="disFileFullName">目的图片url</param>
            <param name="maxSideLength">最大边长</param>
            <param name="limitMode">最大边长限制模式：按照宽度，高度或最大边长。</param>
            <param name="quality">缩略图质量，赋值范围0－100，一般75能兼顾质量和图片大小。</param>
            <returns>生成成功返回true，失败返回false。</returns>
        </member>
        <member name="M:ClassLib4Net.ImageHelper.MakeSmallImage(System.Drawing.Image,System.String,System.Drawing.Size,System.Int32)">
            <summary>
            按照尺寸和压缩质量生成缩略图
            </summary>
            <param name="srcImage">源图片</param>
            <param name="disFileFullName">目的图片url</param>
            <param name="smallSize">缩略图尺寸</param>
            <param name="quality">缩略图质量，赋值范围0－100，一般75能兼顾质量和图片大小。</param>
            <returns></returns>
        </member>
        <member name="T:ClassLib4Net.ImageHelper.LimitSideMode">
            <summary>
            生成缩略图时的最大边长限制模式：按照宽度，高度或最大边长。
            </summary>
        </member>
        <member name="F:ClassLib4Net.ImageHelper.LimitSideMode.Width">
            <summary>
            宽度固定，高度按比例
            </summary>
        </member>
        <member name="F:ClassLib4Net.ImageHelper.LimitSideMode.Height">
            <summary>
            高度固定，宽度按比例
            </summary>
        </member>
        <member name="F:ClassLib4Net.ImageHelper.LimitSideMode.Auto">
            <summary>
            按照最大边长，另一边按比例
            </summary>
        </member>
        <member name="M:ClassLib4Net.ImageHelper.Rotate(System.Drawing.Bitmap,System.Single,System.Drawing.Color)">
            <summary>
            任意角度旋转（待测试）
            </summary>
            <param name="bmp">原始图Bitmap</param>
            <param name="angle">旋转角度</param>
            <param name="bkColor">背景色</param>
            <returns>输出Bitmap</returns>
        </member>
        <member name="M:ClassLib4Net.ImageHelper.RotateImg(System.Drawing.Image,System.Single)">
            <summary>
            根据角度旋转图标（待测试）
            </summary>
            <param name="img"></param>
        </member>
        <member name="M:ClassLib4Net.ImageHelper.RotateImg2(System.Drawing.Image,System.Single)">
            <summary>
            根据角度旋转图标第二种方法（待测试）
            </summary>
            <param name="b"></param>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.ImageHelper.Compress(System.Drawing.Bitmap,System.IO.Stream,System.Int64)">
            <summary>
            图片压缩(降低质量以减小文件的大小)
            </summary>
            <param name="srcBitmap">传入的Bitmap对象</param>
            <param name="destStream">压缩后的Stream对象</param>
            <param name="level">压缩等级，0到100，0 最差质量，100 最佳</param>
        </member>
        <member name="M:ClassLib4Net.ImageHelper.Compress(System.Drawing.Bitmap,System.String,System.Int64)">
            <summary>
            图片压缩(降低质量以减小文件的大小)
            </summary>
            <param name="srcBitMap">传入的Bitmap对象</param>
            <param name="destFile">压缩后的图片保存路径</param>
            <param name="level">压缩等级，0到100，0 最差质量，100 最佳</param>
        </member>
        <member name="M:ClassLib4Net.ImageHelper.Compress(System.IO.Stream,System.String,System.Int64)">
            <summary>
            图片压缩(降低质量以减小文件的大小)
            </summary>
            <param name="srcStream">传入的Stream对象</param>
            <param name="destFile">压缩后的图片保存路径</param>
            <param name="level">压缩等级，0到100，0 最差质量，100 最佳</param>
        </member>
        <member name="M:ClassLib4Net.ImageHelper.Compress(System.Drawing.Image,System.String,System.Int64)">
            <summary>
            图片压缩(降低质量以减小文件的大小)
            </summary>
            <param name="srcImg">传入的Image对象</param>
            <param name="destFile">压缩后的图片保存路径</param>
            <param name="level">压缩等级，0到100，0 最差质量，100 最佳</param>
        </member>
        <member name="M:ClassLib4Net.ImageHelper.Compress(System.String,System.String,System.Int64)">
            <summary>
            图片压缩(降低质量以减小文件的大小)
            </summary>
            <param name="srcFile">待压缩的BMP文件名</param>
            <param name="destFile">压缩后的图片保存路径</param>
            <param name="level">压缩等级，0到100，0 最差质量，100 最佳</param>
        </member>
        <member name="M:ClassLib4Net.ImageHelper.ToBase64(System.Drawing.Image)">
            <summary>
            将图片转换为Base64字符串
            </summary>
            <param name="img"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.ImageHelper.ToImage(System.String)">
            <summary>
            将Base64字符串转换为图片
            </summary>
            <param name="base64"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.ImageHelper.Mark(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            给图片加水印
            示例： Mark(@"D:\a.jpg", @"D:\logo.jpg", @"D:\b.jpg", 10, 10, 40);
            </summary>
            <param name="srcPicFileFullName">源文件物理路径</param>
            <param name="markPicFileFullName">水印图物理路径</param>
            <param name="outPicFileFullName">输出文件物理路径</param>
            <param name="rightSpace">水印图在全图的右边距</param>
            <param name="bottomSpace">水印图在全图的下边距</param>
            <param name="lucencyPercent">透明度 0:全透明 100:不透明</param>
            <returns>成功返回true 否则返回false</returns>
        </member>
        <member name="M:ClassLib4Net.ImageHelper.Mark(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            给图片加水印
            示例：Mark(@"D:\a.jpg", @"D:\logo.jpg", @"D:\b.jpg", 3, 4, 20, 10); 
            </summary>
            <param name="srcPicFileFullName">源文件物理路径</param>
            <param name="markPicFileFullName">水印图物理路径</param>
            <param name="outPicFileFullName">输出文件物理路径</param>
            <param name="rightSpacePercent">水印图右边距占全图宽度的百分比</param>
            <param name="bottomSpacePercnet">水印图下边距占全图高度的百分比</param>
            <param name="maskWidthSizePercent">水印图宽度占全图宽度的百分比</param>
            <param name="lucencyPercent">透明度 0:全透明 100:不透明</param>
            <returns>成功返回true 否则返回false</returns>
        </member>
        <member name="T:ClassLib4Net.JsonHelper">
            <summary>
            Json帮助类
            </summary>
        </member>
        <member name="M:ClassLib4Net.JsonHelper.ToJson``1(``0)">
            <summary>
            将一个对象转换成json格式字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.JsonHelper.ToObject``1(System.String)">
            <summary>
            将json格式字符串转换成强类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.JsonHelper.GetJosnValue(System.String,System.String)">
            <summary>
            从json字符串中获取key的值
            </summary>
            <param name="jsonString"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.JsonHelper.Serialize``1(``0)">
            <summary>
            将对象序列化成json字符串
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="o">对象实例</param>
            <returns>json字符串</returns>
        </member>
        <member name="M:ClassLib4Net.JsonHelper.Serialize(System.Object)">
            <summary>
            将对象序列化成json字符串
            </summary>
            <param name="o">对象实例</param>
            <returns>json字符串</returns>
        </member>
        <member name="M:ClassLib4Net.JsonHelper.DeSerialize``1(System.String)">
            <summary>
            将json字符串反序列化成对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="jsonText">json字符串文本</param>
            <returns>对象</returns>
        </member>
        <member name="T:ClassLib4Net.ListHelper">
            <summary>
            List转换数据集类
            </summary>
        </member>
        <member name="M:ClassLib4Net.ListHelper.XmlToObjList``1(System.String,System.String)">
            <summary>
            xml转换成List
            </summary>
            <typeparam name="T">转换类型</typeparam>
            <param name="xml">xml字符串</param>
            <param name="headtag">xml tag</param>
            <returns>List结果集</returns>
        </member>
        <member name="M:ClassLib4Net.ListHelper.ObjListToXml``1(System.Collections.Generic.List{``0},System.String)">
            <summary>
            List结果集转换成xml字符串
            </summary>
            <typeparam name="T">待转换类型</typeparam>
            <param name="enitities">结果集</param>
            <param name="headtag">xml外层标签</param>
            <returns>xml字符串</returns>
        </member>
        <member name="T:ClassLib4Net.LogCustom">
            <summary>
            自定义日志
            </summary>
        </member>
        <member name="M:ClassLib4Net.LogCustom.Log(System.String)">
            <summary>
            记录自定义日志信息的方法
            </summary>
            <param name="content">日志信息</param>
        </member>
        <member name="M:ClassLib4Net.LogCustom.Log(System.String,System.String)">
            <summary>
            记录自定义日志信息的方法
            </summary>
            <param name="content">日志信息</param>
            <param name="logLocalPath">日志文件物理路径</param>
        </member>
        <member name="T:ClassLib4Net.LogType">
            <summary>
            日志类型
            </summary>
        </member>
        <member name="F:ClassLib4Net.LogType.Report">
            <summary>
            报告
            </summary>
        </member>
        <member name="F:ClassLib4Net.LogType.Common">
            <summary>
            普通日志
            </summary>
        </member>
        <member name="F:ClassLib4Net.LogType.Error">
            <summary>
            错误
            </summary>
        </member>
        <member name="T:ClassLib4Net.LogTime">
            <summary>
            日志文件名时间格式
            </summary>
        </member>
        <member name="F:ClassLib4Net.LogTime.day">
            <summary>
            天
            </summary>
        </member>
        <member name="F:ClassLib4Net.LogTime.hour">
            <summary>
            时
            </summary>
        </member>
        <member name="F:ClassLib4Net.LogTime.minute">
            <summary>
            分
            </summary>
        </member>
        <member name="T:ClassLib4Net.LogHelper">
            <summary>
            程序日志
            </summary>
        </member>
        <member name="M:ClassLib4Net.LogHelper.LogPath(System.String,ClassLib4Net.LogType,ClassLib4Net.LogTime)">
            <summary>
            日志文件位置
            作者：熊学浩
            日期：2014-5-27
            </summary>
            <param name="prefix">日志文件名前缀</param>
            <param name="logType">日志类型</param>
            <param name="logTime">日志文件名时间格式</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.LogHelper.SetSB(System.Exception,System.Text.StringBuilder@)">
            <summary>
            生成错误信息
            </summary>
            <param name="Ex"></param>
            <param name="sb"></param>
        </member>
        <member name="M:ClassLib4Net.LogHelper.Save(System.String,System.String)">
            <summary>
            记录日志到文件
            作者：熊学浩
            日期：2014-5-27
            </summary>
            <param name="msg">日志内容</param>
            <param name="path">日志路径</param>
        </member>
        <member name="M:ClassLib4Net.LogHelper.Save(System.String,System.String,ClassLib4Net.LogType,ClassLib4Net.LogTime)">
            <summary>
            记录日志到文件
            作者：熊学浩
            日期：2014-5-27
            </summary>
            <param name="msg">日志内容</param>
            <param name="prefix">日志文件名前缀</param>
            <param name="logType">日志类型</param>
            <param name="logTime">日志文件名时间格式</param>       
            <returns>日志路径</returns>
        </member>
        <member name="M:ClassLib4Net.LogHelper.Save(System.Exception)">
            <summary>
            记录异常日志到文件
            调用此方法必须支持HttpContext和HttpRequest对象才行
            作者：熊学浩
            日期：2014-5-27
            </summary>
            <param name="Ex">Exception</param>
        </member>
        <member name="M:ClassLib4Net.LogHelper.Save(System.Exception,System.String)">
            <summary>
            记录异常日志到文件
            调用此方法必须支持HttpContext和HttpRequest对象才行
            作者：熊学浩
            日期：2015-8-13
            </summary>
            <param name="Ex">Exception</param>
            <param name="msg">自定义消息</param>
        </member>
        <member name="M:ClassLib4Net.LogHelper.Save(System.Exception,System.String,ClassLib4Net.LogTime)">
            <summary>
            程序异常监控日志
            作者：熊学浩
            日期：2014-5-27
            </summary>
            <param name="Ex">Exception</param>
            <param name="prefix">日志文件名前缀</param>
            <param name="logTime">日志文件名时间格式</param>
        </member>
        <member name="M:ClassLib4Net.LogHelper.Save(System.Exception,System.String,System.String,ClassLib4Net.LogTime)">
            <summary>
            程序异常监控日志
            作者：熊学浩
            日期：2014-5-27
            </summary>
            <param name="Ex">Exception</param>
            <param name="msg">自定义消息</param>
            <param name="prefix">日志文件名前缀</param>
            <param name="logTime">日志文件名时间格式</param>
        </member>
        <member name="M:ClassLib4Net.MsmqRount.CommonConfig.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:ClassLib4Net.MsmqRount.CommonConfigBase.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:ClassLib4Net.MsmqRount.CommonConfigBase.MsmqConfig">
            <summary>
            消息队列模块配置
            </summary>
        </member>
        <member name="T:ClassLib4Net.MsmqRount.CommonPlatformConfiguration">
            <summary>
            CommonPlatformConfiguration
            </summary>
        </member>
        <member name="M:ClassLib4Net.MsmqRount.CommonPlatformConfiguration.GetMsmqConfig">
            <summary>
            读取MsmqConfig配置
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.MsmqRount.CommonPlatformConfiguration.GetMsmqConfig(System.String)">
            <summary>
            读取MsmqConfig配置
            </summary>
            <param name="configName"></param>
            <returns></returns>
        </member>
        <member name="P:ClassLib4Net.MsmqRount.CommonPlatformConfiurationSectionHandler.CommonConfig">
            <summary>
            Gets the providers.
            </summary>
            <value>The providers.</value>
        </member>
        <member name="P:ClassLib4Net.MsmqRount.CommonPlatformConfiurationSectionHandler.CommonConfigs">
            <summary>
            Gets the providers.
            </summary>
            <value>The providers.</value>
        </member>
        <member name="P:ClassLib4Net.MsmqRount.MsmqConfig.Enabled">
            <summary>
            是否可用
            </summary>
        </member>
        <member name="P:ClassLib4Net.MsmqRount.MsmqConfig.AllowMultiMessage">
            <summary>
            是否启用消息分流机制
            </summary>
        </member>
        <member name="P:ClassLib4Net.MsmqRount.MsmqConfig.DefaultMessageSendArrdess">
            <summary>
            默认发送的地址
            </summary>
        </member>
        <member name="P:ClassLib4Net.MsmqRount.MsmqConfig.MultiMessageAddress">
            <summary>
            分流地址
            </summary>
        </member>
        <member name="T:ClassLib4Net.MsmqRount.MessageAddress">
            <summary>
            队列地址信息
            </summary>
        </member>
        <member name="M:ClassLib4Net.MsmqRount.MessageAddress.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:ClassLib4Net.MsmqRount.MessageAddress.MessageAddressName">
            <summary>
            队列地址名称
            </summary>
        </member>
        <member name="P:ClassLib4Net.MsmqRount.MessageAddress.Group">
            <summary>
            分组
            </summary>
        </member>
        <member name="P:ClassLib4Net.MsmqRount.MessageAddress.Enabled">
            <summary>
            该队列地址是否可用
            </summary>
        </member>
        <member name="T:ClassLib4Net.MsmqRount.MultiMessageAddress">
            <summary>
            队列地址集合
            </summary>
        </member>
        <member name="T:ClassLib4Net.MsmqRount.MultiMessageAddressRount">
             <summary>
             本类是一个多路由消息分发，路由控制类
             对消息路由进行hash散列分发，
             站点web.config应当做如下配置：
             <![CDATA[
              add config at  configSections bleow
             <section name="ClassLib4Net.MSMQConfig" type="ClassLib4Net.MsmqRount.CommonPlatformConfiurationSectionHandler, ClassLib4Net" allowDefinition="MachineToApplication" restartOnExternalChanges="true"/>
             add MSMQConfig:
            <ClassLib4Net.MSMQConfig>
            <CommonConfig>
            <MsmqConfig Enabled="True" AllowMultiSendMessage="False" DefaultMessageSendArrdess=".\Private$\message">
            <MultiMessageAddress>
            <add MessageAddressName=".\Private$\message" Enabled="True"></add>
            <add MessageAddressName=".\Private$\message2" Enabled="True"></add>
            	</MultiMessageAddress>
            </MsmqConfig>
            	</CommonConfig>
            	</ClassLib4Net.MSMQConfig>
             ]]>
             </summary>
        </member>
        <member name="M:ClassLib4Net.MsmqRount.MultiMessageAddressRount.GetConfig">
            <summary>
            获取配置
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.MsmqRount.MultiMessageAddressRount.GetHashMessageAdress(System.Object)">
            <summary>
            获取发送消息地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.MsmqRount.MultiMessageAddressRount.GetHashMessageAdress(System.Object,System.String)">
            <summary>
            获取发送消息地址
            </summary>
            <param name="obj"></param>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="T:ClassLib4Net.MVCControl.JsonpResult">
            <summary>
            处理Jsonp返回结果请求
            </summary>
        </member>
        <member name="T:ClassLib4Net.MVCControl.ControllerExtension">
            <summary>
            MVC Controller扩展
            </summary>
        </member>
        <member name="M:ClassLib4Net.MVCControl.ControllerExtension.Jsonp(System.Web.Mvc.Controller,System.Object)">
            <summary>
            支持Jsonp
            </summary>
            <param name="controller"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:ClassLib4Net.PinYinHelper">
            <summary>
            汉字与拼音码转换
            </summary>
        </member>
        <member name="F:ClassLib4Net.PinYinHelper.regexSingleChineseChar">
            <summary>
            匹配单个中文字符
            </summary>
        </member>
        <member name="F:ClassLib4Net.PinYinHelper.regexSingleEnglishChar">
            <summary>
            匹配单个英文字符
            </summary>
        </member>
        <member name="M:ClassLib4Net.PinYinHelper.GetSpellCode(System.String)">
            <summary>
            获取汉字字符串转拼音码字符串（全拼），如果不匹配则返回原字符
            </summary>
            <param name="ChineseText">汉字字符串</param>
            <returns>拼音码字符串（全拼）</returns>
        </member>
        <member name="M:ClassLib4Net.PinYinHelper.GetFirstSpellCode(System.String)">
            <summary>
            获取汉字字符串转拼音的首字母字符串，如果不匹配则返回原字符
            </summary>
            <param name="ChineseText">汉字字符串</param>
            <returns>首字母字符串</returns>
        </member>
        <member name="M:ClassLib4Net.PinYinHelper.GetSpellCodeBySingleChineseChar(System.String)">
            <summary> 
            单个汉字转化为拼音（全拼），如果不匹配则返回原字符
            </summary> 
            <param name="SingleChineseChar">单个汉字</param> 
            <returns>拼音码字符串（全拼）</returns> 
        </member>
        <member name="M:ClassLib4Net.PinYinHelper.GetFirstSpellCodeBySingleChineseChar2(System.String)">
            <summary> 
            单个汉字拼音的首字母，如果不匹配则返回原字符
            </summary> 
            <returns>首字母</returns> 
        </member>
        <member name="M:ClassLib4Net.PinYinHelper.GetPY(System.String)">
            <summary>
            单个汉字的全拼音（首字母大写）简体字，繁体字都行
            </summary>
            <param name="SingleChineseChar">单个汉字</param>
            <returns></returns>
        </member>
        <member name="T:ClassLib4Net.QRCodeHelper">
            <summary>
            QRCode 二维码助手
            熊学浩
            </summary>
        </member>
        <member name="M:ClassLib4Net.QRCodeHelper.Create(System.String,System.Int32)">
            <summary>
            创建二维码
            </summary>
            <param name="data">二维码数据</param>
            <param name="scale">二维码规模(值越大生成的二维码图片像素越高，示例：值4图片尺寸133*133px，值7图片尺寸232*232px，值10图片尺寸331*331px，值20图片尺寸661*661px，值40图片尺寸1321*1321px……)</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.QRCodeHelper.Create(System.String,System.Int32,System.String)">
            <summary>
            创建二维码
            </summary>
            <param name="data">二维码数据</param>
            <param name="scale">二维码规模(值越大生成的二维码图片像素越高，示例：值4图片尺寸133*133px，值7图片尺寸232*232px，值10图片尺寸331*331px，值20图片尺寸661*661px，值40图片尺寸1321*1321px……)</param>
            <param name="savePath">保存文件真实路径</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.QRCodeHelper.Create(System.String,System.String,System.Int32)">
            <summary>
            创建二维码
            </summary>
            <param name="data">二维码数据</param>
            <param name="logoPath">中间的logo图标真实路径</param>
            <param name="scale">二维码规模(值越大生成的二维码图片像素越高，示例：值4图片尺寸133*133px，值7图片尺寸232*232px，值10图片尺寸331*331px，值20图片尺寸661*661px，值40图片尺寸1321*1321px……)</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.QRCodeHelper.Create(System.String,System.String,System.Int32,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            创建二维码
            </summary>
            <param name="data">二维码数据</param>
            <param name="logoPath">中间的logo图标真实路径</param>
            <param name="scale">二维码规模(值越大生成的二维码图片像素越高，示例：值4图片尺寸133*133px，值7图片尺寸232*232px，值10图片尺寸331*331px，值20图片尺寸661*661px，值40图片尺寸1321*1321px……)</param>
            <param name="backgroundColor">背景色（可为空）</param>
            <param name="foregroundColor">前景色（可为空）</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.QRCodeHelper.Create(System.String,System.String,System.Int32,System.String)">
            <summary>
            创建二维码
            </summary>
            <param name="data">二维码数据</param>
            <param name="logoPath">中间的logo图标真实路径</param>
            <param name="scale">二维码规模(值越大生成的二维码图片像素越高，示例：值4图片尺寸133*133px，值7图片尺寸232*232px，值10图片尺寸331*331px，值20图片尺寸661*661px，值40图片尺寸1321*1321px……)</param>
            <param name="savePath">保存文件真实路径</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.QRCodeHelper.Create(System.String,System.String,System.Int32,System.String,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            创建二维码
            </summary>
            <param name="data">二维码数据</param>
            <param name="logoPath">中间的logo图标真实路径</param>
            <param name="scale">二维码规模(值越大生成的二维码图片像素越高，示例：值4图片尺寸133*133px，值7图片尺寸232*232px，值10图片尺寸331*331px，值20图片尺寸661*661px，值40图片尺寸1321*1321px……)</param>
            <param name="savePath">保存文件真实路径</param>
            <param name="backgroundColor">背景色（可为空）</param>
            <param name="foregroundColor">前景色（可为空）</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.QRCodeHelper.CombinImage(System.Drawing.Image,System.String)">
            <summary>    
            调用此函数后使此两种图片合并，类似相册，有个    
            背景图，中间贴自己的目标图片    
            </summary>    
            <param name="QrCode">二维码源图片</param>    
            <param name="logoPath">logo图片真实路径</param>    
        </member>
        <member name="M:ClassLib4Net.QRCodeHelper.KiResizeImage(System.Drawing.Image,System.Int32,System.Int32,System.Int32)">
            <summary>    
            Resize图片    
            </summary>    
            <param name="bmp">原始Bitmap</param>    
            <param name="newW">新的宽度</param>    
            <param name="newH">新的高度</param>    
            <param name="Mode">保留着，暂时未用</param>    
            <returns>处理以后的图片</returns>    
        </member>
        <member name="M:ClassLib4Net.QRCodeHelper.Decode(System.Drawing.Bitmap)">
            <summary>
            解码二维码
            </summary>
            <param name="bitmap">二维码图片</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.QRCodeHelper.Decode(System.String)">
            <summary>
            解码二维码
            </summary>
            <param name="QRCodePath">二维码图片路径</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.QRCodeHelper.saveImage(System.Drawing.Image,System.String)">
            <summary>
            保存图片
            </summary>
            <param name="image"></param>
            <param name="savePath"></param>
        </member>
        <member name="M:ClassLib4Net.QRCodeHelper.ConvertToColor(System.String)">
            <summary>
            将HTML颜色表示形式翻译成System.Drawing.Color结构
            熊学浩
            </summary>
            <param name="htmlcolor"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.QRCodeHelper.FillRoundRectangle(System.Drawing.Graphics,System.Drawing.Brush,System.Drawing.Rectangle,System.Int32)">
            <summary>
            圆角矩形边框
            熊学浩
            </summary>
            <param name="g"></param>
            <param name="brush"></param>
            <param name="rect"></param>
            <param name="cornerRadius"></param>
        </member>
        <member name="M:ClassLib4Net.QRCodeHelper.CreateRoundedCorner(System.String,System.Drawing.Color,System.String,System.String)">
            <summary>
            图形的四个角实现圆角矩形
            熊学浩
            </summary>
            <param name="sSrcFilePath"></param>
            <param name="color"></param>
            <param name="sDstFilePath"></param>
            <param name="sCornerLocation"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.QRCodeHelper.CreateRoundedCorner(System.Drawing.Image,System.Drawing.Color,System.String,System.String)">
            <summary>
            图形的四个角实现圆角矩形
            熊学浩
            </summary>
            <param name="image"></param>
            <param name="color"></param>
            <param name="sDstFilePath"></param>
            <param name="sCornerLocation"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.QRCodeHelper.Create(System.String,System.String,System.Int16,System.Int32,System.String,System.Boolean,System.String)">
            <summary>  
            创建二维码  2018/01/10
            </summary>  
            <param name="QRString">二维码字符串</param>  
            <param name="QRCodeEncodeMode">二维码编码(Byte、AlphaNumeric、Numeric)</param>  
            <param name="QRCodeScale">二维码尺寸(Version为0时，1：26x26，每加1宽和高各加25</param>  
            <param name="QRCodeVersion">二维码密集度0-40</param>  
            <param name="QRCodeErrorCorrect">二维码纠错能力(L：7% M：15% Q：25% H：30%)</param>  
            <param name="hasLogo">是否有logo(logo尺寸50x50，QRCodeScale>=5，QRCodeErrorCorrect为H级)</param>  
            <param name="logoFilePath">logo路径</param>  
            <returns></returns>  
        </member>
        <member name="T:ClassLib4Net.RandomCode">
            <summary>
            RandomCode 随机代码
            熊学浩
            </summary>
        </member>
        <member name="F:ClassLib4Net.RandomCode.basechar">
            <summary>
            随机代码基本字符集
            </summary>
        </member>
        <member name="F:ClassLib4Net.RandomCode.random">
            <summary>
            静态只读的随机对象，确保连续产生的随机数的随机性
            </summary>
        </member>
        <member name="M:ClassLib4Net.RandomCode.sameChar(System.String)">
            <summary>
            字符串中连续相同的字符的个数
            </summary>
            <param name="text">字符串</param>
            <returns>字符串中连续相同的字符的个数</returns>
        </member>
        <member name="M:ClassLib4Net.RandomCode.createRandomCode(System.Int32,System.Boolean)">
            <summary>
            创建随机代码（数字与字母组成）
            </summary>
            <param name="length">随机代码长度</param>
            <param name="onlyUpper">英文字符仅大写</param>
            <returns>随机代码</returns>
        </member>
        <member name="M:ClassLib4Net.RandomCode.createRandomDigital(System.Int32)">
            <summary>
            创建随机代码（纯数字）
            </summary>
            <param name="length">随机代码长度</param>
            <returns>随机代码</returns>
        </member>
        <member name="M:ClassLib4Net.RandomCode.createRandomEnglishAlphabet(System.Int32,System.Boolean)">
            <summary>
            创建随机代码（纯英文字母）
            </summary>
            <param name="length">随机代码长度</param>
            <param name="onlyUpper">英文字符仅大写</param>
            <returns>随机代码</returns>
        </member>
        <member name="M:ClassLib4Net.RandomCode.GenerateRandomDigital(System.Int32)">
            <summary>
            创建随机代码（递归生成纯数字随机字符串）
            </summary>
            <param name="length">生成字符的个数</param>
            <returns>string</returns>
        </member>
        <member name="F:ClassLib4Net.RateControlHelper._SleepMsec">
            <summary>
            线程休眠毫秒数
            </summary>
        </member>
        <member name="P:ClassLib4Net.RateControlHelper.SleepMsec">
            <summary>
            线程当前应休眠的毫秒数
            </summary>
            <returns></returns>
        </member>
        <member name="F:ClassLib4Net.RateControlHelper._MaxSleepMsec">
            <summary>
            线程最大休眠毫秒数
            </summary>
        </member>
        <member name="F:ClassLib4Net.RateControlHelper._MinSleepMsec">
            <summary>
            线程最小休眠毫秒数
            </summary>
        </member>
        <member name="F:ClassLib4Net.RateControlHelper._SleepStep">
            <summary>
            线程休眠时间增加的步长
            </summary>
        </member>
        <member name="M:ClassLib4Net.RateControlHelper.Corrector">
            <summary>
            检查当前休眠毫秒数是否超出阈值范围
            </summary>
        </member>
        <member name="M:ClassLib4Net.RateControlHelper.Successful">
            <summary>
            任务处理成功时调用的方法，成功时直接将休眠值改成最小，加快正常任务处理速度
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.RateControlHelper.Error">
            <summary>
            任务处理失败时调用的方法，把休眠时间按步长值增加，减少请求等待被调用方查检
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.RateControlHelper.None">
            <summary>
            无任务时调用的方法，无任务则直接将休眠值改成最大值，减小资源消耗
            </summary>
            <returns></returns>
        </member>
        <member name="T:ClassLib4Net.RequestHelper">
            <summary>
            Request帮助类
            </summary>
        </member>
        <member name="M:ClassLib4Net.RequestHelper.MapPath(System.String)">
            <summary>
            根据路径获取映射路径
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.RequestHelper.Query(System.String)">
            <summary>
            根据key获取url参数值
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.RequestHelper.RawUrl">
            <summary>
            获取原始url
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.RequestHelper.UrlParams">
            <summary>
            获取当前url参数部分
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.RequestHelper.Params(System.String)">
            <summary>
            根据参数key获取参数值
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.RequestHelper.Form(System.String)">
            <summary>
            获取key获取Form值
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.RequestHelper.Safe(System.String)">
            <summary>
            url安全过滤
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.RequestHelper.NonHtml(System.String)">
            <summary>
            移除Html标签
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.RequestHelper.GetIp(System.Web.HttpContext)">
            <summary>
            获取客户端ip
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.RequestHelper.GetInt(System.String,System.Int32,System.Web.HttpContext)">
            <summary>
            从页面请求获取整型
            </summary>
            <param name="str">请求key</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.RequestHelper.GetDate(System.String,System.DateTime)">
            <summary>
            从页面请求获取时间
            </summary>
            <param name="str">请求key</param>
            <param name="defatulValue">默认值</param>
            <returns>获得的日期</returns>
        </member>
        <member name="M:ClassLib4Net.RequestHelper.Rediret301(System.String)">
            <summary>
            301跳转
            </summary>
            <param name="url">要跳转的地址</param>
        </member>
        <member name="M:ClassLib4Net.RequestHelper.Rediret301(System.Web.HttpContext,System.String)">
            <summary>
            301跳转
            </summary>
            <param name="context">http上下文</param>
            <param name="url">要跳转的地址</param>
        </member>
        <member name="T:ClassLib4Net.SessionHelper">
            <summary>
            Session帮助类
            </summary>
        </member>
        <member name="M:ClassLib4Net.SessionHelper.GetValue``1(System.String)">
            <summary>
            根据key获取value
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.SessionHelper.SetValue(System.String,System.Object)">
            <summary>
            设置键值对
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:ClassLib4Net.SessionHelper.Remove(System.String)">
            <summary>
            根据key移除缓存
            </summary>
            <param name="key"></param>
        </member>
        <member name="T:ClassLib4Net.StringHelper">
            <summary>
            用于进行字符串处理的类
            </summary>
        </member>
        <member name="M:ClassLib4Net.StringHelper.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:ClassLib4Net.StringHelper.GetBytesLength(System.String,System.Text.Encoding)">
            <summary>
            获取字符串的实际字节长度的方法
            </summary>
            <param name="source"></param>
            <param name="encoding">System.Text.Encoding</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.StringHelper.SubStringByBytes(System.String,System.Int32,System.Text.Encoding,System.String)">
            <summary>
            按字节数截取字符串的方法(比SubString好用)
            </summary>
            <param name="source">要截取的字符串（可空）</param>
            <param name="NumberOfBytes">要截取的字节数</param>
            <param name="encoding">System.Text.Encoding</param>
            <param name="suffix">结果字符串的后缀（超出部分显示为该后缀）</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.StringHelper.SubStringByBytes(System.String,System.Int32,System.String,System.String)">
            <summary>
            按字节数截取字符串的方法(比SubString好用)
            </summary>
            <param name="source">要截取的字符串（可空）</param>
            <param name="NumberOfBytes">要截取的字节数</param>
            <param name="encoding">UTF-8，Unicode，GB2312...</param>
            <param name="suffix">结果字符串的后缀（超出部分显示为该后缀）</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.StringHelper.GetRealLength(System.String)">
            <summary>
            获取字符串的实际字节长度的方法（Encoding.Default编码）
            </summary>
            <param name="source">字符串</param>
            <returns>实际长度</returns>
        </member>
        <member name="M:ClassLib4Net.StringHelper.GetRealLength(System.String,System.Text.Encoding)">
            <summary>
            获取字符串的实际字节长度的方法
            </summary>
            <param name="source"></param>
            <param name="encoding">System.Text.Encoding</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.StringHelper.GetRealLength(System.String,System.String)">
            <summary>
            获取字符串的实际字节长度的方法
            </summary>
            <param name="source"></param>
            <param name="encoding">UTF-8，Unicode，GB2312...</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.StringHelper.SubString(System.String,System.Int32,System.Text.Encoding,System.String)">
            <summary>
            按字节数截取字符串的方法
            </summary>
            <param name="source">要截取的字符串（可空）</param>
            <param name="NumberOfBytes">要截取的字节数</param>
            <param name="encoding">System.Text.Encoding</param>
            <param name="suffix">结果字符串的后缀（超出部分显示为该后缀）</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.StringHelper.SubString(System.String,System.Int32,System.String,System.String)">
            <summary>
            按字节数截取字符串的方法
            </summary>
            <param name="source">要截取的字符串（可空）</param>
            <param name="NumberOfBytes">要截取的字节数</param>
            <param name="encoding">UTF-8，Unicode，GB2312...</param>
            <param name="suffix">结果字符串的后缀（超出部分显示为该后缀）</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.StringHelper.SubStringNatural(System.String,System.Int32,System.String)">
            <summary>
            截取字符串的方法（按正常字符串Length计算）
            </summary>
            <param name="source">要截取的字符串（可空）</param>
            <param name="length">要截取的字数</param>
            <param name="suffix">结果字符串的后缀（超出部分显示为该后缀）</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.StringHelper.TrimEndZeroOfDecimals(System.String)">
            <summary>
            移除小数点后末尾0的方法
            </summary>
            <param name="decimals">包含小数点的字符串</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.StringHelper.SubSpecialLengthDecimal(System.Object,System.Int32)">
            <summary>
            截取规定小数点后位数的方法
            </summary>
            <param name="objDecimal">截取前的小数对象</param>
            <param name="length">要截取的小数位长度</param>
            <returns>截取后的小数字符串</returns>
        </member>
        <member name="M:ClassLib4Net.StringHelper.GetCurrentDateString">
            <summary>
            获取8位当前日期字符串的方法
            </summary>
            <returns>8位当前日期字符串</returns>
        </member>
        <member name="M:ClassLib4Net.StringHelper.GetSmallCurrentDateString">
            <summary>
            获取6位当前日期字符串的方法
            </summary>
            <returns>6位当前日期字符串</returns>
        </member>
        <member name="M:ClassLib4Net.StringHelper.GetTime(System.String)">
            <summary>
            将日期字符串转换成日期时间（例如：20091225091010）
            </summary>
            <param name="time">日期字符串，例如：20091225091010</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.StringHelper.GetHumanFriendDate(System.DateTime,System.Boolean)">
            <summary>
            获取用户友好的日期格式
            </summary>
            <param name="date">日期</param>
            <returns>字符串</returns>
        </member>
        <member name="M:ClassLib4Net.StringHelper.GetSpecialNumericString(System.Int32,System.Int32)">
            <summary>
            获取指定长度数字字符串的方法，不足位数用0填充
            </summary>
            <param name="number">数字</param>
            <param name="length">指定的长度</param>
            <returns>指定长度数字字符串</returns>
        </member>
        <member name="M:ClassLib4Net.StringHelper.TrimStartZero(System.String)">
            <summary>
            移除数字字符串开始0的方法
            </summary>
            <param name="source">移除前的字符串</param>
            <returns>移除后的字符串</returns>
        </member>
        <member name="M:ClassLib4Net.StringHelper.ConvertEncoding(System.Text.Encoding,System.String)">
            <summary>
            转换字符串编码的方法
            </summary>
            <param name="dstEncoding">转换后的编码格式</param>
            <param name="s">要进行转换的字符串</param>
            <returns>转换后的字符串</returns>
        </member>
        <member name="M:ClassLib4Net.StringHelper.ConvertEncoding(System.Text.Encoding,System.Text.Encoding,System.String)">
            <summary>
            转换字符串编码的方法
            </summary>
            <param name="srcEncoding">转换前的编码格式</param>
            <param name="dstEncoding">转换后的编码格式</param>
            <param name="s">要进行转换的字符串</param>
            <returns>转换后的字符串</returns>
        </member>
        <member name="M:ClassLib4Net.StringHelper.ConvertToUTF8Encoding(System.String)">
            <summary>
            将字符串转换到UTF-8编码
            </summary>
            <param name="unicodeString"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.StringHelper.EncodingString(System.String,System.Text.Encoding,System.Text.Encoding)">
            <summary>
            字符串编码
            </summary>
            <param name="source"></param>
            <param name="OldEncoding"></param>
            <param name="NewEncoding"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.StringHelper.ConvertDbcToSbcString(System.String)">
            <summary>
            将全角字符串转成半角字符串的方法
            </summary>
            <param name="source">字符串</param>
            <returns>半角字符串</returns>
        </member>
        <member name="M:ClassLib4Net.StringHelper.ConvertStringArrayToStrings(System.String[])">
            <summary>
            将字符串数组转成逗号分割字符串的方法
            </summary>
            <param name="strArray">字符串数组</param>
            <returns>逗号分割字符串</returns>
        </member>
        <member name="M:ClassLib4Net.StringHelper.UrlEncode(System.String)">
            <summary>
            对字符串进行Url编码的方法
            </summary>
            <param name="s">要进行Url编码的字符串</param>
            <returns>Url编码后的字符串</returns>
        </member>
        <member name="M:ClassLib4Net.StringHelper.UrlEncode(System.String,System.Text.Encoding)">
            <summary>
            对字符串进行Url编码的方法
            </summary>
            <param name="s">要进行Url编码的字符串</param>
            <param name="encoding">编码格式</param>
            <returns>Url编码后的字符串</returns>
        </member>
        <member name="M:ClassLib4Net.StringHelper.IsEmptyString(System.String)">
            <summary>
            验证字符串是否为空
            </summary>
            <param name="str">被判断的字符串</param>
            <returns>bool值</returns>
        </member>
        <member name="M:ClassLib4Net.StringHelper.SqlFilter(System.String)">
            <summary>
            过滤字符串中注入SQL脚本的方法
            </summary>
            <param name="source">传入的字符串</param>
            <returns>过滤后的字符串</returns>
        </member>
        <member name="M:ClassLib4Net.StringHelper.XSSFilter(System.String)">
            <summary>
            过滤字符串中的注入跨站脚本(先进行UrlDecode再过滤脚本关键字)
            </summary>
            <param name="source">需要过滤的字符串</param>
            <returns>过滤后的字符串</returns>
        </member>
        <member name="M:ClassLib4Net.StringHelper.FlashFilter(System.String)">
            <summary>
            过滤字符串中注入Flash代码
            </summary>
            <param name="htmlCode">输入字符串</param>
            <returns>过滤后的字符串</returns>
        </member>
        <member name="M:ClassLib4Net.StringHelper.RemoveHtmlTag(System.String)">
            <summary>
            移除html标记
            </summary>
            <param name="source">移除Html标签之前的字符串</param>
            <returns>移除Html标签之后的字符串</returns>
        </member>
        <member name="M:ClassLib4Net.StringHelper.NoHTML(System.String)">
            <summary>   
            清除HTML标记   
            </summary>   
            <param name="NoHTML">包括HTML的源码</param>   
            <returns>已经去除后的文字</returns>   
        </member>
        <member name="M:ClassLib4Net.StringHelper.CleanUrl(System.String)">
            <summary>
            清理URL字符串#及其后面部分 
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.StringHelper.BuildUrl(System.String,System.String,System.String)">
            <summary>
            操作Url参数，如果url存在指定名称参数就替换，否则追加该参数。
            </summary>
            <param name="url">原URL</param>
            <param name="ParamName">参数名</param>
            <param name="ParamValue">参数值</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.StringHelper.ReadHttp(System.String,System.String@)">
            <summary>
            读取指定URL的内容
            </summary>
            <param name="URL">指定URL</param>
            <param name="Content">该URL包含的内容</param>
            <returns>读取URL的状态</returns>
        </member>
        <member name="M:ClassLib4Net.StringHelper.FormatDoubleToPercent(System.Double)">
            <summary>
            把浮点类型格式化为百分比字符串
            </summary>
            <param name="num">浮点类型数据</param>
            <returns>百分比字符串</returns>
        </member>
        <member name="M:ClassLib4Net.StringHelper.ConvertDbcToSbcChar(System.Char)">
            <summary>
            将全角字符转成半角字符的方法
            </summary>
            <param name="c">转换前的字符</param>
            <returns>半角字符</returns>
        </member>
        <member name="M:ClassLib4Net.StringHelper.ReplaceRightChar(System.String,System.Int32,System.String)">
            <summary>
            替换掉字符串右边若干长度字符串
            （用于修改微信头像地址尺寸）
            </summary>
            <param name="text">原字符串</param>
            <param name="lastLength">从右边开始的长度</param>
            <param name="newText">新的字符串末尾</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.StringHelper.GetValue(System.String,System.String,System.Char,System.Char)">
            <summary>
            获取参数字符串的指定值（例如：QK_QKDetail_jid-00029_cname-中国_issueid-0002920140806）
            </summary>
            <param name="text">源文本</param>
            <param name="key">要获取的键</param>
            <param name="separatorItem">参数项之间的分割符（例如：_）</param>
            <param name="separatorValue">键值对之间的分隔符（例如：-）</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.StringHelper.IsMatch(System.String,System.String)">
            <summary>
            正则表达式验证匹配（不区分大小写）
            </summary>
            <param name="input"></param>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.StringHelper.Replace(System.String,System.String,System.String)">
            <summary>
            正则表达式替换字符串（不区分大小写）
            </summary>
            <param name="input"></param>
            <param name="pattern"></param>
            <param name="replacement"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.StringHelper.Split(System.String,System.String)">
            <summary>
            正则表达式分割字符串（不区分大小写）
            </summary>
            <param name="input"></param>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.StringHelper.RemoveSpace(System.String)">
            <summary>
            移除字符串中所有空格，制表符，回车，换行，分页符
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.StringHelper.RemoveUrlParam(System.String,System.String)">
            <summary>
            移除URL指定参数键及参数值
            </summary>
            <param name="url">url</param>
            <param name="key">参数键(将移除该键值对)</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.StringHelper.ClearString(System.String)">
            <summary>
            清除字符串中的换行，分段，分页，制表符等
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.StringHelper.EscapeToJson(System.String)">
            <summary>
            转义用于拼接JSON的字符串中特殊字符（转义处理双引号，正斜杠，反斜杠，换行符号等）
            </summary>
            <param name="text">JSON中数据文本</param>
            <returns>转义后的JSON中数据文本方便反序列化</returns>
        </member>
        <member name="M:ClassLib4Net.StringHelper.RemoveSingleQuotes(System.String)">
            <summary>
            移除字符串中所有单引号
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.StringHelper.ClearRegex(System.String)">
            <summary>
            清理字符串中的正则表达式符号 (\ ^ $ * + ? { } . ( ) : = ! [ ] | -)
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.StringHelper.RemoveSpecialChar(System.String)">
            <summary>
            移除特殊字符，保留Unicode字符，字母，数字，汉字，标点符号，分隔符，符号，空白等
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.StringHelper.IsMatchGuid(System.String)">
            <summary>
            是否匹配Guid格式
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.StringHelper.IsMatchHTTP(System.String)">
            <summary>
            是否匹配 http、https格式的URL（不包括中文及特殊字符，需要URL编码）
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.StringHelper.IsMatchDiskPath(System.String)">
            <summary>
            是否匹配物理磁盘路径，如E:\\iisroot格式的URL（包括中文）
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.StringHelper.IsMatchIP(System.String)">
            <summary>
            严格匹配IP格式（不包括0.0.0.0，最大上限是255.255.255.255）
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:ClassLib4Net.SystemInfo">
            <summary>
            服务器/系统信息
            </summary>
        </member>
        <member name="M:ClassLib4Net.SystemInfo.GetServerInfo">
            <summary>
            获取服务器信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.SystemInfo.OSVersion">
            <summary>
            获取服务器OS
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.SystemInfo.NUMBER_OF_PROCESSORS">
            <summary>
            获取服务器处理器个数
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.SystemInfo.PROCESSOR_IDENTIFIER">
            <summary>
            获取服务器处理器标识
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.SystemInfo.SERVER_SOFTWARE">
            <summary>
            获取服务器IIS版本
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.SystemInfo.MachineName">
            <summary>
            获取服务器名
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.SystemInfo.SERVER_NAME">
            <summary>
            获取服务器域名
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.SystemInfo.Request_Method">
            <summary>
            获取请求方法
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.SystemInfo.Http_Accept_Language">
            <summary>
            返回內容如：gzip,deflate
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.SystemInfo.HTTP_Accept">
            <summary>
            支持的文件类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.SystemInfo.LOCAL_ADDR">
            <summary>
            获取服务器IP
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.SystemInfo.APPL_PHYSICAL_PATH">
            <summary>
            获取虚拟服务绝对路径
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.SystemInfo.Version">
            <summary>
            运行环境版本
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.SystemInfo.ScriptTimeout">
            <summary>
            获取服务器允许的脚本超时时间（秒）
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.SystemInfo.RuningTime">
            <summary>
            获取服务器开机运行时长（小时）
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.SystemInfo.SessionCount">
            <summary>
            获取服务器Session总数
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.SystemInfo.CacheCount">
            <summary>
            获取服务器Cache总数
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.SystemInfo.Remote_Addr">
            <summary>
            获取客户端IP
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.SystemInfo.Remote_Host">
            <summary>
            获取客户端主机
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.SystemInfo.Browser">
            <summary>
            客户端浏览器
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.SystemInfo.BrowserMajorVersion">
            <summary>
            客户端浏览器主版本号
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.SystemInfo.BrowserPlatform">
            <summary>
            获取客户端操作系统
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.SystemInfo.GetIpv4(System.Net.IPAddress[])">
            <summary>
            获得本机ipv4地址
            </summary>
            <param name="ipAddressList"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.SystemInfo.GetIpv4">
            <summary>
            获得本机ipv4地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.SystemInfo.GetIP">
            <summary> 
            获取当前请求的IP地址 
            </summary> 
            <returns></returns> 
        </member>
        <member name="M:ClassLib4Net.SystemInfo.GetIP(System.Web.UI.Page)">
            <summary>
            获取ip地址
            例如:112.168.121.123
            </summary>
            <param name="page">页面，一般为this</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.SystemInfo.GetIP(System.Web.HttpRequestBase)">
            <summary>
            获取ip地址
            例如:112.168.121.123
            </summary>
            <param name="request">Request</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.SystemInfo.GetHiddenIP(System.String)">
            <summary>
            获取ip地址，获取权限显示的ip
            例如:112.168.121.123
            结果:112.*.*.123
            </summary>
            <param name="ip"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.Vdn.StreamOceanHelper.GetUrl(ClassLib4Net.Vdn.StreamOceanHelper.ConentType,ClassLib4Net.Vdn.StreamOceanHelper.Platform,System.Guid,System.Boolean,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="contentType"></param>
            <param name="platform"></param>
            <param name="contentId"></param>
            <param name="isRateAdapt"></param>
            <param name="fmt"></param>
            <returns></returns>
        </member>
        <member name="T:ClassLib4Net.VerificationCode.Captcha">
            <summary>
            图形验证码
            熊学浩
            </summary>
        </member>
        <member name="M:ClassLib4Net.VerificationCode.Captcha.Generate(System.String,System.Int32,System.Int32,System.Drawing.Font)">
            <summary>
            生成图形验证码
            </summary>
            <param name="captchaText">验证码文本</param>
            <param name="width">宽度</param>
            <param name="height">高度</param>
            <param name="font">文本样式</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.WindowsAuthorityMock.GetIdentity(System.String,System.String,System.String)">
            <summary>
            验证用户，并生成 WindowsIdentity 实例
            </summary>
            <param name="userName"></param>
            <param name="domain"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="T:ClassLib4Net.XmlHelper">
            <summary>
            Xml助手
            </summary>
        </member>
        <member name="M:ClassLib4Net.XmlHelper.Serialize``1(``0)">
            <summary>
            将对象序列化成xml字符串
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="o">对象实例</param>
            <returns>xml字符串</returns>
        </member>
        <member name="M:ClassLib4Net.XmlHelper.Serialize(System.Object)">
            <summary>
            将对象序列化成xml字符串
            </summary>
            <param name="o">对象实例</param>
            <returns>xml字符串</returns>
        </member>
        <member name="M:ClassLib4Net.XmlHelper.Serialize``1(``0,System.String)">
            <summary>
            将对象序列化到指定xml文件
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="o">对象实例</param>
            <param name="filePath">完整xml文件路径</param>
        </member>
        <member name="M:ClassLib4Net.XmlHelper.DeSerialize``1(System.String)">
            <summary>
            将xml字符串反序列化成对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="xmlText">xml字符串文本</param>
            <returns>对象</returns>
        </member>
        <member name="M:ClassLib4Net.XmlHelper.DeSerializeByPath``1(System.String)">
            <summary>
            将指定的xml文件反序列化成对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="filePath">完整xml文件路径</param>
            <returns>对象</returns>
        </member>
        <member name="M:ClassLib4Net.XmlHelper.XmlEncode(System.String)">
            <summary>
            Xml实体值转义标签字符，将标签等特殊字符转义成预定义实体
            </summary>
            <param name="XmlText">Xml实体值</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.XmlHelper.XmlDecode(System.String)">
            <summary>
            Xml值反转义标签字符，将预定义实体反转义成原标签等特殊字符
            </summary>
            <param name="XmlText">Xml实体值</param>
            <returns></returns>
        </member>
        <member name="M:ClassLib4Net.XmlHelper.LoadXML(System.Web.HttpRequestBase,System.Text.Encoding)">
            <summary>
            接收XML，调用示例：System.Xml.XmlDocument xml = WeiXinAPI.XmlHelper.GetXML(Request, Request.ContentEncoding)
            </summary>
            <param name="request">System.Web.HttpRequestBase</param>
            <param name="charset">编码格式</param>
            <returns>XML</returns>
        </member>
        <member name="T:System.Web.Mvc.Pager">
            <summary>
            MVC分页控件属性
            </summary>
            <summary>
            MVC分页控件属性
            </summary>
        </member>
        <member name="M:System.Web.Mvc.Pager.#ctor(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            分页控件属性
            </summary>
            <param name="CurrentPageIndex">当前页码</param>
            <param name="PageSize">页容量</param>
            <param name="TotalRecord">总记录数</param>
            <param name="urlPrefix">URL前缀(当前URL)</param>
        </member>
        <member name="P:System.Web.Mvc.Pager.ID">
            <summary>
            分页Html控件id
            </summary>
        </member>
        <member name="P:System.Web.Mvc.Pager.ClassName">
            <summary>
            分页Html控件ClassName
            </summary>
        </member>
        <member name="P:System.Web.Mvc.Pager.ShowPager">
            <summary>
            显示分页控件
            </summary>
        </member>
        <member name="P:System.Web.Mvc.Pager.PageSize">
            <summary>
            每页显示的记录数
            </summary>
        </member>
        <member name="P:System.Web.Mvc.Pager.CurrentPageIndex">
            <summary>
            当前页
            </summary>
        </member>
        <member name="P:System.Web.Mvc.Pager.PageNum">
            <summary>
            显示页码的数目,建议值:3,5,7,9...
            </summary>
        </member>
        <member name="P:System.Web.Mvc.Pager.TotalPage">
            <summary>
            总页数
            </summary>
        </member>
        <member name="P:System.Web.Mvc.Pager.ShowTotalPage">
            <summary>
            显示总页数
            </summary>
        </member>
        <member name="P:System.Web.Mvc.Pager.ShowTotalRecord">
            <summary>
            显示总记录数
            </summary>
        </member>
        <member name="P:System.Web.Mvc.Pager.TotalText">
            <summary>
            共
            </summary>
        </member>
        <member name="P:System.Web.Mvc.Pager.TotalPageText">
            <summary>
            页
            </summary>
        </member>
        <member name="P:System.Web.Mvc.Pager.TotalRecordText">
            <summary>
            条
            </summary>
        </member>
        <member name="P:System.Web.Mvc.Pager.TotalRecord">
            <summary>
            总记录数
            </summary>
        </member>
        <member name="P:System.Web.Mvc.Pager.PageIndexParamName">
            <summary>
            PageIndex参数名字
            </summary>
        </member>
        <member name="P:System.Web.Mvc.Pager.urlPrefix">
            <summary>
            URL前缀(当前URL)
            </summary>
        </member>
        <member name="P:System.Web.Mvc.Pager.homePage">
            <summary>
            首页
            </summary>
        </member>
        <member name="P:System.Web.Mvc.Pager.PreviousPage">
            <summary>
            上一页
            </summary>
        </member>
        <member name="P:System.Web.Mvc.Pager.nextPage">
            <summary>
            下一页
            </summary>
        </member>
        <member name="P:System.Web.Mvc.Pager.endPage">
            <summary>
            尾页
            </summary>
        </member>
        <member name="P:System.Web.Mvc.Pager.ShowJumpTo">
            <summary>
            显示“跳转到”
            </summary>
        </member>
        <member name="P:System.Web.Mvc.Pager.JumpToText">
            <summary>
            跳转到
            </summary>
        </member>
        <member name="P:System.Web.Mvc.Pager.JumpToBtnText">
            <summary>
            确定
            </summary>
        </member>
        <member name="P:System.Web.Mvc.Pager.PageList">
            <summary>
            分页按钮组
            </summary>
        </member>
        <member name="P:System.Web.Mvc.Pager.PagerTempName">
            <summary>
            分部视图分页模板名称
            </summary>
        </member>
        <member name="P:System.Web.Mvc.Pager.ControllerName">
            <summary>
            Controller名称
            </summary>
        </member>
        <member name="P:System.Web.Mvc.Pager.ActionName">
            <summary>
            Action名称
            </summary>
        </member>
        <member name="T:System.Web.Mvc.PagerButton">
            <summary>
            页码按钮
            </summary>
        </member>
        <member name="M:System.Web.Mvc.PagerButton.#ctor(System.Int32,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            构造页码属性
            </summary>
            <param name="pageIndex">页码</param>
            <param name="pageText">文本</param>
            <param name="link">链接</param>
            <param name="disabled">失效/禁用</param>
            <param name="current">是当前按钮</param>
        </member>
        <member name="P:System.Web.Mvc.PagerButton.PageIndex">
            <summary>
            页码
            </summary>
        </member>
        <member name="P:System.Web.Mvc.PagerButton.PageText">
            <summary>
            文本
            </summary>
        </member>
        <member name="P:System.Web.Mvc.PagerButton.Link">
            <summary>
            链接
            </summary>
        </member>
        <member name="P:System.Web.Mvc.PagerButton.current">
            <summary>
            是当前按钮
            </summary>
        </member>
        <member name="P:System.Web.Mvc.PagerButton.disabled">
            <summary>
            失效/禁用
            </summary>
        </member>
        <member name="T:System.Web.Mvc.PageHelper">
            <summary>
            MVC分页帮助类
            修改：熊仔其人 2014-09-01
            这段代码，以前我和上帝都能看的懂，现在，只有上帝能看懂
            继续这样改下去，估计连上帝都看不懂了
            </summary>
        </member>
        <member name="M:System.Web.Mvc.PageHelper.Pager(System.Web.Mvc.HtmlHelper,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String,System.String)">
            <summary>
            MVC分页控件
            </summary>
            <param name="helper"></param>
            <param name="pagerId">分页控件Id</param>
            <param name="pageIndex">当前页</param>
            <param name="pageSize">页容量</param>
            <param name="totalSize">总记录数</param>
            <param name="pageNum">显示的页码数目</param>
            <param name="controllerName">控制器名称</param>
            <param name="actionName">动作名称</param>
            <param name="pagerTempName">分部视图分页模板名称</param>
            <returns></returns>
        </member>
        <member name="M:System.Web.Mvc.PageHelper.Pager(System.Web.Mvc.HtmlHelper,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            MVC分页控件
            </summary>
            <param name="helper"></param>
            <param name="pagerId">分页控件Id</param>
            <param name="totalSize">总记录数</param>
            <param name="pageIndex">当前页码</param>
            <param name="pageSize">页容量</param>
            <param name="pageNum">显示的页码数目</param>
            <param name="pagerTempName">分部视图分页模板名称</param>
            <returns></returns>
        </member>
        <member name="M:System.Web.Mvc.PageHelper.BuildLink(System.String,System.String,System.String,System.Int32)">
            <summary>
            生成链接
            </summary>
        </member>
        <member name="M:System.Web.Mvc.PageHelper.BuildPageList(System.Web.Mvc.Pager,System.String)">
            <summary>
            生成分页按钮
            </summary>
        </member>
        <member name="M:System.Web.Mvc.PageHelper.PagerHtml(System.Web.Mvc.HtmlHelper,System.Web.Mvc.Pager)">
            <summary>
            MVC分页控件
            </summary>
            <param name="helper"></param>
            <param name="pager"></param>
            <returns></returns>
        </member>
        <member name="M:System.Web.Mvc.PageHelper.Pager(System.Web.Mvc.HtmlHelper,System.Web.Mvc.Pager)">
            <summary>
            MVC分页控件
            </summary>
            <param name="helper"></param>
            <param name="pager">分页参数</param>
            <returns></returns>
        </member>
        <member name="M:System.Web.Mvc.PageHelper.Pager(System.Web.Mvc.HtmlHelper,System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.String)">
            <summary>
            MVC分页控件
            </summary>
            <param name="helper"></param>
            <param name="CurrentPageIndex">当前页码</param>
            <param name="PageSize">页容量</param>
            <param name="TotalRecord">总记录数</param>
            <param name="urlPrefix">URL前缀(当前URL)</param>
            <param name="TotalPage">总页数</param>
            <param name="PageIndexParamName">PageIndex参数名字</param>
            <returns></returns>
        </member>
        <member name="T:ObjectHelper">
            <summary>
            本类提供了对象的常用扩展方法
            </summary>
        </member>
        <member name="M:ObjectHelper.DefaultSerialize(System.Object,System.Text.Encoding)">
            <summary>
            对可序列化对象（[Serializable]）进行序列化，默认使用常用的UTF8编码
            </summary>
            <param name="obj">序列化对象</param>
            <param name="encoding">Encoding,默认使用UTF8</param>
            <returns>XML字符串</returns>
        </member>
        <member name="M:ObjectHelper.DefaultSerialize2(System.Object,System.Text.Encoding)">
            <summary>
            对可序列化对象（[Serializable]）进行序列化，默认使用常用的UTF8编码，同时在版本信息里加入编码声明
            </summary>
            <param name="obj">序列化对象</param>
            <param name="encoding">Encoding,默认使用UTF8</param>
            <returns>XML字符串</returns>
        </member>
        <member name="M:ObjectHelper.DefaultDeserialize``1(System.String,System.Text.Encoding)">
            <summary>
            将字符串反序列化成指定对象，默认使用常用的UTF8编码
            </summary>
            <typeparam name="T">目标对象</typeparam>
            <param name="str">反序化的字符串对象</param>
            <param name="encoding">Encoding,默认使用UTF8</param>
            <returns>指定对象</returns>
        </member>
        <member name="M:ObjectHelper.JsonCast``1(System.Object)">
            <summary>
            将当前对象通过json"弱"的特性强制转换成另一个结构有重叠的对象
            </summary>
            <typeparam name="T">目标对象类型</typeparam>
            <param name="obj">转换对象</param>
            <returns>目标对象</returns>
        </member>
    </members>
</doc>
